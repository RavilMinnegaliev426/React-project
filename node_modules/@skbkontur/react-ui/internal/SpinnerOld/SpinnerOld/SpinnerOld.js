import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";

var _dec, _class, _class2, _temp;

import React from 'react';
import * as PropTypes from 'prop-types';
import cn from 'classnames';
import { locale } from "../../../lib/locale/decorators";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { hasSvgAnimationSupport } from "../../../lib/utils";
import { SpinnerOldIcon } from "../../icons/SpinnerOldIcon";
import { jsStyles } from "../SpinnerOld.styles";
import { types, SpinnerOldFallback } from "../SpinnerOldFallback";
import { SpinnerLocaleHelper } from "../locale";
export
/**
 * @deprecated Контур-специфичный компонент, будет удален в 3.0.0, перенесен в `@skbkontur/react-ui-addons` смотри [миграцию](https://github.com/skbkontur/retail-ui/blob/master/packages/react-ui/MIGRATION.md)
 */
var SpinnerOld = (_dec = locale('Spinner', SpinnerLocaleHelper), _dec(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(SpinnerOld, _React$Component);

  function SpinnerOld(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.theme = void 0;
    _this.locale = void 0;

    _this.renderCloud = function (type) {
      var cloudClassName = _this.props.dimmed ? jsStyles.cloudDimmed(_this.theme) : jsStyles.cloud(_this.theme);
      return React.createElement("span", {
        className: jsStyles.cloudWrapper()
      }, React.createElement(SpinnerOldIcon, {
        size: type,
        className: cloudClassName,
        strokeClassName: jsStyles.cloudStroke(_this.theme)
      }));
    };

    _this.renderCircle = function () {
      var theme = _this.theme;
      var circleClassName = _this.props.dimmed ? jsStyles.circleDimmed(theme) : jsStyles.circle(theme);
      return React.createElement(SpinnerOldIcon, {
        size: "mini",
        className: circleClassName
      });
    };

    _this.renderSpinnerOld = function (type) {
      return type === 'mini' ? _this.renderCircle() : _this.renderCloud(type);
    };

    _this.renderCaption = function (type, caption) {
      var captionClassName = cn(jsStyles.caption(_this.theme), type === 'mini' ? jsStyles.captionRight() : jsStyles.captionBottom());
      return React.createElement("span", {
        className: captionClassName
      }, caption);
    };

    return _this;
  }

  var _proto = SpinnerOld.prototype;

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return _this2.renderMain();
    });
  };

  _proto.renderMain = function renderMain() {
    var _this$props = this.props,
        type = _this$props.type,
        _this$props$caption = _this$props.caption,
        caption = _this$props$caption === void 0 ? this.locale.loading : _this$props$caption,
        dimmed = _this$props.dimmed;
    return React.createElement("div", {
      className: jsStyles.spinner()
    }, React.createElement("span", {
      className: jsStyles.inner()
    }, hasSvgAnimationSupport && this.renderSpinnerOld(type), !hasSvgAnimationSupport && React.createElement(SpinnerOldFallback, {
      type: type,
      dimmed: dimmed
    })), caption && this.renderCaption(type, caption));
  };

  return SpinnerOld;
}(React.Component), _class2.__KONTUR_REACT_UI__ = 'SpinnerOld', _class2.propTypes = {
  /**
   * Текст рядом с мини-лоадером.
   *
   * 'Загрузка' - значение по-умолчанию
   */
  caption: PropTypes.node,
  dimmed: PropTypes.bool,

  /**
   * Тип спиннера: mini, normal, big
   *
   * Значение по-умолчанию - normal
   *
   * SpinnerOld.types - все доступные типы
   */
  type: PropTypes.oneOf(Object.keys(types))
}, _class2.defaultProps = {
  type: 'normal'
}, _class2.Types = types, _temp)) || _class);