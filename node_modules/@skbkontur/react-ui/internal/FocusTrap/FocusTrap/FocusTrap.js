import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import { findDOMNode } from 'react-dom';
import { listen as listenFocusOutside, containsTargetOrRenderContainer } from "../../../lib/listenFocusOutside";
export var FocusTrap =
/*#__PURE__*/
function (_React$PureComponent) {
  _inheritsLoose(FocusTrap, _React$PureComponent);

  function FocusTrap() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;
    _this.focusOutsideListenerToken = null;

    _this.onClickOutside = function (e) {
      if (_this.props.onBlur) {
        _this.props.onBlur(e);
      }

      _this.detachListeners();
    };

    _this.attachListeners = function () {
      if (!_this.focusOutsideListenerToken) {
        _this.focusOutsideListenerToken = listenFocusOutside([findDOMNode(_assertThisInitialized(_this))], _this.onClickOutside);
        document.addEventListener('ontouchstart' in document.documentElement ? 'touchstart' : 'mousedown', _this.handleNativeDocClick);
      }
    };

    _this.handleNativeDocClick = function (event) {
      var target = event.target || event.srcElement;
      var node = findDOMNode(_assertThisInitialized(_this));

      if (target instanceof Element && containsTargetOrRenderContainer(target)(node)) {
        return;
      }

      _this.onClickOutside(event);
    };

    return _this;
  }

  var _proto = FocusTrap.prototype;

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.focusOutsideListenerToken) {
      this.detachListeners();
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props = this.props,
        children = _this$props.children,
        onBlur = _this$props.onBlur;
    return React.cloneElement(React.Children.only(children), {
      onFocus: function onFocus() {
        if (onBlur) {
          _this2.attachListeners();
        }

        if (children.props && children.props.onFocus) {
          var _children$props;

          (_children$props = children.props).onFocus.apply(_children$props, arguments);
        }
      }
    });
  };

  _proto.detachListeners = function detachListeners() {
    if (this.focusOutsideListenerToken) {
      this.focusOutsideListenerToken.remove();
      this.focusOutsideListenerToken = null;
      document.removeEventListener('ontouchstart' in document.documentElement ? 'touchstart' : 'mousedown', this.handleNativeDocClick);
    }
  };

  return FocusTrap;
}(React.PureComponent);
FocusTrap.__KONTUR_REACT_UI__ = 'FocusTrap';