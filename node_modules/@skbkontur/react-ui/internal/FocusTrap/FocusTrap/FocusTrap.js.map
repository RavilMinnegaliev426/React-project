{"version":3,"sources":["FocusTrap.tsx"],"names":["React","findDOMNode","listen","listenFocusOutside","containsTargetOrRenderContainer","FocusTrap","focusOutsideListenerToken","onClickOutside","e","props","onBlur","detachListeners","attachListeners","document","addEventListener","documentElement","handleNativeDocClick","event","target","srcElement","node","Element","componentWillUnmount","render","children","cloneElement","Children","only","onFocus","remove","removeEventListener","PureComponent","__KONTUR_REACT_UI__"],"mappings":"4JAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,WAA5B;;AAEA,SAASC,MAAM,IAAIC,kBAAnB,EAAuCC,+BAAvC,QAA8E,8BAA9E;;;;;;;AAOA,WAAaC,SAAb;;;AAGUC,IAAAA,yBAHV;;AAKa,QALb;;;;;;;;;;;;;;;;;;;;;;AA2BUC,IAAAA,cA3BV,GA2B2B,UAACC,CAAD,EAAc;AACrC,UAAI,MAAKC,KAAL,CAAWC,MAAf,EAAuB;AACrB,cAAKD,KAAL,CAAWC,MAAX,CAAkBF,CAAlB;AACD;AACD,YAAKG,eAAL;AACD,KAhCH;;AAkCUC,IAAAA,eAlCV,GAkC4B,YAAM;AAC9B,UAAI,CAAC,MAAKN,yBAAV,EAAqC;AACnC,cAAKA,yBAAL,GAAiCH,kBAAkB,CAAC,CAACF,WAAW,+BAAZ,CAAD,EAAqC,MAAKM,cAA1C,CAAnD;;AAEAM,QAAAA,QAAQ,CAACC,gBAAT;AACE,0BAAkBD,QAAQ,CAACE,eAA3B,GAA6C,YAA7C,GAA4D,WAD9D;AAEE,cAAKC,oBAFP;;AAID;AACF,KA3CH;;;;;;;;;;;;;;AAyDUA,IAAAA,oBAzDV,GAyDiC,UAACC,KAAD,EAAkB;AAC/C,UAAMC,MAAM,GAAGD,KAAK,CAACC,MAAN,IAAgBD,KAAK,CAACE,UAArC;AACA,UAAMC,IAAI,GAAGnB,WAAW,+BAAxB;;AAEA,UAAIiB,MAAM,YAAYG,OAAlB,IAA6BjB,+BAA+B,CAACc,MAAD,CAA/B,CAAwCE,IAAxC,CAAjC,EAAgF;AAC9E;AACD;;AAED,YAAKb,cAAL,CAAoBU,KAApB;AACD,KAlEH,uDAOSK,oBAPT,GAOE,gCAA8B,CAC5B,IAAI,KAAKhB,yBAAT,EAAoC,CAClC,KAAKK,eAAL,GACD,CACF,CAXH,QAaSY,MAbT,GAaE,kBAAgB,qCACe,KAAKd,KADpB,CACNe,QADM,eACNA,QADM,CACId,MADJ,eACIA,MADJ,CAEd,OAAOV,KAAK,CAACyB,YAAN,CAAmBzB,KAAK,CAAC0B,QAAN,CAAeC,IAAf,CAAoBH,QAApB,CAAnB,EAAkD,EACvDI,OAAO,EAAE,mBAAoB,CAC3B,IAAIlB,MAAJ,EAAY,CACV,MAAI,CAACE,eAAL,GACD,CACD,IAAIY,QAAQ,CAACf,KAAT,IAAkBe,QAAQ,CAACf,KAAT,CAAemB,OAArC,EAA8C,qBAC5C,mBAAAJ,QAAQ,CAACf,KAAT,EAAemB,OAAf,mCACD,CACF,CARsD,EAAlD,CAAP,CAUD,CAzBH,QA6CUjB,eA7CV,GA6CE,2BAA0B,CACxB,IAAI,KAAKL,yBAAT,EAAoC,CAClC,KAAKA,yBAAL,CAA+BuB,MAA/B,GACA,KAAKvB,yBAAL,GAAiC,IAAjC,CAEAO,QAAQ,CAACiB,mBAAT,CACE,kBAAkBjB,QAAQ,CAACE,eAA3B,GAA6C,YAA7C,GAA4D,WAD9D,EAEE,KAAKC,oBAFP,EAID,CACF,CAvDH,oBAA+BhB,KAAK,CAAC+B,aAArC,EAAa1B,S,CACG2B,mB,GAAsB,W","sourcesContent":["import React from 'react';\r\nimport { findDOMNode } from 'react-dom';\r\n\r\nimport { listen as listenFocusOutside, containsTargetOrRenderContainer } from '../../lib/listenFocusOutside';\r\n\r\nexport interface FocusTrapProps {\r\n  children: React.ReactElement<any>;\r\n  onBlur?: (event: FocusEvent) => void;\r\n}\r\n\r\nexport class FocusTrap extends React.PureComponent<FocusTrapProps> {\r\n  public static __KONTUR_REACT_UI__ = 'FocusTrap';\r\n\r\n  private focusOutsideListenerToken: {\r\n    remove: () => void;\r\n  } | null = null;\r\n\r\n  public componentWillUnmount() {\r\n    if (this.focusOutsideListenerToken) {\r\n      this.detachListeners();\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const { children, onBlur } = this.props;\r\n    return React.cloneElement(React.Children.only(children), {\r\n      onFocus: (...args: any[]) => {\r\n        if (onBlur) {\r\n          this.attachListeners();\r\n        }\r\n        if (children.props && children.props.onFocus) {\r\n          children.props.onFocus(...args);\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  private onClickOutside = (e: Event) => {\r\n    if (this.props.onBlur) {\r\n      this.props.onBlur(e as FocusEvent);\r\n    }\r\n    this.detachListeners();\r\n  };\r\n\r\n  private attachListeners = () => {\r\n    if (!this.focusOutsideListenerToken) {\r\n      this.focusOutsideListenerToken = listenFocusOutside([findDOMNode(this) as HTMLElement], this.onClickOutside);\r\n\r\n      document.addEventListener(\r\n        'ontouchstart' in document.documentElement ? 'touchstart' : 'mousedown',\r\n        this.handleNativeDocClick,\r\n      );\r\n    }\r\n  };\r\n\r\n  private detachListeners() {\r\n    if (this.focusOutsideListenerToken) {\r\n      this.focusOutsideListenerToken.remove();\r\n      this.focusOutsideListenerToken = null;\r\n\r\n      document.removeEventListener(\r\n        'ontouchstart' in document.documentElement ? 'touchstart' : 'mousedown',\r\n        this.handleNativeDocClick,\r\n      );\r\n    }\r\n  }\r\n\r\n  private handleNativeDocClick = (event: Event) => {\r\n    const target = event.target || event.srcElement;\r\n    const node = findDOMNode(this) as HTMLElement;\r\n\r\n    if (target instanceof Element && containsTargetOrRenderContainer(target)(node)) {\r\n      return;\r\n    }\r\n\r\n    this.onClickOutside(event);\r\n  };\r\n}\r\n"]}