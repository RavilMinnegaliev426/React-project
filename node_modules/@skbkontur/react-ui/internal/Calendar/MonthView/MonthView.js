import React, { useContext } from 'react';
import cn from 'classnames';
import { DateSelect } from "../../DateSelect";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import * as ColorFunctions from "../../../lib/styles/ColorFunctions";
import { jsStyles } from "../MonthView.styles";
import { config } from "../config";
import * as CDS from "../CalendarDateShape";
export function MonthView(props) {
  var _cn;

  var theme = useContext(ThemeContext);
  var children = props.children,
      height = props.height,
      isFirstInYear = props.isFirstInYear,
      isLastInYear = props.isLastInYear,
      maxDate = props.maxDate,
      minDate = props.minDate,
      month = props.month,
      top = props.top,
      year = props.year,
      onMonthSelect = props.onMonthSelect,
      onYearSelect = props.onYearSelect,
      monthSelectRef = props.monthSelectRef,
      yearSelectRef = props.yearSelectRef;
  var isTopNegative = top <= 0;
  var isHeaderSticky = isTopNegative && height >= -top;
  var headerTop = isHeaderSticky ? Math.min(-top, height - config.MONTH_TITLE_HEIGHT) : 0;
  var alpha = isHeaderSticky ? (height + top - config.MONTH_TITLE_HEIGHT) / 10 : 1;
  var borderBottomColor = ColorFunctions.fade(theme.calendarMonthTitleBorderBottomColor, alpha);
  var isYearVisible = isFirstInYear || isHeaderSticky;
  var yearTop = isHeaderSticky && !isLastInYear ? -headerTop - top : 0;
  var monthSelectDisabled = top > 40 || headerTop < 0 || headerTop >= height - config.MONTH_TITLE_HEIGHT;
  var yearSelectDisabled = top > 40 || isLastInYear && top < -height + config.MONTH_TITLE_HEIGHT;

  var getMinMonth = function getMinMonth(value) {
    var min = 0;

    for (var i = 0; i < 12; ++i) {
      if (minDate && CDS.isGreaterOrEqual({
        date: 31,
        month: i,
        year: value
      }, minDate)) {
        min = i;
        break;
      }
    }

    return min;
  };

  var getMaxMonth = function getMaxMonth(value) {
    var max = 11;

    for (var i = 11; i >= 0; --i) {
      if (maxDate && CDS.isLessOrEqual({
        date: 1,
        month: i,
        year: value
      }, maxDate)) {
        max = i;
        break;
      }
    }

    return max;
  };

  return React.createElement("div", {
    "data-tid": "MonthView__month",
    className: jsStyles.month(),
    style: {
      top: top
    },
    key: month + '-' + year
  }, React.createElement("div", {
    style: {
      lineHeight: config.MONTH_TITLE_HEIGHT + "px",
      top: headerTop,
      borderBottomColor: borderBottomColor
    },
    className: cn((_cn = {}, _cn[jsStyles.monthTitle(theme)] = true, _cn[jsStyles.headerSticky(theme)] = isHeaderSticky, _cn))
  }, React.createElement("div", {
    "data-tid": "MonthView__headerMonth",
    className: jsStyles.headerMonth()
  }, React.createElement(DateSelect, {
    disabled: monthSelectDisabled,
    width: 85,
    type: "month",
    value: month,
    onValueChange: onMonthSelect,
    ref: !monthSelectDisabled ? monthSelectRef : undefined,
    minValue: getMinMonth(year),
    maxValue: getMaxMonth(year)
  })), isYearVisible && React.createElement("div", {
    "data-tid": "MonthView__headerYear",
    className: jsStyles.headerYear(),
    style: {
      top: yearTop
    }
  }, React.createElement(DateSelect, {
    disabled: yearSelectDisabled,
    width: 50,
    type: "year",
    value: year,
    minValue: minDate ? minDate.year : undefined,
    maxValue: maxDate ? maxDate.year : undefined,
    onValueChange: onYearSelect,
    ref: !yearSelectDisabled ? yearSelectRef : undefined
  }))), children);
}