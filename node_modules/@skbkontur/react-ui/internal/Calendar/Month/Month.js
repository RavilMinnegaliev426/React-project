import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import { config } from "../config";
import * as CDS from "../CalendarDateShape";
import { MonthView } from "../MonthView";
import { DayCellView } from "../DayCellView";
import * as CalendarScrollEvents from "../CalendarScrollEvents";
export var Month =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Month, _React$Component);

  function Month() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.monthSelect = null;
    _this.yearSelect = null;

    _this.closeSelects = function () {
      if (_this.monthSelect) {
        _this.monthSelect.close();
      }

      if (_this.yearSelect) {
        _this.yearSelect.close();
      }
    };

    _this.monthRef = function (monthSelect) {
      _this.monthSelect = monthSelect;
    };

    _this.yearRef = function (yearSelect) {
      _this.yearSelect = yearSelect;
    };

    _this.handleMonthSelect = function (month) {
      _this.props.onMonthYearChange(month, _this.props.month.year);
    };

    _this.handleYearSelect = function (year) {
      _this.props.onMonthYearChange(_this.props.month.month, year);
    };

    return _this;
  }

  var _proto = Month.prototype;

  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    if (this.props.top !== nextProps.top) {
      return true;
    }

    if (!CDS.isEqual(nextProps.value, this.props.value)) {
      return true;
    }

    if (!CDS.isEqual(nextProps.today, this.props.today)) {
      return true;
    }

    if (!CDS.isEqual(nextProps.minDate, this.props.minDate)) {
      return true;
    }

    if (!CDS.isEqual(nextProps.maxDate, this.props.maxDate)) {
      return true;
    }

    return this.props.month !== nextProps.month;
  };

  _proto.componentDidMount = function componentDidMount() {
    CalendarScrollEvents.addListener(this.closeSelects);
  };

  _proto.render = function render() {
    var _this$props = this.props,
        month = _this$props.month,
        maxDate = _this$props.maxDate,
        minDate = _this$props.minDate,
        top = _this$props.top;
    return React.createElement(MonthView, {
      firstDayOffset: month.offset,
      height: month.height,
      isFirstInYear: month.isFirstInYear,
      isLastInYear: month.isLastInYear,
      maxDate: maxDate,
      minDate: minDate,
      month: month.month,
      top: top,
      year: month.year,
      onMonthSelect: this.handleMonthSelect,
      onYearSelect: this.handleYearSelect,
      monthSelectRef: this.monthRef,
      yearSelectRef: this.yearRef
    }, this.renderCells());
  };

  _proto.renderCells = function renderCells() {
    return React.createElement(MonthDayGrid, {
      days: this.props.month.days,
      offset: this.props.month.offset,
      minDate: this.props.minDate,
      maxDate: this.props.maxDate,
      today: this.props.today,
      value: this.props.value,
      onDateClick: this.props.onDateClick,
      isHoliday: this.props.isHoliday
    });
  };

  return Month;
}(React.Component);

var MonthDayGrid =
/*#__PURE__*/
function (_React$Component2) {
  _inheritsLoose(MonthDayGrid, _React$Component2);

  function MonthDayGrid() {
    return _React$Component2.apply(this, arguments) || this;
  }

  var _proto2 = MonthDayGrid.prototype;

  _proto2.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    if (!CDS.isEqual(nextProps.value, this.props.value)) {
      return true;
    }

    if (!CDS.isEqual(nextProps.today, this.props.today)) {
      return true;
    }

    if (!CDS.isEqual(nextProps.minDate, this.props.minDate)) {
      return true;
    }

    if (!CDS.isEqual(nextProps.maxDate, this.props.maxDate)) {
      return true;
    }

    return this.props.days !== nextProps.days;
  };

  _proto2.render = function render() {
    var _this2 = this;

    return React.createElement("div", null, React.createElement("div", {
      style: {
        width: this.props.offset * config.DAY_HEIGHT,
        display: 'inline-block'
      }
    }), this.props.days.map(function (day) {
      var isWeekend = _this2.props.isHoliday(day);

      return React.createElement(DayCellView, {
        date: day,
        key: day.date + "." + day.month + "." + day.year,
        minDate: _this2.props.minDate,
        maxDate: _this2.props.maxDate,
        today: _this2.props.today,
        value: _this2.props.value,
        isWeekend: isWeekend,
        onDateClick: _this2.props.onDateClick
      });
    }));
  };

  return MonthDayGrid;
}(React.Component);

MonthDayGrid.defaultProps = {
  isHoliday: function isHoliday(day) {
    return day.isWeekend;
  }
};