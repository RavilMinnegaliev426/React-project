{"version":3,"sources":["Month.tsx"],"names":["React","config","CDS","MonthView","DayCellView","CalendarScrollEvents","Month","monthSelect","yearSelect","closeSelects","close","monthRef","yearRef","handleMonthSelect","month","props","onMonthYearChange","year","handleYearSelect","shouldComponentUpdate","nextProps","top","isEqual","value","today","minDate","maxDate","componentDidMount","addListener","render","offset","height","isFirstInYear","isLastInYear","renderCells","days","onDateClick","isHoliday","Component","MonthDayGrid","width","DAY_HEIGHT","display","map","day","isWeekend","date","defaultProps"],"mappings":"sEAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAKA,SAASC,MAAT,QAAuB,UAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,qBAArB;;;AAGA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAO,KAAKC,oBAAZ,MAAsC,wBAAtC;;;;;;;;;;;;;;AAcA,WAAaC,KAAb;AACUC,IAAAA,WADV,GAC2C,IAD3C;AAEUC,IAAAA,UAFV,GAE0C,IAF1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEUC,IAAAA,YAjEV,GAiEyB,YAAM;AAC3B,UAAI,MAAKF,WAAT,EAAsB;AACpB,cAAKA,WAAL,CAAiBG,KAAjB;AACD;AACD,UAAI,MAAKF,UAAT,EAAqB;AACnB,cAAKA,UAAL,CAAgBE,KAAhB;AACD;AACF,KAxEH;;AA0EUC,IAAAA,QA1EV,GA0EqB,UAACJ,WAAD,EAAoC;AACrD,YAAKA,WAAL,GAAmBA,WAAnB;AACD,KA5EH;;AA8EUK,IAAAA,OA9EV,GA8EoB,UAACJ,UAAD,EAAmC;AACnD,YAAKA,UAAL,GAAkBA,UAAlB;AACD,KAhFH;;AAkFUK,IAAAA,iBAlFV,GAkF8B,UAACC,KAAD,EAAmB;AAC7C,YAAKC,KAAL,CAAWC,iBAAX,CAA6BF,KAA7B,EAAoC,MAAKC,KAAL,CAAWD,KAAX,CAAiBG,IAArD;AACD,KApFH;;AAsFUC,IAAAA,gBAtFV,GAsF6B,UAACD,IAAD,EAAkB;AAC3C,YAAKF,KAAL,CAAWC,iBAAX,CAA6B,MAAKD,KAAL,CAAWD,KAAX,CAAiBA,KAA9C,EAAqDG,IAArD;AACD,KAxFH,mDAISE,qBAJT,GAIE,+BAA6BC,SAA7B,EAAoD,CAClD,IAAI,KAAKL,KAAL,CAAWM,GAAX,KAAmBD,SAAS,CAACC,GAAjC,EAAsC,CACpC,OAAO,IAAP,CACD,CACD,IAAI,CAACnB,GAAG,CAACoB,OAAJ,CAAYF,SAAS,CAACG,KAAtB,EAA6B,KAAKR,KAAL,CAAWQ,KAAxC,CAAL,EAAqD,CACnD,OAAO,IAAP,CACD,CACD,IAAI,CAACrB,GAAG,CAACoB,OAAJ,CAAYF,SAAS,CAACI,KAAtB,EAA6B,KAAKT,KAAL,CAAWS,KAAxC,CAAL,EAAqD,CACnD,OAAO,IAAP,CACD,CACD,IAAI,CAACtB,GAAG,CAACoB,OAAJ,CAAYF,SAAS,CAACK,OAAtB,EAA+B,KAAKV,KAAL,CAAWU,OAA1C,CAAL,EAAyD,CACvD,OAAO,IAAP,CACD,CACD,IAAI,CAACvB,GAAG,CAACoB,OAAJ,CAAYF,SAAS,CAACM,OAAtB,EAA+B,KAAKX,KAAL,CAAWW,OAA1C,CAAL,EAAyD,CACvD,OAAO,IAAP,CACD,CACD,OAAO,KAAKX,KAAL,CAAWD,KAAX,KAAqBM,SAAS,CAACN,KAAtC,CACD,CArBH,QAuBSa,iBAvBT,GAuBE,6BAA2B,CACzBtB,oBAAoB,CAACuB,WAArB,CAAiC,KAAKnB,YAAtC,EACD,CAzBH,QA2BSoB,MA3BT,GA2BE,kBAAgB,mBAC2B,KAAKd,KADhC,CACND,KADM,eACNA,KADM,CACCY,OADD,eACCA,OADD,CACUD,OADV,eACUA,OADV,CACmBJ,GADnB,eACmBA,GADnB,CAEd,OACE,oBAAC,SAAD,IACE,cAAc,EAAEP,KAAK,CAACgB,MADxB,EAEE,MAAM,EAAEhB,KAAK,CAACiB,MAFhB,EAGE,aAAa,EAAEjB,KAAK,CAACkB,aAHvB,EAIE,YAAY,EAAElB,KAAK,CAACmB,YAJtB,EAKE,OAAO,EAAEP,OALX,EAME,OAAO,EAAED,OANX,EAOE,KAAK,EAAEX,KAAK,CAACA,KAPf,EAQE,GAAG,EAAEO,GARP,EASE,IAAI,EAAEP,KAAK,CAACG,IATd,EAUE,aAAa,EAAE,KAAKJ,iBAVtB,EAWE,YAAY,EAAE,KAAKK,gBAXrB,EAYE,cAAc,EAAE,KAAKP,QAZvB,EAaE,aAAa,EAAE,KAAKC,OAbtB,IAeG,KAAKsB,WAAL,EAfH,CADF,CAmBD,CAhDH,QAkDUA,WAlDV,GAkDE,uBAAsB,CACpB,OACE,oBAAC,YAAD,IACE,IAAI,EAAE,KAAKnB,KAAL,CAAWD,KAAX,CAAiBqB,IADzB,EAEE,MAAM,EAAE,KAAKpB,KAAL,CAAWD,KAAX,CAAiBgB,MAF3B,EAGE,OAAO,EAAE,KAAKf,KAAL,CAAWU,OAHtB,EAIE,OAAO,EAAE,KAAKV,KAAL,CAAWW,OAJtB,EAKE,KAAK,EAAE,KAAKX,KAAL,CAAWS,KALpB,EAME,KAAK,EAAE,KAAKT,KAAL,CAAWQ,KANpB,EAOE,WAAW,EAAE,KAAKR,KAAL,CAAWqB,WAP1B,EAQE,SAAS,EAAE,KAAKrB,KAAL,CAAWsB,SARxB,GADF,CAYD,CA/DH,gBAA2BrC,KAAK,CAACsC,SAAjC,E;;;;;;;;;;;;;;AAsGMC,Y;;;;;AAKGpB,EAAAA,qB,GAAP,+BAA6BC,SAA7B,EAA2D;AACzD,QAAI,CAAClB,GAAG,CAACoB,OAAJ,CAAYF,SAAS,CAACG,KAAtB,EAA6B,KAAKR,KAAL,CAAWQ,KAAxC,CAAL,EAAqD;AACnD,aAAO,IAAP;AACD;AACD,QAAI,CAACrB,GAAG,CAACoB,OAAJ,CAAYF,SAAS,CAACI,KAAtB,EAA6B,KAAKT,KAAL,CAAWS,KAAxC,CAAL,EAAqD;AACnD,aAAO,IAAP;AACD;AACD,QAAI,CAACtB,GAAG,CAACoB,OAAJ,CAAYF,SAAS,CAACK,OAAtB,EAA+B,KAAKV,KAAL,CAAWU,OAA1C,CAAL,EAAyD;AACvD,aAAO,IAAP;AACD;AACD,QAAI,CAACvB,GAAG,CAACoB,OAAJ,CAAYF,SAAS,CAACM,OAAtB,EAA+B,KAAKX,KAAL,CAAWW,OAA1C,CAAL,EAAyD;AACvD,aAAO,IAAP;AACD;AACD,WAAO,KAAKX,KAAL,CAAWoB,IAAX,KAAoBf,SAAS,CAACe,IAArC;AACD,G;;AAEMN,EAAAA,M,GAAP,kBAAgB;AACd;AACE;AACE;AACE,QAAA,KAAK,EAAE;AACLW,UAAAA,KAAK,EAAE,KAAKzB,KAAL,CAAWe,MAAX,GAAoB7B,MAAM,CAACwC,UAD7B;AAELC,UAAAA,OAAO,EAAE,cAFJ,EADT,GADF;;;AAOG,WAAK3B,KAAL,CAAWoB,IAAX,CAAgBQ,GAAhB,CAAoB,UAAAC,GAAG,EAAI;AAC1B,YAAMC,SAAS,GAAG,MAAI,CAAC9B,KAAL,CAAWsB,SAAX,CAAqBO,GAArB,CAAlB;;AAEA;AACE,8BAAC,WAAD;AACE,YAAA,IAAI,EAAEA,GADR;AAEE,YAAA,GAAG,EAAKA,GAAG,CAACE,IAAT,SAAiBF,GAAG,CAAC9B,KAArB,SAA8B8B,GAAG,CAAC3B,IAFvC;AAGE,YAAA,OAAO,EAAE,MAAI,CAACF,KAAL,CAAWU,OAHtB;AAIE,YAAA,OAAO,EAAE,MAAI,CAACV,KAAL,CAAWW,OAJtB;AAKE,YAAA,KAAK,EAAE,MAAI,CAACX,KAAL,CAAWS,KALpB;AAME,YAAA,KAAK,EAAE,MAAI,CAACT,KAAL,CAAWQ,KANpB;AAOE,YAAA,SAAS,EAAEsB,SAPb;AAQE,YAAA,WAAW,EAAE,MAAI,CAAC9B,KAAL,CAAWqB,WAR1B,GADF;;;AAYD,OAfA,CAPH,CADF;;;AA0BD,G,uBAhDwBpC,KAAK,CAACsC,S,EAA3BC,Y,CACUQ,Y,GAAe,EAC3BV,SAAS,EAAE,mBAACO,GAAD,UAAyDA,GAAG,CAACC,SAA7D,EADgB,E","sourcesContent":["import React from 'react';\r\n\r\nimport { DateSelect } from '../DateSelect';\r\nimport { Nullable } from '../../typings/utility-types';\r\n\r\nimport { config } from './config';\r\nimport * as CDS from './CalendarDateShape';\r\nimport { MonthViewModel } from './MonthViewModel';\r\nimport { DayCellViewModel } from './DayCellViewModel';\r\nimport { MonthView } from './MonthView';\r\nimport { DayCellView } from './DayCellView';\r\nimport * as CalendarScrollEvents from './CalendarScrollEvents';\r\n\r\ninterface MonthProps {\r\n  top: number;\r\n  month: MonthViewModel;\r\n  maxDate?: CDS.CalendarDateShape;\r\n  minDate?: CDS.CalendarDateShape;\r\n  today?: CDS.CalendarDateShape;\r\n  value?: Nullable<CDS.CalendarDateShape>;\r\n  onDateClick?: (date: CDS.CalendarDateShape) => void;\r\n  onMonthYearChange: (month: number, year: number) => void;\r\n  isHoliday?: (day: CDS.CalendarDateShape & { isWeekend: boolean }) => boolean;\r\n}\r\n\r\nexport class Month extends React.Component<MonthProps> {\r\n  private monthSelect: DateSelect | null = null;\r\n  private yearSelect: DateSelect | null = null;\r\n\r\n  public shouldComponentUpdate(nextProps: MonthProps) {\r\n    if (this.props.top !== nextProps.top) {\r\n      return true;\r\n    }\r\n    if (!CDS.isEqual(nextProps.value, this.props.value)) {\r\n      return true;\r\n    }\r\n    if (!CDS.isEqual(nextProps.today, this.props.today)) {\r\n      return true;\r\n    }\r\n    if (!CDS.isEqual(nextProps.minDate, this.props.minDate)) {\r\n      return true;\r\n    }\r\n    if (!CDS.isEqual(nextProps.maxDate, this.props.maxDate)) {\r\n      return true;\r\n    }\r\n    return this.props.month !== nextProps.month;\r\n  }\r\n\r\n  public componentDidMount() {\r\n    CalendarScrollEvents.addListener(this.closeSelects);\r\n  }\r\n\r\n  public render() {\r\n    const { month, maxDate, minDate, top } = this.props;\r\n    return (\r\n      <MonthView\r\n        firstDayOffset={month.offset}\r\n        height={month.height}\r\n        isFirstInYear={month.isFirstInYear}\r\n        isLastInYear={month.isLastInYear}\r\n        maxDate={maxDate}\r\n        minDate={minDate}\r\n        month={month.month}\r\n        top={top}\r\n        year={month.year}\r\n        onMonthSelect={this.handleMonthSelect}\r\n        onYearSelect={this.handleYearSelect}\r\n        monthSelectRef={this.monthRef}\r\n        yearSelectRef={this.yearRef}\r\n      >\r\n        {this.renderCells()}\r\n      </MonthView>\r\n    );\r\n  }\r\n\r\n  private renderCells() {\r\n    return (\r\n      <MonthDayGrid\r\n        days={this.props.month.days}\r\n        offset={this.props.month.offset}\r\n        minDate={this.props.minDate}\r\n        maxDate={this.props.maxDate}\r\n        today={this.props.today}\r\n        value={this.props.value}\r\n        onDateClick={this.props.onDateClick}\r\n        isHoliday={this.props.isHoliday}\r\n      />\r\n    );\r\n  }\r\n\r\n  private closeSelects = () => {\r\n    if (this.monthSelect) {\r\n      this.monthSelect.close();\r\n    }\r\n    if (this.yearSelect) {\r\n      this.yearSelect.close();\r\n    }\r\n  };\r\n\r\n  private monthRef = (monthSelect: DateSelect | null) => {\r\n    this.monthSelect = monthSelect;\r\n  };\r\n\r\n  private yearRef = (yearSelect: DateSelect | null) => {\r\n    this.yearSelect = yearSelect;\r\n  };\r\n\r\n  private handleMonthSelect = (month: number) => {\r\n    this.props.onMonthYearChange(month, this.props.month.year);\r\n  };\r\n\r\n  private handleYearSelect = (year: number) => {\r\n    this.props.onMonthYearChange(this.props.month.month, year);\r\n  };\r\n}\r\n\r\ninterface MonthDayGridProps {\r\n  days: DayCellViewModel[];\r\n  offset: number;\r\n  minDate?: CDS.CalendarDateShape;\r\n  maxDate?: CDS.CalendarDateShape;\r\n  today?: CDS.CalendarDateShape;\r\n  value?: Nullable<CDS.CalendarDateShape>;\r\n  onDateClick?: (x0: CDS.CalendarDateShape) => void;\r\n  isHoliday: (day: CDS.CalendarDateShape & { isWeekend: boolean }) => boolean;\r\n}\r\n\r\nclass MonthDayGrid extends React.Component<MonthDayGridProps> {\r\n  public static defaultProps = {\r\n    isHoliday: (day: CDS.CalendarDateShape & { isWeekend: boolean }) => day.isWeekend,\r\n  };\r\n\r\n  public shouldComponentUpdate(nextProps: MonthDayGridProps) {\r\n    if (!CDS.isEqual(nextProps.value, this.props.value)) {\r\n      return true;\r\n    }\r\n    if (!CDS.isEqual(nextProps.today, this.props.today)) {\r\n      return true;\r\n    }\r\n    if (!CDS.isEqual(nextProps.minDate, this.props.minDate)) {\r\n      return true;\r\n    }\r\n    if (!CDS.isEqual(nextProps.maxDate, this.props.maxDate)) {\r\n      return true;\r\n    }\r\n    return this.props.days !== nextProps.days;\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <div\r\n          style={{\r\n            width: this.props.offset * config.DAY_HEIGHT,\r\n            display: 'inline-block',\r\n          }}\r\n        />\r\n        {this.props.days.map(day => {\r\n          const isWeekend = this.props.isHoliday(day);\r\n\r\n          return (\r\n            <DayCellView\r\n              date={day}\r\n              key={`${day.date}.${day.month}.${day.year}`}\r\n              minDate={this.props.minDate}\r\n              maxDate={this.props.maxDate}\r\n              today={this.props.today}\r\n              value={this.props.value}\r\n              isWeekend={isWeekend}\r\n              onDateClick={this.props.onDateClick}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}