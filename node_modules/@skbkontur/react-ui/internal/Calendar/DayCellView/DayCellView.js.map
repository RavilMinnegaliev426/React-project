{"version":3,"sources":["DayCellView.tsx"],"names":["React","useContext","cn","ThemeContext","CDS","config","jsStyles","size","DAY_HEIGHT","cellStyle","width","height","lineHeight","borderRadius","DayCellView","props","date","minDate","maxDate","today","value","isWeekend","onDateClick","theme","handleClick","month","year","isBetween","cell","Boolean","isEqual","selected","weekend"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,EAAP,MAAe,YAAf;;;AAGA,SAASC,YAAT,QAA6B,gCAA7B;;AAEA,OAAO,KAAKC,GAAZ,MAAqB,qBAArB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,QAAT,QAAyB,sBAAzB;;;;;;;;;;;;AAYA,IAAMC,IAAI,GAAGF,MAAM,CAACG,UAApB;;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAEH,IADS;AAEhBI,EAAAA,MAAM,EAAEJ,IAFQ;AAGhBK,EAAAA,UAAU,EAAEL,IAAI,GAAG,CAAP,GAAW,IAHP;AAIhBM,EAAAA,YAAY,EAAEN,IAAI,GAAG,CAJL,EAAlB;;;AAOA,OAAO,SAASO,WAAT,CAAqBC,KAArB,EAA8C;AAC3CC,EAAAA,IAD2C,GACsBD,KADtB,CAC3CC,IAD2C,CACrCC,OADqC,GACsBF,KADtB,CACrCE,OADqC,CAC5BC,OAD4B,GACsBH,KADtB,CAC5BG,OAD4B,CACnBC,KADmB,GACsBJ,KADtB,CACnBI,KADmB,CACZC,KADY,GACsBL,KADtB,CACZK,KADY,CACLC,SADK,GACsBN,KADtB,CACLM,SADK,CACMC,WADN,GACsBP,KADtB,CACMO,WADN;AAEnD,MAAMC,KAAK,GAAGtB,UAAU,CAACE,YAAD,CAAxB;;AAEA,MAAMqB,WAAW,GAAG,SAAdA,WAAc,GAAM;AACMT,IAAAA,KAAK,CAACC,IADZ,CAChBA,IADgB,eAChBA,IADgB,CACVS,KADU,eACVA,KADU,CACHC,IADG,eACHA,IADG;AAExBJ,IAAAA,WAAW,QAAX,YAAAA,WAAW,CAAG,EAAEN,IAAI,EAAJA,IAAF,EAAQS,KAAK,EAALA,KAAR,EAAeC,IAAI,EAAJA,IAAf,EAAH,CAAX;AACD,GAHD;;AAKA;AACE;AACE,MAAA,KAAK,EAAEjB,SADT;AAEE,MAAA,QAAQ,EAAE,CAAC,CAFb;AAGE,MAAA,QAAQ,EAAE,CAACL,GAAG,CAACuB,SAAJ,CAAcX,IAAd,EAAoBC,OAApB,EAA6BC,OAA7B,CAHb;AAIE,MAAA,SAAS,EAAEhB,EAAE;AACVI,MAAAA,QAAQ,CAACsB,IAAT,CAAcL,KAAd,CADU,IACa,IADb;AAEVjB,MAAAA,QAAQ,CAACa,KAAT,CAAeI,KAAf,CAFU,IAEcM,OAAO,CAACV,KAAK,IAAIf,GAAG,CAAC0B,OAAJ,CAAYd,IAAZ,EAAkBG,KAAlB,CAAV,CAFrB;AAGVb,MAAAA,QAAQ,CAACyB,QAAT,CAAkBR,KAAlB,CAHU,IAGiBM,OAAO,CAACT,KAAK,IAAIhB,GAAG,CAAC0B,OAAJ,CAAYd,IAAZ,EAAkBI,KAAlB,CAAV,CAHxB;AAIVd,MAAAA,QAAQ,CAAC0B,OAAT,CAAiBT,KAAjB,CAJU,IAIgBM,OAAO,CAACR,SAAD,CAJvB,OAJf;;AAUE,MAAA,OAAO,EAAEG,WAVX;;AAYGR,IAAAA,IAAI,CAACA,IAZR,CADF;;;AAgBD","sourcesContent":["import React, { useContext } from 'react';\r\nimport cn from 'classnames';\r\n\r\nimport { Nullable } from '../../typings/utility-types';\r\nimport { ThemeContext } from '../../lib/theming/ThemeContext';\r\n\r\nimport * as CDS from './CalendarDateShape';\r\nimport { config } from './config';\r\nimport { jsStyles } from './DayCellView.styles';\r\n\r\ninterface DayCellViewProps {\r\n  date: CDS.CalendarDateShape;\r\n  today?: CDS.CalendarDateShape;\r\n  value?: Nullable<CDS.CalendarDateShape>;\r\n  minDate?: CDS.CalendarDateShape;\r\n  maxDate?: CDS.CalendarDateShape;\r\n  onDateClick?: (day: CDS.CalendarDateShape) => void;\r\n  isWeekend?: boolean;\r\n}\r\n\r\nconst size = config.DAY_HEIGHT;\r\n\r\nconst cellStyle = {\r\n  width: size,\r\n  height: size,\r\n  lineHeight: size - 2 + 'px',\r\n  borderRadius: size / 2,\r\n};\r\n\r\nexport function DayCellView(props: DayCellViewProps) {\r\n  const { date, minDate, maxDate, today, value, isWeekend, onDateClick } = props;\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const handleClick = () => {\r\n    const { date, month, year } = props.date;\r\n    onDateClick?.({ date, month, year });\r\n  };\r\n\r\n  return (\r\n    <button\r\n      style={cellStyle}\r\n      tabIndex={-1}\r\n      disabled={!CDS.isBetween(date, minDate, maxDate)}\r\n      className={cn({\r\n        [jsStyles.cell(theme)]: true,\r\n        [jsStyles.today(theme)]: Boolean(today && CDS.isEqual(date, today)),\r\n        [jsStyles.selected(theme)]: Boolean(value && CDS.isEqual(date, value)),\r\n        [jsStyles.weekend(theme)]: Boolean(isWeekend),\r\n      })}\r\n      onClick={handleClick}\r\n    >\r\n      {date.date}\r\n    </button>\r\n  );\r\n}\r\n"]}