import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import { ComponentTable } from "../ComponentTable";
export var ComponentCombinator =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(ComponentCombinator, _React$Component);

  function ComponentCombinator() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      page: 0
    };

    _this.prevPage = function () {
      _this.setState(function (_ref) {
        var page = _ref.page;
        return {
          page: page - 1
        };
      });
    };

    _this.nextPage = function () {
      _this.setState(function (_ref2) {
        var page = _ref2.page;
        return {
          page: page + 1
        };
      });
    };

    return _this;
  }

  var _proto = ComponentCombinator.prototype;

  _proto.render = function render() {
    var _ref3;

    var page = this.state.page;
    var _this$props = this.props,
        combinations = _this$props.combinations,
        Component = _this$props.Component,
        presetProps = _this$props.presetProps,
        presetState = _this$props.presetState;
    var pages = [];
    var row = 0;
    var sizes = combinations.map(function (c) {
      return c.length;
    });

    var flatCombinations = (_ref3 = []).concat.apply(_ref3, combinations);

    for (var j = 0; j < sizes.length - 1; j++) {
      pages.push({
        offsetX: row,
        offsetY: row += sizes[j]
      });
    }

    var pageOffsets = pages[page];
    return React.createElement("div", null, React.createElement("div", {
      id: "paginator"
    }, React.createElement("button", {
      disabled: page === 0,
      id: "prev-page",
      onClick: this.prevPage
    }, "Prev"), ' ', React.createElement("small", null, page + 1 + " / " + pages.length), ' ', React.createElement("button", {
      disabled: page + 1 >= pages.length,
      id: "next-page",
      onClick: this.nextPage
    }, "Next")), React.createElement("div", null, pageOffsets && React.createElement(ComponentTable, {
      key: page,
      Component: Component,
      presetProps: presetProps,
      presetState: presetState,
      rows: flatCombinations.slice(pageOffsets.offsetY, flatCombinations.length),
      cols: flatCombinations.slice(pageOffsets.offsetX, pageOffsets.offsetY)
    })));
  };

  return ComponentCombinator;
}(React.Component);
ComponentCombinator.defaultProps = {
  props: [],
  states: [],
  presetProps: {},
  presetState: {}
};