import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import { isKeyArrowVertical, isKeyEnter, isKeyEscape, isKeySpace, someKeys } from "../../../lib/events/keyboard/identifiers";
import { InternalMenu } from "../../InternalMenu";
import { Popup } from "../../Popup";
import { RenderLayer } from "../../RenderLayer";
import { PopupMenuPositions } from "../PopupMenuPositions";
import { isValidPositions } from "../validatePositions";
import { jsStyles } from "../PopupMenu.styles";
export var PopupMenuType = {
  Dropdown: 'dropdown',
  Tooltip: 'tooltip'
};
export var PopupMenu =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(PopupMenu, _React$Component);

  function PopupMenu() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      menuVisible: false,
      firstItemShouldBeSelected: false
    };
    _this.captionWrapper = null;
    _this.savedFocusableElement = null;
    _this.menu = null;

    _this.open = function () {
      return _this.showMenu();
    };

    _this.close = function () {
      return _this.hideMenu();
    };

    _this.refInternalMenu = function (element) {
      return _this.menu = element;
    };

    _this.handleOpen = function () {
      if (_this.menu) {
        _this.menu.focus();
      }
    };

    _this.renderCaption = function () {
      if (typeof _this.props.caption === 'function') {
        var caption = _this.props.caption({
          opened: _this.state.menuVisible,
          openMenu: _this.showMenu,
          closeMenu: _this.hideMenu,
          toggleMenu: _this.toggleMenu
        });

        return React.createElement("span", {
          "data-tid": "PopupMenu__caption",
          className: jsStyles.caption(),
          ref: function ref(element) {
            return _this.captionWrapper = element;
          }
        }, caption);
      }

      return React.createElement("span", {
        "data-tid": "PopupMenu__caption",
        onClick: _this.handleCaptionClick,
        onKeyDown: _this.handleCaptionKeyDown,
        ref: function ref(element) {
          return _this.captionWrapper = element;
        },
        className: jsStyles.caption()
      }, _this.props.caption);
    };

    _this.hideMenuWithoutFocusing = function () {
      return _this.hideMenu();
    };

    _this.showMenu = function (firstItemShouldBeSelected) {
      _this.saveFocus();

      _this.setState({
        menuVisible: true,
        firstItemShouldBeSelected: firstItemShouldBeSelected
      }, function () {
        _this.handleChangeMenuVisible(false);
      });
    };

    _this.hideMenu = function (restoreFocus) {
      _this.setState({
        menuVisible: false,
        firstItemShouldBeSelected: false
      }, function () {
        _this.handleChangeMenuVisible(!!restoreFocus);
      });
    };

    _this.toggleMenu = function () {
      _this.state.menuVisible ? _this.hideMenu() : _this.showMenu();
    };

    _this.handleCaptionClick = function () {
      _this.toggleMenu();
    };

    _this.handleCaptionKeyDown = function (e) {
      if (someKeys(isKeyEnter, isKeySpace, isKeyArrowVertical)(e)) {
        e.preventDefault();

        _this.showMenu(true);
      }
    };

    _this.handleKeyDown = function (e) {
      if (isKeyEscape(e)) {
        var _restoreFocus = true;

        _this.hideMenu(_restoreFocus);
      }
    };

    _this.saveFocus = function () {
      if (document) {
        _this.savedFocusableElement = document.activeElement;
      }
    };

    _this.restoreFocus = function () {
      if (_this.savedFocusableElement) {
        _this.savedFocusableElement.focus();

        _this.savedFocusableElement = null;
      }
    };

    _this.handleChangeMenuVisible = function (focusShouldBeRestored) {
      if (focusShouldBeRestored) {
        _this.restoreFocus();
      }

      if (typeof _this.props.onChangeMenuState === 'function') {
        _this.props.onChangeMenuState(_this.state.menuVisible, focusShouldBeRestored);
      }
    };

    _this.handleItemSelection = function (event) {
      if (event.isDefaultPrevented()) {
        return;
      }

      if (event.type === 'keydown') {
        event.preventDefault();
      }

      var restoreFocus = event.type === 'keydown';

      _this.hideMenu(restoreFocus);
    };

    return _this;
  }

  var _proto = PopupMenu.prototype;

  _proto.render = function render() {
    return React.createElement(RenderLayer, {
      onClickOutside: this.hideMenuWithoutFocusing,
      onFocusOutside: this.hideMenuWithoutFocusing,
      active: this.state.menuVisible
    }, React.createElement("div", {
      className: jsStyles.container()
    }, this.renderCaption(), this.captionWrapper && this.props.children && React.createElement(Popup, {
      anchorElement: this.captionWrapper,
      opened: this.state.menuVisible,
      hasShadow: true,
      margin: this.props.popupMargin,
      hasPin: this.props.popupHasPin,
      pinOffset: this.props.popupPinOffset,
      positions: this.getPositions(),
      disableAnimations: this.props.disableAnimations,
      onOpen: this.handleOpen
    }, React.createElement(InternalMenu, {
      hasShadow: false,
      maxHeight: this.props.menuMaxHeight || 'none',
      onKeyDown: this.handleKeyDown,
      width: this.props.menuWidth || 'auto',
      onItemClick: this.handleItemSelection,
      cyclicSelection: false,
      ref: this.refInternalMenu,
      initialSelectedItemIndex: this.state.firstItemShouldBeSelected ? 0 : -1,
      header: this.props.header,
      footer: this.props.footer
    }, this.props.children))));
  };

  _proto.getPositions = function getPositions() {
    if (this.props.positions && isValidPositions(this.props.positions)) {
      return this.props.positions;
    }

    return PopupMenuPositions;
  };

  return PopupMenu;
}(React.Component);
PopupMenu.__KONTUR_REACT_UI__ = 'PopupMenu';
PopupMenu.defaultProps = {
  positions: PopupMenuPositions,
  type: PopupMenuType.Tooltip,
  popupHasPin: true,
  popupMargin: 0,
  disableAnimations: false
};
PopupMenu.Type = PopupMenuType;