import { DEFAULT_THEME } from "../../../lib/theming/themes/DefaultTheme";
import { FLAT_THEME } from "../../../lib/theming/themes/FlatTheme";
import { IS_PROXY_SUPPORTED } from "../../../lib/Supports";
var callsCount = 0;
var executionTime = 0;
var ALL_USED_VARIABLES_SET = new Set();
export var COMPONENT_DESCRIPTIONS = {};
export var COMPONENT_DESCRIPTIONS_BY_VARIABLE = {};

if (IS_PROXY_SUPPORTED) {
  var baseThemes = [];
  baseThemes.push(DEFAULT_THEME);
  baseThemes.push(FLAT_THEME);

  var componentsContext = require.context('../../../', true, /\.styles.ts$/);

  componentsContext.keys().forEach(function (fileName) {
    var fileNameStart = fileName.lastIndexOf('/') + 1;
    var componentName = fileName.substring(fileNameStart).replace('.styles.ts', '');
    var componentDescription = {};
    var jsStyles = componentsContext(fileName).jsStyles;
    Object.keys(jsStyles).forEach(function (elementName) {
      var jsStyle = jsStyles[elementName];
      var variablesAccumulator = new Set();
      var dependencies = {};
      var elementProxyHandler = getProxyHandler(variablesAccumulator, dependencies);
      var themes = baseThemes.map(function (t) {
        return new Proxy(t, elementProxyHandler);
      });
      themes.forEach(function (t) {
        return jsStyle(t);
      });
      var variables = Array.from(variablesAccumulator);

      if (variables.length > 0) {
        componentDescription[elementName] = {
          variables: variables,
          dependencies: dependencies
        };
        variables.forEach(function (variableName) {
          if (!COMPONENT_DESCRIPTIONS_BY_VARIABLE[variableName]) {
            COMPONENT_DESCRIPTIONS_BY_VARIABLE[variableName] = {};
          }

          var variableNode = COMPONENT_DESCRIPTIONS_BY_VARIABLE[variableName];

          if (!variableNode[componentName]) {
            variableNode[componentName] = {};
          }

          var componentNode = variableNode[componentName];

          if (!componentNode[elementName]) {
            componentNode[elementName] = {
              dependencies: dependencies,
              variables: [variableName]
            };
          } else if (!componentNode[elementName].variables.includes(variableName)) {
            componentNode[elementName].dependencies = dependencies;
            componentNode[elementName].variables.push(variableName);
          }

          var dependenciesList = dependencies[variableName];

          if (dependenciesList) {
            dependenciesList.forEach(function (dependencyName) {
              if (!COMPONENT_DESCRIPTIONS_BY_VARIABLE[dependencyName]) {
                COMPONENT_DESCRIPTIONS_BY_VARIABLE[dependencyName] = {};
              }

              var dependencyNode = COMPONENT_DESCRIPTIONS_BY_VARIABLE[dependencyName];

              if (!dependencyNode[componentName]) {
                dependencyNode[componentName] = COMPONENT_DESCRIPTIONS_BY_VARIABLE[variableName][componentName];
              }
            });
          }
        });
      }
    });
    COMPONENT_DESCRIPTIONS[componentName] = componentDescription;
  });
}

function getProxyHandler(accumulator, dependencies) {
  var accessLevel = 0;
  var rootProp = '';
  return {
    get: function get(target, prop, receiver) {
      var propName = prop;
      ALL_USED_VARIABLES_SET.add(propName);

      if (accessLevel === 0) {
        rootProp = propName;
        accumulator.add(propName);
      } else {
        if (!dependencies[rootProp]) {
          dependencies[rootProp] = [propName];
        } else if (!dependencies[rootProp].includes(propName)) {
          dependencies[rootProp].push(propName);
        }
      }

      accessLevel++;
      var start = performance.now();
      var result = Reflect.get(target, prop, receiver);
      executionTime += performance.now() - start;
      callsCount++;
      accessLevel--;
      return result;
    }
  };
}

export var ALL_USED_VARIABLES = Array.from(ALL_USED_VARIABLES_SET);
export var CALLS_COUNT = callsCount;
export var EXECUTION_TIME = executionTime;