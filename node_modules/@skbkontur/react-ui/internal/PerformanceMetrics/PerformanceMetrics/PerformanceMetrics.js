import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import ReactDOM from 'react-dom';
import { Button } from "../../../components/Button";
import { Spinner } from "../../../components/Spinner";
var PANEL_WRAPPER_STYLES = {
  width: '45%',
  display: 'inline-block',
  verticalAlign: 'top'
};
export function PerformanceMetrics(props) {
  return React.createElement("div", {
    style: {
      padding: 10,
      width: 1200
    }
  }, React.createElement("div", {
    style: {
      position: 'absolute'
    }
  }, React.createElement(Spinner, {
    type: 'mini',
    caption: ''
  })), React.createElement("div", {
    style: {
      padding: 10
    }
  }, React.createElement("div", {
    style: PANEL_WRAPPER_STYLES
  }, React.createElement(PerformanceMetricsPanel, {
    title: 'Case A',
    component: props.componentsA
  })), React.createElement("div", {
    style: PANEL_WRAPPER_STYLES
  }, React.createElement(PerformanceMetricsPanel, {
    title: 'Case B',
    component: props.componentsB
  }))));
}

var PerformanceMetricsPanel =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(PerformanceMetricsPanel, _React$Component);

  function PerformanceMetricsPanel() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      mounted: false
    };
    _this.container = void 0;

    _this.setContainerRef = function (element) {
      _this.container = element;
    };

    _this.toggleMountedState = function () {
      _this.setState({
        mounted: !_this.state.mounted
      });
    };

    return _this;
  }

  var _proto = PerformanceMetricsPanel.prototype;

  _proto.render = function render() {
    return React.createElement("div", null, React.createElement("h1", {
      style: {
        lineHeight: '2em'
      }
    }, this.props.title), React.createElement("div", {
      style: {
        marginBottom: 10
      }
    }, React.createElement(Button, {
      onClick: this.toggleMountedState,
      size: 'small'
    }, this.state.mounted ? 'Unmount' : 'Mount')), React.createElement("div", {
      ref: this.setContainerRef
    }));
  };

  _proto.componentDidMount = function componentDidMount() {
    if (this.state.mounted && this.container) {
      ReactDOM.render(this.props.component, this.container);
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    if (!this.container) {
      return;
    }

    if (this.state.mounted) {
      ReactDOM.render(this.props.component, this.container);
    } else {
      ReactDOM.unmountComponentAtNode(this.container);
    }
  };

  return PerformanceMetricsPanel;
}(React.Component);