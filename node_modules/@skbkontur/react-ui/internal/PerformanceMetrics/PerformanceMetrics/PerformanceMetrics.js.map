{"version":3,"sources":["PerformanceMetrics.tsx"],"names":["React","ReactDOM","Button","Spinner","PANEL_WRAPPER_STYLES","width","display","verticalAlign","PerformanceMetrics","props","padding","position","componentsA","componentsB","PerformanceMetricsPanel","state","mounted","container","setContainerRef","element","toggleMountedState","setState","render","lineHeight","title","marginBottom","componentDidMount","component","componentDidUpdate","unmountComponentAtNode","Component"],"mappings":"sEAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,SAASC,MAAT,QAAuB,yBAAvB;;AAEA,SAASC,OAAT,QAAwB,0BAAxB;;AAEA,IAAMC,oBAAoB,GAAG,EAAEC,KAAK,EAAE,KAAT,EAAgBC,OAAO,EAAE,cAAzB,EAAyCC,aAAa,EAAE,KAAxD,EAA7B;;;;;;;AAOA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAA4D;AACjE;AACE,iCAAK,KAAK,EAAE,EAAEC,OAAO,EAAE,EAAX,EAAeL,KAAK,EAAE,IAAtB,EAAZ;AACE,iCAAK,KAAK,EAAE,EAAEM,QAAQ,EAAE,UAAZ,EAAZ;AACE,wBAAC,OAAD,IAAS,IAAI,EAAE,MAAf,EAAuB,OAAO,EAAE,EAAhC,GADF,CADF;;AAIE,iCAAK,KAAK,EAAE,EAAED,OAAO,EAAE,EAAX,EAAZ;AACE,iCAAK,KAAK,EAAEN,oBAAZ;AACE,wBAAC,uBAAD,IAAyB,KAAK,EAAE,QAAhC,EAA0C,SAAS,EAAEK,KAAK,CAACG,WAA3D,GADF,CADF;;AAIE,iCAAK,KAAK,EAAER,oBAAZ;AACE,wBAAC,uBAAD,IAAyB,KAAK,EAAE,QAAhC,EAA0C,SAAS,EAAEK,KAAK,CAACI,WAA3D,GADF,CAJF,CAJF,CADF;;;;;AAeD,C;;;;;;;;;;AAUKC,uB;AACGC,IAAAA,K,GAAQ;AACbC,MAAAA,OAAO,EAAE,KADI,E;;AAGPC,IAAAA,S;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCAC,IAAAA,e,GAAkB,UAACC,OAAD,EAAoC;AAC5D,YAAKF,SAAL,GAAiBE,OAAjB;AACD,K;;AAEOC,IAAAA,kB,GAAqB,YAAM;AACjC,YAAKC,QAAL,CAAc;AACZL,QAAAA,OAAO,EAAE,CAAC,MAAKD,KAAL,CAAWC,OADT,EAAd;;AAGD,K,qEAvCMM,M,GAAP,kBAAgB,CACd,OACE,iCACE,4BAAI,KAAK,EAAE,EAAEC,UAAU,EAAE,KAAd,EAAX,IAAmC,KAAKd,KAAL,CAAWe,KAA9C,CADF,EAEE,6BAAK,KAAK,EAAE,EAAEC,YAAY,EAAE,EAAhB,EAAZ,IACE,oBAAC,MAAD,IAAQ,OAAO,EAAE,KAAKL,kBAAtB,EAA0C,IAAI,EAAE,OAAhD,IACG,KAAKL,KAAL,CAAWC,OAAX,GAAqB,SAArB,GAAiC,OADpC,CADF,CAFF,EAOE,6BAAK,GAAG,EAAE,KAAKE,eAAf,GAPF,CADF,CAWD,C,QAEMQ,iB,GAAP,6BAA2B,CACzB,IAAI,KAAKX,KAAL,CAAWC,OAAX,IAAsB,KAAKC,SAA/B,EAA0C,CACxChB,QAAQ,CAACqB,MAAT,CAAgB,KAAKb,KAAL,CAAWkB,SAA3B,EAAsC,KAAKV,SAA3C,EACD,CACF,C,QAEMW,kB,GAAP,8BAAkC,CAChC,IAAI,CAAC,KAAKX,SAAV,EAAqB,CACnB,OACD,CACD,IAAI,KAAKF,KAAL,CAAWC,OAAf,EAAwB,CACtBf,QAAQ,CAACqB,MAAT,CAAgB,KAAKb,KAAL,CAAWkB,SAA3B,EAAsC,KAAKV,SAA3C,EACD,CAFD,MAEO,CACLhB,QAAQ,CAAC4B,sBAAT,CAAgC,KAAKZ,SAArC,EACD,CACF,C,kCAnCmCjB,KAAK,CAAC8B,S","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { Button } from '../../components/Button';\r\nimport { Nullable } from '../../typings/utility-types';\r\nimport { Spinner } from '../../components/Spinner';\r\n\r\nconst PANEL_WRAPPER_STYLES = { width: '45%', display: 'inline-block', verticalAlign: 'top' };\r\n\r\ninterface PerformanceMetricsProps {\r\n  componentsA: React.ReactElement<any>;\r\n  componentsB: React.ReactElement<any>;\r\n}\r\n\r\nexport function PerformanceMetrics(props: PerformanceMetricsProps) {\r\n  return (\r\n    <div style={{ padding: 10, width: 1200 }}>\r\n      <div style={{ position: 'absolute' }}>\r\n        <Spinner type={'mini'} caption={''} />\r\n      </div>\r\n      <div style={{ padding: 10 }}>\r\n        <div style={PANEL_WRAPPER_STYLES}>\r\n          <PerformanceMetricsPanel title={'Case A'} component={props.componentsA} />\r\n        </div>\r\n        <div style={PANEL_WRAPPER_STYLES}>\r\n          <PerformanceMetricsPanel title={'Case B'} component={props.componentsB} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface PerformanceMetricsPanelProps {\r\n  title: string;\r\n  component: React.ReactElement<any>;\r\n}\r\ninterface PerformanceMetricsPanelState {\r\n  mounted: boolean;\r\n}\r\n\r\nclass PerformanceMetricsPanel extends React.Component<PerformanceMetricsPanelProps, PerformanceMetricsPanelState> {\r\n  public state = {\r\n    mounted: false,\r\n  };\r\n  private container: Nullable<HTMLElement>;\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <h1 style={{ lineHeight: '2em' }}>{this.props.title}</h1>\r\n        <div style={{ marginBottom: 10 }}>\r\n          <Button onClick={this.toggleMountedState} size={'small'}>\r\n            {this.state.mounted ? 'Unmount' : 'Mount'}\r\n          </Button>\r\n        </div>\r\n        <div ref={this.setContainerRef} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public componentDidMount() {\r\n    if (this.state.mounted && this.container) {\r\n      ReactDOM.render(this.props.component, this.container);\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(): void {\r\n    if (!this.container) {\r\n      return;\r\n    }\r\n    if (this.state.mounted) {\r\n      ReactDOM.render(this.props.component, this.container);\r\n    } else {\r\n      ReactDOM.unmountComponentAtNode(this.container);\r\n    }\r\n  }\r\n\r\n  private setContainerRef = (element: Nullable<HTMLElement>) => {\r\n    this.container = element;\r\n  };\r\n\r\n  private toggleMountedState = () => {\r\n    this.setState({\r\n      mounted: !this.state.mounted,\r\n    });\r\n  };\r\n}\r\n"]}