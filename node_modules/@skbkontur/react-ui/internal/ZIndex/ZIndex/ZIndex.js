import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import { incrementZIndex, removeZIndex, upperBorder } from "../ZIndexStorage";
var ZIndexContext = React.createContext({
  parentLayerZIndex: 0,
  maxZIndex: Infinity
});
ZIndexContext.displayName = 'ZIndexContext';
export var ZIndex =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(ZIndex, _React$Component);

  function ZIndex(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.zIndex = 0;
    _this.zIndex = incrementZIndex(props.priority, props.delta);
    return _this;
  }

  var _proto = ZIndex.prototype;

  _proto.componentWillUnmount = function componentWillUnmount() {
    removeZIndex(this.zIndex);
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props = this.props,
        style = _this$props.style,
        children = _this$props.children,
        delta = _this$props.delta,
        priority = _this$props.priority,
        applyZIndex = _this$props.applyZIndex,
        coverChildren = _this$props.coverChildren,
        createStackingContext = _this$props.createStackingContext,
        wrapperRef = _this$props.wrapperRef,
        props = _objectWithoutPropertiesLoose(_this$props, ["style", "children", "delta", "priority", "applyZIndex", "coverChildren", "createStackingContext", "wrapperRef"]);

    var wrapperStyle = {};
    return React.createElement(ZIndexContext.Consumer, null, function (_ref) {
      var parentLayerZIndex = _ref.parentLayerZIndex,
          maxZIndex = _ref.maxZIndex;
      var zIndexContexValue = {
        parentLayerZIndex: parentLayerZIndex,
        maxZIndex: maxZIndex
      };

      if (applyZIndex) {
        var newZIndex = _this2.calcZIndex(parentLayerZIndex, maxZIndex);

        wrapperStyle.zIndex = newZIndex;
        zIndexContexValue = coverChildren ? {
          parentLayerZIndex: parentLayerZIndex,
          maxZIndex: newZIndex
        } : {
          parentLayerZIndex: newZIndex,
          maxZIndex: Number.isFinite(maxZIndex) ? newZIndex : Infinity
        };

        if (createStackingContext) {
          'isolation' in document.body.style ? wrapperStyle.isolation = 'isolate' : wrapperStyle.transform = 'rotate(0)';
        }
      }

      return React.createElement(ZIndexContext.Provider, {
        value: zIndexContexValue
      }, React.createElement("div", _extends({
        style: _extends({}, style, {}, wrapperStyle),
        ref: wrapperRef
      }, props), children));
    });
  };

  _proto.calcZIndex = function calcZIndex(parentLayerZIndex, maxZIndex) {
    var newZIndex = this.zIndex;

    if (Number.isFinite(maxZIndex)) {
      var allowedValuesIntervalLength = maxZIndex - parentLayerZIndex;
      var scale = upperBorder / allowedValuesIntervalLength;
      newZIndex = Math.ceil(newZIndex / scale);
    }

    newZIndex += parentLayerZIndex;
    return newZIndex;
  };

  return ZIndex;
}(React.Component);
ZIndex.__KONTUR_REACT_UI__ = 'ZIndex';
ZIndex.defaultProps = {
  delta: 10,
  priority: 0,
  style: {},
  applyZIndex: true,
  coverChildren: false,
  createStackingContext: false
};
ZIndex.propTypes = {
  delta: function delta(props) {
    if (props.delta <= 0) {
      return new Error("[ZIndex]: Prop 'delta' must be greater than 0, received " + props.delta);
    }

    if (Math.trunc(props.delta) !== props.delta) {
      return new Error("[ZIndex]: Prop 'delta' must be integer, received " + props.delta);
    }
  }
};