import _extends from "@babel/runtime/helpers/esm/extends";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import { findDOMNode } from 'react-dom';
import * as LayoutEvents from "../../../lib/LayoutEvents";
import { RenderContainer } from "../../RenderContainer";
import { ZIndex } from "../../ZIndex";
import { createPropsGetter } from "../../../lib/createPropsGetter";
export var DropdownContainer =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(DropdownContainer, _React$Component);

  function DropdownContainer() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      position: null,
      minWidth: 0,
      isDocumentElementRoot: true
    };
    _this.getProps = createPropsGetter(DropdownContainer.defaultProps);
    _this.dom = null;
    _this.layoutSub = void 0;

    _this.ref = function (e) {
      _this.dom = e && findDOMNode(e);
    };

    _this.isElement = function (node) {
      return node instanceof Element;
    };

    _this.position = function () {
      var target = _this.props.getParent();

      var dom = _this.dom;

      if (_this.isElement(target) && dom) {
        var targetRect = target.getBoundingClientRect();
        var _document = document,
            body = _document.body,
            docEl = _document.documentElement;

        if (!docEl) {
          throw Error('There is no "documentElement" in "document"');
        }

        var scrollX = window.pageXOffset || docEl.scrollLeft || 0;
        var scrollY = window.pageYOffset || docEl.scrollTop || 0;
        var left = null;
        var right = null;

        if (_this.props.align === 'right') {
          var docWidth = docEl.offsetWidth || 0;
          right = docWidth - (targetRect.right + scrollX) + _this.getProps().offsetX;
        } else {
          left = targetRect.left + scrollX + _this.getProps().offsetX;
        }

        var _this$props$offsetY = _this.props.offsetY,
            offsetY = _this$props$offsetY === void 0 ? 0 : _this$props$offsetY;
        var bottom = null;
        var top = targetRect.bottom + scrollY + offsetY;
        var distanceToBottom = docEl.clientHeight - targetRect.bottom;

        var dropdownHeight = _this.getHeight();

        if (distanceToBottom < dropdownHeight && targetRect.top > dropdownHeight) {
          var clientHeight = _this.state.isDocumentElementRoot ? docEl.clientHeight : body.scrollHeight;
          top = null;
          bottom = clientHeight + offsetY - scrollY - targetRect.top;
        }

        var position = {
          top: top,
          left: left,
          right: right,
          bottom: bottom
        };

        _this.setState({
          minWidth: _this.getMinWidth(),
          position: _this.props.disablePortal ? _this.convertToRelativePosition(position) : position
        });
      }
    };

    _this.getHeight = function () {
      if (!_this.isElement(_this.dom)) {
        return 0;
      }

      var child = _this.dom.children.item(0);

      if (!child) {
        return 0;
      }

      return child.getBoundingClientRect().height;
    };

    _this.getMinWidth = function () {
      var target = _this.props.getParent();

      if (!_this.isElement(target)) {
        return 0;
      }

      return target.getBoundingClientRect().width;
    };

    _this.convertToRelativePosition = function (position) {
      var target = _this.props.getParent();

      var _this$props = _this.props,
          _this$props$offsetX = _this$props.offsetX,
          offsetX = _this$props$offsetX === void 0 ? 0 : _this$props$offsetX,
          _this$props$offsetY2 = _this$props.offsetY,
          offsetY = _this$props$offsetY2 === void 0 ? 0 : _this$props$offsetY2;
      var top = position.top,
          bottom = position.bottom,
          left = position.left,
          right = position.right;

      if (_this.isElement(target)) {
        var targetHeight = target.getBoundingClientRect().height;
        return {
          top: top !== null ? targetHeight + offsetY : null,
          bottom: bottom !== null ? targetHeight + offsetY : null,
          left: left !== null ? offsetX : null,
          right: right !== null ? offsetX : null
        };
      }

      return {
        top: offsetY,
        bottom: null,
        left: offsetX,
        right: null
      };
    };

    return _this;
  }

  var _proto = DropdownContainer.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.position();
    this.layoutSub = LayoutEvents.addListener(this.position);
  };

  _proto.UNSAFE_componentWillMount = function UNSAFE_componentWillMount() {
    var _document2 = document,
        body = _document2.body,
        docEl = _document2.documentElement;
    var htmlPosition = getComputedStyle(docEl).position;
    var bodyPosition = getComputedStyle(body).position;
    var hasLimitedHeightRoot = body.scrollHeight > body.clientHeight;
    var hasStaticRoot = htmlPosition === 'static' && bodyPosition === 'static';
    this.setState({
      isDocumentElementRoot: hasLimitedHeightRoot || hasStaticRoot
    });
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.layoutSub) {
      this.layoutSub.remove();
    }
  };

  _proto.render = function render() {
    var style = {
      position: 'absolute',
      top: '0'
    };

    if (this.state.position) {
      var _this$state$position = this.state.position,
          top = _this$state$position.top,
          bottom = _this$state$position.bottom,
          left = _this$state$position.left,
          right = _this$state$position.right;
      style = _extends({}, style, {
        top: top !== null ? top : undefined,
        bottom: bottom !== null ? bottom : undefined,
        left: left !== null ? left : undefined,
        right: right !== null ? right : undefined,
        minWidth: this.state.minWidth
      });
    }

    var content = React.createElement(ZIndex, {
      priority: 'DropdownContainer',
      ref: this.ref,
      style: style
    }, this.props.children);
    return this.props.disablePortal ? content : React.createElement(RenderContainer, null, content);
  };

  return DropdownContainer;
}(React.Component);
DropdownContainer.__KONTUR_REACT_UI__ = 'DropdownContainer';
DropdownContainer.defaultProps = {
  align: 'left',
  disablePortal: false,
  offsetX: 0,
  offsetY: -1
};