import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import { jsStyles } from "../ResizeDetector.styles";
export var ResizeDetector =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(ResizeDetector, _React$Component);

  function ResizeDetector() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.iframeWindow = null;

    _this.handleResize = function (event) {
      if (_this.props.onResize) {
        _this.props.onResize(event);
      }
    };

    _this.iframeRef = function (iframe) {
      if (iframe && iframe.contentWindow) {
        _this.iframeWindow = iframe.contentWindow;
      }
    };

    return _this;
  }

  var _proto = ResizeDetector.prototype;

  _proto.componentDidMount = function componentDidMount() {
    if (this.iframeWindow) {
      this.iframeWindow.addEventListener('resize', this.handleResize);
    }
  };

  _proto.render = function render() {
    return React.createElement("div", {
      className: jsStyles.root()
    }, React.createElement("iframe", {
      title: "resizeDetector",
      ref: this.iframeRef,
      className: jsStyles.iframe()
    }), React.createElement("div", {
      className: jsStyles.content()
    }, this.props.children));
  };

  return ResizeDetector;
}(React.Component);
ResizeDetector.__KONTUR_REACT_UI__ = 'ResizeDetector';