import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import { findDOMNode } from 'react-dom';
import { listen as listenFocusOutside, containsTargetOrRenderContainer } from "../../../lib/listenFocusOutside";
export var RenderLayer =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(RenderLayer, _React$Component);

  function RenderLayer() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.focusOutsideListenerToken = null;

    _this.handleFocusOutside = function (event) {
      if (_this.props.onFocusOutside) {
        _this.props.onFocusOutside(event);
      }
    };

    _this.handleNativeDocClick = function (event) {
      var target = event.target || event.srcElement;

      var node = _this.getDomNode();

      if (target instanceof Element && containsTargetOrRenderContainer(target)(node)) {
        return;
      }

      if (_this.props.onClickOutside) {
        _this.props.onClickOutside(event);
      }
    };

    return _this;
  }

  var _proto = RenderLayer.prototype;

  _proto.componentDidMount = function componentDidMount() {
    if (this.props.active) {
      this.attachListeners();
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (!prevProps.active && this.props.active) {
      this.attachListeners();
    }

    if (prevProps.active && !this.props.active) {
      this.detachListeners();
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.props.active) {
      this.detachListeners();
    }
  };

  _proto.render = function render() {
    return React.Children.only(this.props.children);
  };

  _proto.attachListeners = function attachListeners() {
    var _this2 = this;

    this.focusOutsideListenerToken = listenFocusOutside(function () {
      return [_this2.getDomNode()];
    }, this.handleFocusOutside);
    window.addEventListener('blur', this.handleFocusOutside);
    document.addEventListener('ontouchstart' in document.documentElement ? 'touchstart' : 'mousedown', this.handleNativeDocClick);
  };

  _proto.detachListeners = function detachListeners() {
    if (this.focusOutsideListenerToken) {
      this.focusOutsideListenerToken.remove();
      this.focusOutsideListenerToken = null;
    }

    window.removeEventListener('blur', this.handleFocusOutside);
    document.removeEventListener('ontouchstart' in document.documentElement ? 'touchstart' : 'mousedown', this.handleNativeDocClick);
  };

  _proto.getDomNode = function getDomNode() {
    return findDOMNode(this);
  };

  return RenderLayer;
}(React.Component);
RenderLayer.__KONTUR_REACT_UI__ = 'RenderLayer';
RenderLayer.propTypes = {
  active: function active(props, propName, componentName) {
    var active = props.active,
        onClickOutside = props.onClickOutside,
        onFocusOutside = props.onFocusOutside;

    if (active && !(onClickOutside || onFocusOutside)) {
      return new Error("[" + componentName + "]: using the component without either 'onClickOutside' or 'onFocusOutside' callback is pointless.");
    }
  }
};
RenderLayer.defaultProps = {
  active: true
};