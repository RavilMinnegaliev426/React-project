import React, { ReactNode } from 'react';
import { Theme } from '../../lib/theming/Theme';
import { Writeable } from '../../typings/utility-types';
import { ThemeType } from './constants';
interface PlaygroundState {
    editorOpened: boolean;
    editingThemeItem?: EditingThemeItem;
    themes: Themes;
    themesErrors: ThemesErrors;
    currentTheme: Theme;
    currentThemeType: ThemeType;
}
interface Themes {
    default: Theme;
    dark: Theme;
    flat: Theme;
}
interface ThemesErrors {
    default: ThemeErrorsType;
    dark: ThemeErrorsType;
    flat: ThemeErrorsType;
}
interface EditingThemeItem {
    value: ThemeType;
    label: string;
}
interface PlaygroundProps {
    children?: ReactNode;
}
export declare type ThemeErrorsType = Writeable<{
    [key in keyof Theme]?: boolean;
}>;
export declare class ThemeContextPlayground extends React.Component<PlaygroundProps, PlaygroundState> {
    private readonly editableThemesItems;
    constructor(props: PlaygroundProps);
    render(): JSX.Element;
    private renderSidePage;
    private handelGetTheme;
    private handleOpen;
    private handleClose;
    private handleThemeChange;
    private handleThemeVariableChange;
    private getEditableThemesItems;
    private handleEditingThemeSwitch;
    private changeThemeVariable;
}
export {};
