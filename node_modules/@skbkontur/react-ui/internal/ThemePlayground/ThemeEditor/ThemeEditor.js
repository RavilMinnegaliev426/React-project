import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import { ThemeFactory } from "../../../lib/theming/ThemeFactory";
import { Gapped } from "../../../components/Gapped";
import { Loader } from "../../../components/Loader";
import { VariableValue } from "../VariableValue";
import { VARIABLES_GROUPS } from "../constants";
import { jsStyles } from "../Playground.styles";
export var ThemeEditor =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(ThemeEditor, _React$Component);

  function ThemeEditor() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      groups: [],
      isLoading: true
    };
    _this.updateTimeout = void 0;

    _this.renderGroups = function () {
      var _this$props = _this.props,
          editingTheme = _this$props.editingTheme,
          currentTheme = _this$props.currentTheme,
          currentErrors = _this$props.currentErrors,
          onValueChange = _this$props.onValueChange;
      var keys = ThemeFactory.getKeys(editingTheme);
      return React.createElement(Gapped, {
        wrap: true,
        verticalAlign: "middle"
      }, _this.state.groups.map(function (i) {
        return React.createElement(Group, {
          editingTheme: editingTheme,
          currentTheme: currentTheme,
          currentErrors: currentErrors,
          onValueChange: onValueChange,
          title: i.title,
          variables: keys.filter(i.isCommon ? isCommonVariable.bind(null, _this.state.groups.reduce(prefixesReducer, [])) : isGroupVariable.bind(null, i.prefix)),
          key: i.title
        });
      }));
    };

    return _this;
  }

  var _proto = ThemeEditor.prototype;

  _proto.render = function render() {
    return this.state.isLoading ? React.createElement("div", {
      className: jsStyles.loaderWrapper()
    }, React.createElement(Loader, {
      type: "big",
      active: true,
      className: jsStyles.loader()
    })) : this.renderGroups();
  };

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    this.updateTimeout = window.setTimeout(function () {
      _this2.setState({
        groups: VARIABLES_GROUPS,
        isLoading: false
      });
    }, 500);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    clearTimeout(this.updateTimeout);
  };

  return ThemeEditor;
}(React.Component);

var Group = function Group(props) {
  var editingTheme = props.editingTheme,
      currentTheme = props.currentTheme,
      currentErrors = props.currentErrors,
      onValueChange = props.onValueChange,
      title = props.title,
      variables = props.variables;
  return variables.length > 0 ? React.createElement(React.Fragment, null, React.createElement("h2", {
    className: jsStyles.editorGroupHeader(currentTheme)
  }, title), React.createElement(Gapped, {
    gap: 16,
    wrap: true,
    verticalAlign: "middle"
  }, variables.map(function (variable) {
    var value = editingTheme[variable];
    var isError = currentErrors[variable];
    return React.createElement(VariableValue, {
      theme: currentTheme,
      onChange: onValueChange,
      value: value,
      isError: isError || false,
      variable: variable,
      key: variable,
      baseVariables: getBaseVariables(editingTheme, variable)
    });
  }))) : null;
};

var isGroupVariable = function isGroupVariable(prefix, name) {
  var splitPrefix = prefix.split(' ') || [];

  for (var _iterator = splitPrefix, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    var item = _ref;

    if (name.startsWith(item.trim())) {
      return true;
    }
  }

  return false;
};

var isCommonVariable = function isCommonVariable(prefixes, name) {
  for (var _iterator2 = prefixes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
    var _ref2;

    if (_isArray2) {
      if (_i2 >= _iterator2.length) break;
      _ref2 = _iterator2[_i2++];
    } else {
      _i2 = _iterator2.next();
      if (_i2.done) break;
      _ref2 = _i2.value;
    }

    var item = _ref2;

    if (name.startsWith(item.trim())) {
      return false;
    }
  }

  return true;
};

var prefixesReducer = function prefixesReducer(acc, current) {
  var splitPrefix = current.prefix.split(' ');
  return [].concat(acc, splitPrefix);
};

var getBaseVariables = function getBaseVariables(theme, variable) {
  for (; theme != null; theme = Object.getPrototypeOf(theme)) {
    if (Object.prototype.hasOwnProperty.call(theme, variable)) {
      var descriptor = Object.getOwnPropertyDescriptor(theme, variable);

      if (descriptor && typeof descriptor.get !== 'undefined') {
        var getterBody = descriptor.get.toString();
        var variableNameMatchArray = getterBody.match(/this\.(\w+)\b/gm) || [];
        return (variableNameMatchArray || []).map(function (v) {
          return v.replace(/this\./g, '');
        });
      }

      break;
    }
  }

  return [];
};