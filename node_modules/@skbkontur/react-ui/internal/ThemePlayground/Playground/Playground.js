import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import cn from 'classnames';
import SearchIcon from '@skbkontur/react-icons/Search';
import CardIcon from '@skbkontur/react-icons/Card';
import LinkIcon from '@skbkontur/react-icons/Link';
import OkIcon from '@skbkontur/react-icons/Ok';
import ErrorIcon from '@skbkontur/react-icons/Error';
import TrashIcon from '@skbkontur/react-icons/Trash';
import HelpDotIcon from '@skbkontur/react-icons/HelpDot';
import { Button } from "../../../components/Button";
import { Tabs } from "../../../components/Tabs";
import { Gapped } from "../../../components/Gapped";
import { Link } from "../../../components/Link";
import { Input } from "../../../components/Input";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { Tooltip } from "../../../components/Tooltip";
import { Sticky } from "../../../components/Sticky";
import { ThemeType } from "../constants";
import { TokenInputPlayground } from "../TokenInputPlayground";
import { DatePickerPlayground } from "../AnotherInputsPlayground";
import { TogglePlayground } from "../TogglePlayground";
import { SwitcherPlayground } from "../SwitcherPlayground";
import { FxInputPlayground } from "../FxInputPlayground";
import { CurrencyInputPlayground } from "../CurrencyInputPlayground";
import { SelectPlayground } from "../SelectPlayground";
import { getComponentsFromPropsList } from "../helpers";
import { CheckboxPlayground } from "../CheckboxPlayground";
import { RadioPlayground } from "../RadioPlayground";
import { PagingPlayground } from "../PagingPlayground";
import { HintPlayground } from "../HintPlayground";
import { ComponentsGroup } from "../ComponentsGroup";
import { jsStyles } from "../Playground.styles";
var useSticky = process.env.enableReactTesting !== 'true';
export var Playground =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Playground, _React$Component);

  function Playground() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.theme = void 0;
    _this.stopEl = React.createRef();

    _this.renderTabsGroup = function () {
      return useSticky ? React.createElement(Sticky, {
        side: 'top',
        getStop: _this.getStickyStop
      }, _this.renderTabs()) : _this.renderTabs();
    };

    _this.renderSizesGroup = function () {
      var Group = function Group(_ref) {
        var size = _ref.size;
        return React.createElement(Gapped, {
          wrap: true,
          verticalAlign: "middle",
          gap: 10
        }, React.createElement(SelectPlayground, {
          width: 120,
          size: size
        }), React.createElement(Input, {
          rightIcon: React.createElement(CardIcon, null),
          placeholder: 'Text value',
          size: size
        }), React.createElement(Button, {
          width: 120,
          size: size
        }, "Button"), React.createElement(Button, {
          icon: React.createElement(LinkIcon, null),
          use: 'link',
          size: size
        }, "Button like a link"));
      };

      return React.createElement(ComponentsGroup, {
        title: 'Размеры',
        theme: _this.theme
      }, React.createElement(Group, {
        size: 'small'
      }), React.createElement(Group, {
        size: 'medium'
      }), React.createElement(Group, {
        size: 'large'
      }));
    };

    _this.renderLinksGroup = function () {
      var propsList = [{
        icon: React.createElement(LinkIcon, null),
        children: 'Enabled'
      }, {
        icon: React.createElement(OkIcon, null),
        use: 'success',
        children: 'Success'
      }, {
        icon: React.createElement(ErrorIcon, null),
        use: 'danger',
        children: 'Danger'
      }, {
        icon: React.createElement(TrashIcon, null),
        use: 'grayed',
        children: 'Grayed'
      }, {
        icon: React.createElement(TrashIcon, null),
        children: 'Disabled',
        disabled: true
      }];
      return React.createElement(ComponentsGroup, {
        title: 'Ссылки',
        theme: _this.theme
      }, React.createElement(Gapped, {
        wrap: true,
        verticalAlign: "middle",
        gap: 10
      }, getComponentsFromPropsList(React.createElement(Link, null), propsList)));
    };

    _this.renderButtonsGroup = function () {
      var propsList = [{
        children: 'Default'
      }, {
        children: 'Primary',
        use: 'primary'
      }, {
        children: 'Danger',
        use: 'danger'
      }, {
        children: 'Pay',
        use: 'pay'
      }, {
        children: 'Disabled',
        disabled: true
      }, {
        children: 'Back',
        arrow: 'left',
        size: 'medium',
        width: 110
      }, {
        children: 'Forward',
        arrow: true,
        size: 'medium',
        use: 'primary',
        width: 110
      }, {
        children: 'Loading',
        size: 'medium',
        loading: true
      }];
      return React.createElement(ComponentsGroup, {
        title: 'Кнопки',
        theme: _this.theme
      }, getComponentsFromPropsList(React.createElement(Button, {
        width: 120,
        size: 'small'
      }), propsList));
    };

    _this.renderInputsGroup = function () {
      var propsList = [{
        placeholder: 'Enabled'
      }, {
        placeholder: 'Error',
        error: true
      }, {
        placeholder: 'Warning',
        warning: true
      }, {
        placeholder: 'Disabled',
        disabled: true
      }];
      var fromProps = getComponentsFromPropsList(React.createElement(Input, {
        width: 120
      }), propsList);
      return React.createElement(ComponentsGroup, {
        title: 'Поле ввода',
        theme: _this.theme
      }, React.createElement(Input, {
        width: 380,
        prefix: "https://kontur.ru/search?query=",
        rightIcon: React.createElement(SearchIcon, null)
      }), React.createElement("div", null, React.createElement(Gapped, {
        gap: 10
      }, fromProps)));
    };

    _this.renderTokenInputsGroup = function () {
      return React.createElement(ComponentsGroup, {
        title: 'Поле с токеном',
        theme: _this.theme
      }, React.createElement(TokenInputPlayground, null));
    };

    _this.renderOtherInputsGroup = function () {
      return React.createElement(ComponentsGroup, {
        title: 'Прочие поля',
        theme: _this.theme
      }, React.createElement(CurrencyInputPlayground, null), React.createElement(FxInputPlayground, null), React.createElement(DatePickerPlayground, null));
    };

    _this.renderSwitchersGroup = function () {
      return React.createElement(ComponentsGroup, {
        title: 'Переключатели',
        theme: _this.theme
      }, React.createElement(SwitcherPlayground, null));
    };

    _this.renderControlsGroup = function () {
      return React.createElement(ComponentsGroup, {
        title: 'Радио, чекбоксы',
        theme: _this.theme
      }, React.createElement(Gapped, {
        verticalAlign: 'top',
        gap: 60
      }, React.createElement(CheckboxPlayground, null), React.createElement(RadioPlayground, null), React.createElement(TogglePlayground, null)));
    };

    _this.renderHintsGroup = function () {
      return React.createElement(ComponentsGroup, {
        title: 'Тултип',
        theme: _this.theme
      }, React.createElement(HintPlayground, null));
    };

    _this.renderTooltip = function () {
      var tooltipContent = function tooltipContent() {
        return React.createElement("div", {
          className: jsStyles.tooltipContent()
        }, 'Информация об ошибке. Короткий объясняющий текст и ссылка, если нужно');
      };

      return React.createElement(ComponentsGroup, {
        title: 'Тултип',
        theme: _this.theme
      }, React.createElement(Tooltip, {
        render: tooltipContent,
        pos: "right middle",
        trigger: 'opened',
        disableAnimations: true
      }, React.createElement(Link, {
        icon: React.createElement(HelpDotIcon, null)
      })));
    };

    _this.renderPaging = function () {
      return React.createElement(ComponentsGroup, {
        title: 'Пейджинг',
        theme: _this.theme
      }, React.createElement(PagingPlayground, null));
    };

    _this.renderStickyStopElement = function () {
      return React.createElement("div", {
        ref: _this.stopEl,
        style: {
          height: 50
        }
      });
    };

    _this.getStickyStop = function () {
      return _this.stopEl.current;
    };

    return _this;
  }

  var _proto = Playground.prototype;

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return _this2.renderMain();
    });
  };

  _proto.renderMain = function renderMain() {
    var wrapperClassName = cn(jsStyles.playground(), jsStyles.playgroundWrapper(this.theme));
    return React.createElement("div", {
      className: wrapperClassName
    }, React.createElement(Gapped, {
      vertical: true,
      gap: 50
    }, this.renderTabsGroup(), this.renderSizesGroup(), this.renderLinksGroup(), this.renderButtonsGroup(), this.renderInputsGroup(), this.renderOtherInputsGroup(), this.renderTokenInputsGroup(), this.renderSwitchersGroup(), this.renderControlsGroup()), this.renderStickyStopElement(), React.createElement(Gapped, {
      vertical: true,
      gap: 50
    }, this.renderHintsGroup(), this.renderTooltip(), this.renderPaging()));
  };

  _proto.renderTabs = function renderTabs() {
    var _cn;

    var _this$props = this.props,
        currentThemeType = _this$props.currentThemeType,
        onThemeChange = _this$props.onThemeChange,
        onEditLinkClick = _this$props.onEditLinkClick;
    var tabsOuterWrapperStyle = {
      background: this.theme.bgDefault
    };
    var tabsOuterWrapperClass = cn((_cn = {}, _cn[jsStyles.tabsWrapper()] = true, _cn[jsStyles.stickyTabsWrapper(this.theme)] = useSticky, _cn));
    return React.createElement("div", {
      style: tabsOuterWrapperStyle,
      className: tabsOuterWrapperClass
    }, React.createElement(Gapped, {
      gap: 40
    }, React.createElement(Tabs, {
      value: currentThemeType,
      onValueChange: onThemeChange,
      vertical: false
    }, React.createElement("div", {
      className: jsStyles.tabsInnerWrapper(this.theme)
    }, React.createElement(Tabs.Tab, {
      id: ThemeType.Default
    }, "\u0414\u0435\u0444\u043E\u043B\u0442\u043D\u0430\u044F"), React.createElement(Tabs.Tab, {
      id: ThemeType.Flat
    }, "\u041F\u043B\u043E\u0441\u043A\u0430\u044F"), React.createElement(Tabs.Tab, {
      id: ThemeType.Dark
    }, "\u0422\u0435\u043C\u043D\u0430\u044F"))), React.createElement(Link, {
      onClick: onEditLinkClick
    }, "\u041D\u0430\u0441\u0442\u0440\u043E\u0438\u0442\u044C \u0442\u0435\u043C\u0443")));
  };

  return Playground;
}(React.Component);