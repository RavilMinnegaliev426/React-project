import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import EditIcon from '@skbkontur/react-icons/Edit';
import DeleteIcon from '@skbkontur/react-icons/Delete';
import EventEmitter from 'eventemitter3';
import { Input } from "../../../components/Input";
import { Gapped } from "../../../components/Gapped";
import { Link } from "../../../components/Link";
import { Hint } from "../../../components/Hint";
import { isFunction } from "../../../lib/utils";
import { jsStyles } from "../Playground.styles";
var emitter = new EventEmitter();
export var VariableValue =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(VariableValue, _React$Component);

  function VariableValue() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      value: _this.props.value,
      editing: false
    };
    _this.subscription = null;
    _this.inputInstance = null;
    _this.debounceTimeout = 500;
    _this.debounceInterval = undefined;

    _this.renderBaseVariableLink = function () {
      var baseVariables = _this.props.baseVariables;
      return React.createElement("div", {
        className: jsStyles.baseVariableRoot()
      }, _this.colorIcon(), React.createElement("div", {
        className: jsStyles.baseLinkWrapper()
      }, React.createElement(Gapped, null, React.createElement("div", {
        style: {
          textAlign: 'right'
        }
      }, React.createElement(Gapped, {
        vertical: true
      }, baseVariables.map(function (v) {
        return React.createElement(BaseVariableLink, {
          key: v,
          baseVariable: v,
          emitClickEvent: _this.emitClickEvent
        });
      }))), React.createElement(Hint, {
        text: 'Изменить значение'
      }, React.createElement(Link, {
        icon: React.createElement(EditIcon, null),
        onClick: _this.handleEditLinkClick
      })))));
    };

    _this.renderInputWrapper = function () {
      return _this.state.editing ? React.createElement(Gapped, null, _this.renderInput(), _this.renderRollbackIcon()) : _this.renderInput();
    };

    _this.inputRef = function (instance) {
      _this.inputInstance = instance;
    };

    _this.colorIcon = function () {
      return React.createElement("div", {
        className: jsStyles.colorIcon(),
        style: {
          background: _this.state.value
        }
      });
    };

    _this.handleEditLinkClick = function () {
      _this.setState({
        editing: true
      });
    };

    _this.rollbackToBaseVariable = function () {
      _this.setState({
        editing: false,
        value: _this.props.value
      });
    };

    _this.emitClickEvent = function (variable) {
      emitter.emit('clicked', variable);
    };

    _this.handleChange = function (value) {
      _this.setState({
        value: value
      });

      if (_this.debounceInterval === undefined) {
        _this.debounceInterval = window.setInterval(_this.debounceHandler, _this.debounceTimeout);
      }
    };

    _this.debounceHandler = function () {
      var _this$props = _this.props,
          variable = _this$props.variable,
          onChange = _this$props.onChange;
      onChange(variable, _this.state.value);
      clearInterval(_this.debounceInterval);
      _this.debounceInterval = undefined;
    };

    _this.handleBlur = function () {
      _this.setState({
        editing: false
      });
    };

    _this.emitterEventHandler = function (name) {
      if (name === _this.props.variable && _this.inputInstance) {
        _this.inputInstance.focus();
      }
    };

    return _this;
  }

  var _proto = VariableValue.prototype;

  _proto.render = function render() {
    var _this$props2 = this.props,
        variable = _this$props2.variable,
        theme = _this$props2.theme,
        baseVariables = _this$props2.baseVariables;
    return React.createElement(Gapped, {
      gap: 30
    }, React.createElement("div", {
      className: jsStyles.variableName(theme),
      title: variable
    }, variable + ": "), baseVariables.length > 0 && !this.state.editing ? this.renderBaseVariableLink() : this.renderInputWrapper());
  };

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    if (!this.subscription) {
      this.subscription = {
        remove: function remove() {
          emitter.removeListener('clicked', _this2.emitterEventHandler);
        }
      };
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (prevProps.value !== this.props.value) {
      this.setState({
        value: this.props.value
      });
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.subscription) {
      this.subscription.remove();
    }

    if (this.debounceInterval !== undefined) {
      clearInterval(this.debounceInterval);
    }
  };

  _proto.renderInput = function renderInput() {
    return React.createElement(Input, {
      leftIcon: isColor(this.state.value) && this.colorIcon(),
      value: this.state.value,
      onValueChange: this.handleChange,
      onBlur: this.handleBlur,
      align: 'right',
      width: this.state.editing ? 225 : undefined,
      ref: this.inputRef,
      error: this.props.isError
    });
  };

  _proto.renderRollbackIcon = function renderRollbackIcon() {
    return React.createElement(Hint, {
      text: 'Вернуться к базовой переменной',
      pos: 'left'
    }, React.createElement("div", {
      className: jsStyles.linkRoot()
    }, React.createElement(Link, {
      icon: React.createElement(DeleteIcon, null),
      onClick: this.rollbackToBaseVariable
    })));
  };

  return VariableValue;
}(React.Component);

var BaseVariableLink =
/*#__PURE__*/
function (_React$Component2) {
  _inheritsLoose(BaseVariableLink, _React$Component2);

  function BaseVariableLink() {
    var _this3;

    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    _this3 = _React$Component2.call.apply(_React$Component2, [this].concat(args)) || this;

    _this3.emitClickEvent = function () {
      _this3.props.emitClickEvent(_this3.props.baseVariable);
    };

    return _this3;
  }

  var _proto2 = BaseVariableLink.prototype;

  _proto2.render = function render() {
    return React.createElement(Link, {
      onClick: this.emitClickEvent
    }, this.props.baseVariable);
  };

  return BaseVariableLink;
}(React.Component);

function isColor(color) {
  if (isFunction(color)) {
    color = color();
  }

  var style = new Option().style;
  style.color = color;
  return !!color && (color.startsWith('#') || color.startsWith('rgb') || color.startsWith('hsl') || style.color === color);
}