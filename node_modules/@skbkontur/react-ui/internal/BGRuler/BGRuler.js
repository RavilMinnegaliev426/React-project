import _extends from "@babel/runtime/helpers/esm/extends";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
/**
                                                                                                                                                            * Компонент рисует пиксельную линейку на заднем фоне.
                                                                                                                                                            * Помогает контролировать размеры элементов при скриншотном тестировании.
                                                                                                                                                            *
                                                                                                                                                            * @see FxInput/__stories__/FxInput.stories.tsx
                                                                                                                                                            */

export var BGRuler =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(BGRuler, _React$Component);

  function BGRuler() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.iframe = null;

    _this.componentDidMount = function () {
      if (_this.iframe && _this.iframe.contentWindow) {
        _this.iframe.contentWindow.addEventListener('resize', _this.update, true);
      }

      _this.update();
    };

    _this.componentWillUnmount = function () {
      if (_this.iframe && _this.iframe.contentWindow) {
        _this.iframe.contentWindow.removeEventListener('resize', _this.update, true);
      }
    };

    _this.update = function () {
      _this.forceUpdate();
    };

    _this.iframeRef = function (ref) {
      _this.iframe = ref;
    };

    return _this;
  }

  var _proto = BGRuler.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        width = _this$props.width,
        height = _this$props.height,
        color = _this$props.color,
        top = _this$props.top,
        bottom = _this$props.bottom,
        left = _this$props.left,
        right = _this$props.right;
    var wrapper = {
      position: 'absolute',
      width: width,
      height: height,
      top: top,
      bottom: bottom,
      left: left,
      right: right,
      overflow: 'hidden'
    };
    var iframe = {
      position: 'absolute',
      width: '100%',
      height: '100%',
      border: 0,
      visibility: 'hidden'
    };
    var marks = {
      position: 'absolute',
      top: 0,
      left: 0,
      width: '100%',
      backgroundSize: '100px 20px',
      backgroundRepeat: 'repeat-x'
    };

    var highMarks = _extends({}, marks, {
      height: '100%',
      backgroundImage: "linear-gradient(90deg, " + color + " 0, " + color + " 1px, transparent 1px)"
    });

    var middleMarks = _extends({}, marks, {
      height: '75%',
      backgroundImage: "linear-gradient(90deg, transparent 0, transparent 49px, " + color + " 49px, " + color + " 50px, transparent 50px)"
    });

    var shortMarks = _extends({}, marks, {
      height: '40%',
      backgroundImage: "\n        linear-gradient(90deg, transparent 0, transparent 9px, " + color + " 9px, " + color + " 10px, transparent 10px),\n        linear-gradient(90deg, transparent 0, transparent 19px, " + color + " 19px, " + color + " 20px, transparent 20px),\n        linear-gradient(90deg, transparent 0, transparent 29px, " + color + " 29px, " + color + " 30px, transparent 30px),\n        linear-gradient(90deg, transparent 0, transparent 39px, " + color + " 39px, " + color + " 40px, transparent 40px),\n        linear-gradient(90deg, transparent 0, transparent 59px, " + color + " 59px, " + color + " 60px, transparent 60px),\n        linear-gradient(90deg, transparent 0, transparent 69px, " + color + " 69px, " + color + " 70px, transparent 70px),\n        linear-gradient(90deg, transparent 0, transparent 79px, " + color + " 79px, " + color + " 80px, transparent 80px),\n        linear-gradient(90deg, transparent 0, transparent 89px, " + color + " 89px, " + color + " 90px, transparent 90px)\n      "
    });

    var rulerWidth = this.iframe ? this.iframe.getBoundingClientRect().width : 0;
    var labels = Array(Math.ceil(rulerWidth / 100) + 1).fill(null).map(function (value, index) {
      var label = {
        position: 'absolute',
        fontFamily: 'Arial',
        fontSize: 10,
        lineHeight: 1,
        color: color,
        bottom: -1,
        left: index * 100 + 5
      };
      return React.createElement("span", {
        key: index,
        style: label
      }, index * 100);
    });
    return React.createElement("div", {
      style: wrapper
    }, React.createElement("div", {
      style: highMarks
    }), React.createElement("div", {
      style: middleMarks
    }), React.createElement("div", {
      style: shortMarks
    }), labels, React.createElement("iframe", {
      title: "BGRuler",
      style: iframe,
      ref: this.iframeRef
    }));
  };

  return BGRuler;
}(React.Component);
BGRuler.defaultProps = {
  height: 20,
  top: 0,
  left: 0,
  right: 0,
  color: '#333'
};