import _extends from "@babel/runtime/helpers/esm/extends";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";

var _dec, _class, _class2, _temp;

import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import { isKeyEscape } from "../../../lib/events/keyboard/identifiers";
import { DatePickerLocaleHelper } from "../../../components/DatePicker/locale";
import { locale } from "../../../lib/locale/decorators";
import { RenderLayer } from "../../RenderLayer";
import { DropdownContainer } from "../../DropdownContainer";
import * as LayoutEvents from "../../../lib/LayoutEvents";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { ArrowTriangleDownIcon, ArrowTriangleUpDownIcon, ArrowTriangleUpIcon } from "../../icons/16px";
import { jsStyles } from "../DateSelect.styles";
var itemHeight = 24;
var visibleYearsCount = 11;
var itemsToMoveCount = -5;
var monthsCount = 12;
var defaultMinYear = 1900;
var defaultMaxYear = 2100;
export var DateSelect = (_dec = locale('DatePicker', DatePickerLocaleHelper), _dec(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(DateSelect, _React$Component);

  function DateSelect() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      botCapped: false,
      current: 0,
      height: 0,
      opened: false,
      pos: 0,
      top: 0,
      topCapped: false,
      nodeTop: Infinity
    };
    _this.theme = void 0;
    _this.locale = void 0;
    _this.root = null;
    _this.itemsContainer = null;
    _this.listener = void 0;
    _this.timeout = void 0;
    _this.longClickTimer = 0;
    _this.setPositionRepeatTimer = 0;
    _this.yearStep = 3;

    _this.open = function () {
      if (_this.props.disabled) {
        return;
      }

      if (_this.state.opened) {
        return;
      }

      _this.setPosition(0);

      _this.setState({
        opened: true,
        current: 0
      });
    };

    _this.close = function () {
      if (!_this.state.opened) {
        return;
      }

      _this.setState({
        opened: false
      });
    };

    _this.refRoot = function (element) {
      _this.root = element;
    };

    _this.setNodeTop = function () {
      var root = _this.root;

      if (!root) {
        return;
      }

      if (_this.timeout) {
        clearTimeout(_this.timeout);
      }

      _this.timeout = setTimeout(function () {
        return _this.setState({
          nodeTop: root.getBoundingClientRect().top
        });
      });
    };

    _this.refItemsContainer = function (element) {
      if (!_this.itemsContainer && element) {
        element.addEventListener('wheel', _this.handleWheel, {
          passive: false
        });
      }

      if (_this.itemsContainer && !element) {
        _this.itemsContainer.removeEventListener('wheel', _this.handleWheel);
      }

      _this.itemsContainer = element;
    };

    _this.handleLongClickUp = function (event) {
      event.preventDefault();
      _this.longClickTimer = window.setTimeout(function () {
        _this.setPositionRepeatTimer = window.setInterval(function () {
          return _this.setPosition(_this.state.pos - itemHeight);
        }, 100);
      }, 200);
    };

    _this.handleLongClickDown = function (event) {
      event.preventDefault();
      _this.longClickTimer = window.setTimeout(function () {
        _this.setPositionRepeatTimer = window.setInterval(function () {
          return _this.setPosition(_this.state.pos + itemHeight);
        }, 100);
      }, 200);
    };

    _this.handleLongClickStop = function () {
      clearTimeout(_this.longClickTimer);
      clearTimeout(_this.setPositionRepeatTimer);
    };

    _this.getAnchor = function () {
      return _this.root;
    };

    _this.handleWheel = function (event) {
      if (!(event instanceof WheelEvent)) {
        return;
      }

      event.preventDefault();
      event.stopPropagation();
      var deltaY = event.deltaY;

      if (event.deltaMode === 1) {
        deltaY *= itemHeight;
      } else if (event.deltaMode === 2) {
        deltaY *= itemHeight * 4;
      }

      var pos = _this.state.pos + deltaY;

      _this.setPosition(pos);
    };

    _this.handleItemClick = function (shift) {
      return function (e) {
        var value = _this.props.value + shift;

        if (_this.props.onValueChange) {
          _this.props.onValueChange(value);
        }

        _this.setState({
          opened: false
        });
      };
    };

    _this.handleKey = function (e) {
      if (_this.state.opened && isKeyEscape(e)) {
        e.preventDefault();

        _this.close();

        e.stopPropagation();
      }
    };

    _this.handleUp = function (event) {
      event.preventDefault();

      _this.setPosition(_this.state.pos - itemHeight * _this.yearStep);
    };

    _this.handleDown = function (event) {
      event.preventDefault();

      _this.setPosition(_this.state.pos + itemHeight * _this.yearStep);
    };

    return _this;
  }

  var _proto = DateSelect.prototype;

  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps() {
    this.setNodeTop();
  };

  _proto.componentDidMount = function componentDidMount() {
    this.listener = LayoutEvents.addListener(this.setNodeTop);
    this.setNodeTop();
    window.addEventListener('keydown', this.handleKey);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.listener) {
      this.listener.remove();
    }

    if (this.timeout) {
      clearTimeout(this.timeout);
    }

    if (this.longClickTimer) {
      clearTimeout(this.longClickTimer);
    }

    if (this.setPositionRepeatTimer) {
      clearTimeout(this.setPositionRepeatTimer);
    }

    window.removeEventListener('keydown', this.handleKey);
  }
  /**
   * @public
   */
  ;

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return _this2.renderMain();
    });
  };

  _proto.renderMain = function renderMain() {
    var _cn, _cn2;

    var _this$props = this.props,
        width = _this$props.width,
        disabled = _this$props.disabled;
    var rootProps = {
      className: cn((_cn = {}, _cn[jsStyles.root(this.theme)] = true, _cn[jsStyles.disabled()] = Boolean(disabled), _cn)),
      style: {
        width: width
      },
      ref: this.refRoot
    };
    return React.createElement("span", rootProps, React.createElement("div", {
      "data-tid": "DateSelect__caption",
      className: jsStyles.caption(),
      onClick: this.open
    }, this.getItem(0), React.createElement("div", {
      className: cn((_cn2 = {}, _cn2[jsStyles.arrow(this.theme)] = true, _cn2[jsStyles.arrowDisabled()] = Boolean(disabled), _cn2))
    }, React.createElement(ArrowTriangleUpDownIcon, {
      size: 12
    }))), this.state.opened && this.renderMenu());
  };

  _proto.disableItems = function disableItems(index) {
    var value = this.props.value + index;

    if (this.props.maxValue != null && this.props.minValue != null) {
      return value > this.props.maxValue || value < this.props.minValue;
    }

    if (this.props.minValue != null) {
      return value < this.props.minValue;
    }

    if (this.props.maxValue != null) {
      return value > this.props.maxValue;
    }
  };

  _proto.renderMenu = function renderMenu() {
    var _this3 = this,
        _cn3;

    var _this$state = this.state,
        top = _this$state.top,
        height = _this$state.height,
        nodeTop = _this$state.nodeTop;
    var shift = this.state.pos % itemHeight;

    if (shift < 0) {
      shift += itemHeight;
    }

    var from = (this.state.pos - shift + top) / itemHeight;
    var to = from + Math.ceil((height + shift) / itemHeight);
    var items = [];

    var _loop = function _loop(i) {
      var _cn4;

      var disableItems = _this3.disableItems(i) || false;
      var className = cn((_cn4 = {}, _cn4[jsStyles.menuItem(_this3.theme)] = true, _cn4[jsStyles.menuItemSelected(_this3.theme)] = i === 0, _cn4[jsStyles.menuItemActive(_this3.theme)] = i === _this3.state.current, _cn4[jsStyles.menuItemDisabled(_this3.theme)] = disableItems, _cn4));
      var clickHandler = {
        onMouseDown: preventDefault,
        onClick: _this3.handleItemClick(i)
      };
      items.push(React.createElement("div", _extends({
        "data-tid": "DateSelect__menuItem",
        "data-prop-disabled": disableItems,
        key: i,
        className: className,
        onMouseEnter: function onMouseEnter() {
          return _this3.setState({
            current: i
          });
        },
        onMouseLeave: function onMouseLeave() {
          return _this3.setState({
            current: null
          });
        }
      }, clickHandler), _this3.getItem(i)));
    };

    for (var i = from; i < to; ++i) {
      _loop(i);
    }

    var style = {
      top: top - 5,
      left: 0,
      right: 0
    };
    var shiftStyle = {
      position: 'relative',
      top: -shift
    };
    var holderClass = cn((_cn3 = {}, _cn3[jsStyles.menuHolder(this.theme)] = true, _cn3[jsStyles.isTopCapped()] = this.state.topCapped, _cn3[jsStyles.isBotCapped()] = this.state.botCapped, _cn3));
    var dropdownOffset = -itemHeight;

    if (nodeTop < -top) {
      var overflowOffsetDelta = this.state.topCapped ? 6 : 17;
      dropdownOffset -= nodeTop + top - overflowOffsetDelta;
    }

    return React.createElement(RenderLayer, {
      onClickOutside: this.close,
      onFocusOutside: this.close,
      active: true
    }, React.createElement("div", null, React.createElement(DropdownContainer, {
      getParent: this.getAnchor,
      offsetY: dropdownOffset,
      offsetX: -10
    }, React.createElement("div", {
      className: holderClass,
      style: style
    }, !this.state.topCapped && React.createElement("div", {
      className: jsStyles.menuUp(this.theme),
      onClick: this.handleUp,
      onMouseDown: this.handleLongClickUp,
      onMouseUp: this.handleLongClickStop,
      onMouseLeave: this.handleLongClickStop,
      onTouchStart: this.handleLongClickUp,
      onTouchEnd: this.handleLongClickStop
    }, React.createElement("span", null, React.createElement(ArrowTriangleUpIcon, null))), React.createElement("div", {
      className: jsStyles.itemsHolder(),
      style: {
        height: height
      }
    }, React.createElement("div", {
      ref: this.refItemsContainer,
      style: shiftStyle
    }, items)), !this.state.botCapped && React.createElement("div", {
      className: jsStyles.menuDown(this.theme),
      onClick: this.handleDown,
      onMouseDown: this.handleLongClickDown,
      onMouseUp: this.handleLongClickStop,
      onMouseLeave: this.handleLongClickStop,
      onTouchStart: this.handleLongClickDown,
      onTouchEnd: this.handleLongClickStop
    }, React.createElement("span", null, React.createElement(ArrowTriangleDownIcon, null)))))));
  };

  _proto.getItem = function getItem(index) {
    var value = this.props.value + index;

    if (this.props.type === 'month') {
      return this.locale.months[value];
    }

    return value;
  };

  _proto.setPosition = function setPosition(pos) {
    var top = itemsToMoveCount * itemHeight;
    var height = visibleYearsCount * itemHeight;

    if (this.props.type === 'month') {
      top = -this.props.value * itemHeight;
      height = monthsCount * itemHeight;
    }

    var minPos = this.getMinPos() - top;
    var maxPos = this.getMaxPos() - top - height + itemHeight;

    if (minPos >= pos) {
      pos = minPos;
    }

    if (maxPos <= pos) {
      pos = maxPos;
    }

    var topCapped = pos <= minPos;
    var botCapped = pos >= maxPos;
    this.setState({
      pos: pos,
      top: top,
      height: height,
      topCapped: topCapped,
      botCapped: botCapped
    });
  };

  _proto.getMinPos = function getMinPos() {
    if (this.props.type === 'month') {
      return -this.props.value * itemHeight;
    } else if (this.props.type === 'year') {
      return ((this.props.minValue || defaultMinYear) - this.props.value) * itemHeight;
    }

    return -Infinity; // Be defensive.
  };

  _proto.getMaxPos = function getMaxPos() {
    if (this.props.type === 'month') {
      return (visibleYearsCount - this.props.value) * itemHeight;
    } else if (this.props.type === 'year') {
      return ((this.props.maxValue || defaultMaxYear) - this.props.value) * itemHeight;
    }

    return Infinity; // Be defensive.
  };

  return DateSelect;
}(React.Component), _class2.__KONTUR_REACT_UI__ = 'DateSelect', _class2.propTypes = {
  disabled: PropTypes.bool,
  type: PropTypes.string,
  value: PropTypes.number.isRequired,
  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  onValueChange: PropTypes.func,
  minValue: PropTypes.number,
  maxValue: PropTypes.number
}, _class2.defaultProps = {
  type: 'year',
  minMonth: 0,
  maxMonth: 11,
  width: 'auto'
}, _temp)) || _class);

function preventDefault(e) {
  e.preventDefault();
}