import _createClass from "@babel/runtime/helpers/esm/createClass";
import * as ColorFunctions from "../../../lib/styles/ColorFunctions";
export var DefaultTheme =
/*#__PURE__*/
function () {
  function DefaultTheme() {}

  _createClass(DefaultTheme, null, [{
    key: "toggleBgHover",
    get: function get() {
      return this.toggleBgFocus;
    }
  }, {
    key: "chbIndeterminateBg",
    get: function get() {
      return this.textColorDefault;
    }
  }, {
    key: "chbShadowHover",
    get: function get() {
      return this.chbShadow;
    }
  }, {
    key: "chbCheckedColor",
    get: function get() {
      return this.textColorDefault;
    }
  }, {
    key: "chbCheckedHoverShadow",
    get: function get() {
      return this.chbShadow;
    }
  }, {
    key: "chbCheckedShadow",
    get: function get() {
      return this.chbShadow;
    }
  }, {
    key: "textareaColor",
    get: function get() {
      return this.black;
    }
  }, {
    key: "radioCheckedHoverBgColor",
    get: function get() {
      return this.radioHoverBg;
    }
  }, {
    key: "bgActive",
    get: function get() {
      return this.blueLight;
    }
  }, {
    key: "borderColorFocus",
    get: function get() {
      return this.blueLight;
    }
  }, {
    key: "borderColorError",
    get: function get() {
      return this.errorMain;
    }
  }, {
    key: "borderColorWarning",
    get: function get() {
      return this.warningMain;
    }
  }, {
    key: "btnFontSizeSmall",
    get: function get() {
      return this.fontSizeSmall;
    }
  }, {
    key: "btnFontSizeMedium",
    get: function get() {
      return this.fontSizeMedium;
    }
  }, {
    key: "btnFontSizeLarge",
    get: function get() {
      return this.fontSizeLarge;
    }
  }, {
    key: "btnPaddingYSmall",
    get: function get() {
      return this.controlPaddingYSmall;
    }
  }, {
    key: "btnPaddingYMedium",
    get: function get() {
      return this.controlPaddingYMedium;
    }
  }, {
    key: "btnPaddingYLarge",
    get: function get() {
      return this.controlPaddingYLarge;
    }
  }, {
    key: "btnDisabledBg",
    get: function get() {
      return this.bgDisabled;
    }
  }, {
    key: "controlHeightSmall",
    get: function get() {
      var borderWidth = parseInt(this.controlBorderWidth, 10) || 0;
      var paddingYSmall = parseInt(this.controlPaddingYSmall, 10) || 0;
      var lineHeightSmall = parseInt(this.controlLineHeightSmall, 10) || 0;
      return 2 * borderWidth + 2 * paddingYSmall + lineHeightSmall + "px";
    }
  }, {
    key: "controlHeightMedium",
    get: function get() {
      var borderWidth = parseInt(this.controlBorderWidth, 10) || 0;
      var paddingYMedium = parseInt(this.controlPaddingYMedium, 10) || 0;
      var lineHeightMedium = parseInt(this.controlLineHeightMedium, 10) || 0;
      return 2 * borderWidth + 2 * paddingYMedium + lineHeightMedium + "px";
    }
  }, {
    key: "controlHeightLarge",
    get: function get() {
      var borderWidth = parseInt(this.controlBorderWidth, 10) || 0;
      var paddingYLarge = parseInt(this.controlPaddingYLarge, 10) || 0;
      var lineHeightLarge = parseInt(this.controlLineHeightLarge, 10) || 0;
      return 2 * borderWidth + 2 * paddingYLarge + lineHeightLarge + "px";
    }
  }, {
    key: "linkHoverColor",
    get: function get() {
      return this.linkColor;
    }
  }, {
    key: "linkDisabledColor",
    get: function get() {
      return this.textColorDisabled;
    }
  }, {
    key: "dropdownMenuHoverBg",
    get: function get() {
      return this.bgActive;
    }
  }, {
    key: "btnDisabledShadowColor",
    get: function get() {
      return this.borderColorGrayLight;
    }
  }, {
    key: "btnDisabledShadow",
    get: function get() {
      return "0 0 0 1px " + this.btnDisabledShadowColor;
    }
  }, {
    key: "btnDisabledShadowArrow",
    get: function get() {
      return "1px -1px 0 0 " + this.btnDisabledShadowColor;
    }
  }, {
    key: "tabColorFocus",
    get: function get() {
      return this.borderColorFocus;
    }
  }, {
    key: "tabColorError",
    get: function get() {
      return this.btnDangerBg;
    }
  }, {
    key: "tabColorWarning",
    get: function get() {
      return this.btnPayBg;
    }
  }, {
    key: "tabColorSuccess",
    get: function get() {
      return this.btnSuccessBg;
    }
  }, {
    key: "tabColorPrimary",
    get: function get() {
      return this.btnPrimaryBg;
    }
  }, {
    key: "tabColorHover",
    get: function get() {
      return this.borderColorFocusLight;
    }
  }, {
    key: "tabColorHoverError",
    get: function get() {
      return ColorFunctions.lighten(this.tabColorError, '25%');
    }
  }, {
    key: "tabColorHoverWarning",
    get: function get() {
      return ColorFunctions.lighten(this.tabColorWarning, '25%');
    }
  }, {
    key: "tabColorHoverSuccess",
    get: function get() {
      return ColorFunctions.lighten(this.tabColorSuccess, '25%');
    }
  }, {
    key: "tabColorHoverPrimary",
    get: function get() {
      return ColorFunctions.lighten(this.tabColorPrimary, '25%');
    }
  }, {
    key: "calendarCellHoverBgColor",
    get: function get() {
      return this.bgActive;
    }
  }, {
    key: "dateSelectMenuBg",
    get: function get() {
      return this.bgDefault;
    }
  }, {
    key: "dateSelectMenuItemBgActive",
    get: function get() {
      return this.bgActive;
    }
  }, {
    key: "dateSelectMenuItemBgDisabled",
    get: function get() {
      return this.bgDefault;
    }
  }, {
    key: "dateSelectMenuItemFontActive",
    get: function get() {
      return this.textColorInvert;
    }
  }, {
    key: "dateSelectMenuItemFontSelected",
    get: function get() {
      return this.textColorDefault;
    }
  }, {
    key: "dateSelectMenuItemFontDisabled",
    get: function get() {
      return this.textColorDisabled;
    }
  }, {
    key: "pagingForwardLinkColor",
    get: function get() {
      return this.linkColor;
    }
  }, {
    key: "pagingForwardLinkDisabledColor",
    get: function get() {
      return this.linkDisabledColor;
    }
  }, {
    key: "toggleBgActive",
    get: function get() {
      return this.toggleBgChecked;
    }
  }, {
    key: "toggleBgError",
    get: function get() {
      return this.errorMain;
    }
  }, {
    key: "toggleBgWarning",
    get: function get() {
      return this.warningMain;
    }
  }, {
    key: "toggleFocusShadowColor",
    get: function get() {
      return this.borderColorFocus;
    }
  }, {
    key: "inputFontSizeSmall",
    get: function get() {
      return this.fontSizeSmall;
    }
  }, {
    key: "inputFontSizeMedium",
    get: function get() {
      return this.fontSizeMedium;
    }
  }, {
    key: "inputFontSizeLarge",
    get: function get() {
      return this.fontSizeLarge;
    }
  }, {
    key: "inputFocusShadow",
    get: function get() {
      return "0 0 0 1px " + this.borderColorFocus;
    }
  }, {
    key: "inputDisabledBg",
    get: function get() {
      return this.bgDisabled;
    }
  }, {
    key: "inputDisabledBorderColor",
    get: function get() {
      return this.borderColorGrayLight;
    }
  }, {
    key: "inputFocusOutline",
    get: function get() {
      return this.borderColorFocus;
    }
  }, {
    key: "inputBorderWidth",
    get: function get() {
      return this.controlBorderWidth;
    }
  }, {
    key: "inputBorderTopColor",
    get: function get() {
      return this.borderColorGrayDark;
    }
  }, {
    key: "chbBorderColorFocus",
    get: function get() {
      return this.borderColorFocus;
    }
  }, {
    key: "chbBg",
    get: function get() {
      return "linear-gradient(" + this.chbBgStart + ", " + this.chbBgEnd + ")";
    }
  }, {
    key: "chbHoverBg",
    get: function get() {
      return "linear-gradient(-180deg, " + this.btnDefaultHoverBgStart + " 0, " + this.btnDefaultHoverBgEnd + " 100%)";
    }
  }, {
    key: "chbActiveBg",
    get: function get() {
      return this.btnDefaultActiveBg;
    }
  }, {
    key: "chbCheckedBg",
    get: function get() {
      return this.chbBg;
    }
  }, {
    key: "chbBoxIndeterminateBg",
    get: function get() {
      return this.chbBg;
    }
  }, {
    key: "chbCheckedHoverBg",
    get: function get() {
      return this.chbHoverBg;
    }
  }, {
    key: "chbCheckedActiveBg",
    get: function get() {
      return this.btnDefaultActiveBg;
    }
  }, {
    key: "chbCheckedActiveShadow",
    get: function get() {
      return this.btnDefaultActiveShadow;
    }
  }, {
    key: "chbShadowActive",
    get: function get() {
      return this.btnDefaultActiveShadow;
    }
  }, {
    key: "textareaLineHeight",
    get: function get() {
      var fontSize = this.fontSizeMedium;

      switch (fontSize) {
        case '14px':
          return '20px';

        case '16px':
          return '25px';

        default:
          return parseInt(fontSize, 10) * 1.5 + "px";
      }
    }
  }, {
    key: "textareaBorderTopColor",
    get: function get() {
      return this.borderColorGrayDark;
    }
  }, {
    key: "textareaDisabledBg",
    get: function get() {
      return this.bgDisabled;
    }
  }, {
    key: "textareaDisabledBorderColor",
    get: function get() {
      return this.borderColorGrayLight;
    }
  }, {
    key: "spinnerBgColor",
    get: function get() {
      return this.grayXLight;
    }
  }, {
    key: "spinnerDimmedColor",
    get: function get() {
      return this.gray;
    }
  }, {
    key: "spinnerCaptionColor",
    get: function get() {
      return this.gray;
    }
  }, {
    key: "popupBackground",
    get: function get() {
      return this.bgDefault;
    }
  }]);

  return DefaultTheme;
}();
DefaultTheme.brandXLight = '#cae5f5';
DefaultTheme.brandLight = '#3094d0';
DefaultTheme.brand = '#1e79be';
DefaultTheme.brandDark = '#1363a0';
DefaultTheme.brandXDark = '#084f85';
DefaultTheme.white = '#fff';
DefaultTheme.grayXxLight = '#f2f2f2';
DefaultTheme.grayXLight = '#e5e5e5';
DefaultTheme.grayLight = '#a0a0a0';
DefaultTheme.gray = '#808080';
DefaultTheme.grayDark = '#333';
DefaultTheme.black = '#000';
DefaultTheme.blueXxLight = '#e4f3ff';
DefaultTheme.blueLight = '#5199db';
DefaultTheme.blue = '#3072c4';
DefaultTheme.blueDark = '#1e5aa4';
DefaultTheme.blueXDark = '#044785';
DefaultTheme.greenXxLight = '#e2f7dc';
DefaultTheme.green = '#3f9726';
DefaultTheme.greenDark = '#228007';
DefaultTheme.redXxLight = '#ffd6d6';
DefaultTheme.red = '#d70c17';
DefaultTheme.redDark = '#ce0014';
DefaultTheme.yellowXxLight = '#fff0bc';
DefaultTheme.yellow = '#f69c00';
DefaultTheme.yellowDark = '#d97e00';
DefaultTheme.bgDefault = '#fff';
DefaultTheme.bgDisabled = '#f2f2f2';
DefaultTheme.errorMain = '#d70c17';
DefaultTheme.errorSecondary = '#ffd6d6';
DefaultTheme.errorText = '#ce0014';
DefaultTheme.warningMain = '#f69c00';
DefaultTheme.warningSecondary = '#fff0bc';
DefaultTheme.warningText = '#d97e00';
DefaultTheme.borderColorFocusLight = '#bad7f1';
DefaultTheme.borderColorGrayDark = 'rgba(0, 0, 0, 0.28)';
DefaultTheme.borderColorGrayLight = 'rgba(0, 0, 0, 0.15)';
DefaultTheme.placeholderColor = '#a0a0a0';
DefaultTheme.outlineColorFocus = '#fff';
DefaultTheme.placeholderColorLight = '#cdcdcd';
DefaultTheme.blinkColor = 'rgba(0, 136, 255, 0.2)';
DefaultTheme.controlBorderWidth = '1px';
DefaultTheme.controlLineHeightSmall = '20px';
DefaultTheme.controlLineHeightMedium = '20px';
DefaultTheme.controlLineHeightLarge = '22px';
DefaultTheme.controlPaddingYSmall = '6px';
DefaultTheme.controlPaddingYMedium = '9px';
DefaultTheme.controlPaddingYLarge = '10px';
DefaultTheme.textColorDefault = '#404040';
DefaultTheme.textColorInvert = '#fff';
DefaultTheme.textColorDisabled = '#a0a0a0';
DefaultTheme.fontSizeSmall = '14px';
DefaultTheme.fontSizeMedium = '14px';
DefaultTheme.fontSizeLarge = '16px';
DefaultTheme.linkColor = '#3072c4';
DefaultTheme.linkActiveColor = '#044785';
DefaultTheme.linkHoverTextDecoration = 'underline';
DefaultTheme.linkSuccessColor = '#3f9726';
DefaultTheme.linkSuccessHoverColor = '#3f9726';
DefaultTheme.linkSuccessActiveColor = '#3f9726';
DefaultTheme.linkDangerColor = '#e3071c';
DefaultTheme.linkDangerHoverColor = '#e3071c';
DefaultTheme.linkDangerActiveColor = '#b00616';
DefaultTheme.dropdownMenuSelectedBg = '#f1f1f1';
DefaultTheme.tokenDisabledBg = 'rgba(0, 0, 0, 0.15)';
DefaultTheme.loaderBg = 'rgba(255, 255, 255, 0.8)';
DefaultTheme.loaderOpacity = '0.8';
DefaultTheme.btnWrapPadding = '1px';
DefaultTheme.btnHeightShift = '-2';
DefaultTheme.btnLinkBorderRadius = '1px';
DefaultTheme.btnFocusShadowWidth = '2px';
DefaultTheme.btnFocusBorder = 'none';
DefaultTheme.btnDisabledTextColor = '#a0a0a0';
DefaultTheme.btnCheckedBg = '#737373';
DefaultTheme.btnCheckedHoverBorderColor = 'transparent';
DefaultTheme.btnCheckedTextColor = '#fff';
DefaultTheme.btnCheckedShadow = '0 0 0 1px rgba(0, 0, 0, 0.6), inset 0 1px 2px 0 rgba(0, 0, 0, 0.3)';
DefaultTheme.btnCheckedShadowColorArrow = 'rgba(0, 0, 0, 0.3)';
DefaultTheme.btnCheckedShadowArrow = '1px -1px 0 0 rgba(0, 0, 0, 0.6), inset 0 4px 2px -3px rgba(0, 0, 0, 0.3)';
DefaultTheme.btnCheckedShadowArrowLeft = '1px -1px 0 0 rgba(0, 0, 0, 0.6), inset -4px 0 2px -3px rgba(0, 0, 0, 0.3)';
DefaultTheme.btnBorderRadius = '2px';
DefaultTheme.btnArrowBorderRadius = '2px 2px 2px 16px';
DefaultTheme.btnSmallBorderRadius = '1px';
DefaultTheme.btnPaddingXSmall = '15px';
DefaultTheme.btnPaddingXMedium = '15px';
DefaultTheme.btnPaddingXLarge = '20px';
DefaultTheme.btnDefaultBg = 'none';
DefaultTheme.btnDefaultBgStart = '#fff';
DefaultTheme.btnDefaultBgEnd = '#ebebeb';
DefaultTheme.btnSmallArrowLength = '18px';
DefaultTheme.btnSmallArrowRight = '-8.8px';
DefaultTheme.btnSmallArrowLeft = '-8px';
DefaultTheme.btnSmallArrowBorderRadius = '2px 2px 2px 16px';
DefaultTheme.btnMediumArrowLeft = '-9.8px';
DefaultTheme.btnMediumArrowLeftLoadingLeft = '-208px';
DefaultTheme.btnMediumArrowTransform = 'rotate(53deg) skewX(24deg) skewY(8deg)';
DefaultTheme.btnDeprecatedSizeMediumFontSize = '16px';
DefaultTheme.btnDeprecatedSizeMediumPaddingShift = '1';
DefaultTheme.btnLargeArrowLeft = '-10px';
DefaultTheme.btnLargeArrowTransform = 'rotate(53deg) skewX(25deg) skewY(10deg)';
DefaultTheme.btnLargeArrowBg = 'linear-gradient(-56deg, transparent 48.2%, #ccc 0, #ccc 63.4%, transparent 0)';
DefaultTheme.btnDefaultBgArrowStart = '#fff';
DefaultTheme.btnDefaultBgArrowEnd = '#ebebeb';
DefaultTheme.btnDefaultCheckedShadowArrow = 'none';
DefaultTheme.btnDefaultCheckedBorder = 'none';
DefaultTheme.btnDefaultTextColor = 'none';
DefaultTheme.btnDefaultHoverBg = 'none';
DefaultTheme.btnDefaultHoverBorderColor = 'transparent';
DefaultTheme.btnDefaultActiveBorderColor = 'none';
DefaultTheme.btnDefaultBorder = 'none';
DefaultTheme.btnDefaultShadow = '0 1px 0 0 rgba(0, 0, 0, 0.15), 0 0 0 1px rgba(0, 0, 0, 0.15)';
DefaultTheme.btnDefaultShadowArrow = '1.2px -1px 0 0 rgba(0, 0, 0, 0.15), 1px 0 0 0 rgba(0, 0, 0, 0.15)';
DefaultTheme.btnDefaultShadowArrowLeft = '1px -1px 0 0 rgba(0, 0, 0, 0.15), 0 -1px 0 0 rgba(0, 0, 0, 0.15)';
DefaultTheme.btnDefaultHoverBgStart = '#f2f2f2';
DefaultTheme.btnDefaultHoverBgEnd = '#dfdfdf';
DefaultTheme.btnDefaultHoverShadow = '0 1px 0 0 rgba(0, 0, 0, 0.15), 0 0 0 1px rgba(0, 0, 0, 0.2)';
DefaultTheme.btnDefaultHoverShadowArrow = '1px -1px 0 0 rgba(0, 0, 0, 0.15), 1px 0 0 0 rgba(0, 0, 0, 0.2)';
DefaultTheme.btnDefaultHoverShadowArrowLeft = '1px -1px 0 0 rgba(0, 0, 0, 0.15), 0 -1px 0 0 rgba(0, 0, 0, 0.2)';
DefaultTheme.btnDefaultActiveBg = '#e1e1e1';
DefaultTheme.btnDefaultActiveShadow = '0 -1px 0 0 rgba(0, 0, 0, 0.1), 0 0 0 1px rgba(0, 0, 0, 0.2), inset 0 1px 2px 0 rgba(0, 0, 0, 0.1)';
DefaultTheme.btnDefaultActiveShadowArrow = '0 -2px 0 -1px rgba(0, 0, 0, 0.1), 1px -1px 0 0 rgba(0, 0, 0, 0.2), inset 0 4px 5px -4px rgba(0, 0, 0, 0.1)';
DefaultTheme.btnDefaultActiveShadowArrowLeft = '0 -1px 0 0 rgba(0, 0, 0, 0.1), 1px -0.3px 0 0 rgba(0, 0, 0, 0.2), inset -4px 0 5px -4px rgba(0, 0, 0, 0.2)';
DefaultTheme.btnSuccessBg = '#419d14';
DefaultTheme.btnSuccessHoverBg = 'none';
DefaultTheme.btnSuccessHoverBorderColor = 'transparent';
DefaultTheme.btnSuccessDisabledBg = 'none';
DefaultTheme.btnSuccessBorder = 'none';
DefaultTheme.btnSuccessBgStart = '#4ba91d';
DefaultTheme.btnSuccessBgEnd = '#37910b';
DefaultTheme.btnSuccessBgArrowStart = '#4ba91d';
DefaultTheme.btnSuccessBgArrowEnd = '#37910b';
DefaultTheme.btnSuccessTextColor = '#fff';
DefaultTheme.btnSuccessShadow = '0 0 0 1px rgba(25, 103, 6, 0.7), 0 1px 0 0 rgba(21, 80, 7, 0.5)';
DefaultTheme.btnSuccessShadowArrow = '1px -1px 0 0 rgba(25, 103, 6, 0.7), 1px 0 0 0 rgba(21, 80, 7, 0.5)';
DefaultTheme.btnSuccessShadowArrowLeft = '1px -1px 0 0 rgba(25, 103, 6, 0.7), 0 -1px 0 0 rgba(21, 80, 7, 0.5)';
DefaultTheme.btnSuccessHoverBgStart = '#3b8d13';
DefaultTheme.btnSuccessHoverBgEnd = '#317e0b';
DefaultTheme.btnSuccessHoverShadow = '0 0 0 1px rgba(7, 73, 1, 0.7), 0 1px 0 0 rgba(16, 70, 4, 0.3)';
DefaultTheme.btnSuccessHoverShadowArrow = '1px -1px 0 0 rgba(7, 73, 1, 0.7), 1px 0 0 0 rgba(16, 70, 4, 0.3)';
DefaultTheme.btnSuccessHoverShadowArrowLeft = '1px -1px 0 0 rgba(7, 73, 1, 0.7), 0 -1px 0 0 rgba(16, 70, 4, 0.3)';
DefaultTheme.btnSuccessActiveBg = '#35840e';
DefaultTheme.btnSuccessActiveShadow = '0 0 0 1px rgba(4, 63, 0, 0.75), 0 -1px 0 0 rgba(9, 32, 4, 0.6), inset 0 1px 2px 0 rgba(0, 0, 0, 0.1)';
DefaultTheme.btnSuccessActiveShadowArrow = '1px -1px 0 0 rgba(4, 63, 0, 0.75), 0 -2px 0 -1px rgba(9, 32, 4, 0.6), inset 0 4px 5px -4px rgba(0, 0, 0, 0.1)';
DefaultTheme.btnSuccessActiveShadowArrowLeft = '1px -1px 0 0 rgba(4, 63, 0, 0.75), 0 0 0 -1px rgba(9, 32, 4, 0.6), inset -4px 0 5px -4px rgba(0, 0, 0, 0.2)';
DefaultTheme.btnPrimaryBg = '#1e8dd4';
DefaultTheme.btnPrimaryHoverBg = 'none';
DefaultTheme.btnPrimaryHoverBorderColor = 'transparent';
DefaultTheme.btnPrimaryDisabledBg = 'none';
DefaultTheme.btnPrimaryBorder = 'none';
DefaultTheme.btnPrimaryBgStart = '#2899ea';
DefaultTheme.btnPrimaryBgEnd = '#167ac1';
DefaultTheme.btnPrimaryBgArrowStart = '#2899ea';
DefaultTheme.btnPrimaryBgArrowEnd = '#167ac1';
DefaultTheme.btnPrimaryTextColor = '#fff';
DefaultTheme.btnPrimaryShadow = '0 0 0 1px rgba(14, 81, 129, 0.7), 0 1px 0 0 rgba(7, 37, 80, 0.5)';
DefaultTheme.btnPrimaryShadowArrow = '1px -1px 0 0 rgba(14, 81, 129, 0.7), 1px 0 0 0 rgba(7, 37, 80, 0.5)';
DefaultTheme.btnPrimaryShadowArrowLeft = '1px -1px 0 0 rgba(14, 81, 129, 0.7), 0 -1px 0 0 rgba(7, 37, 80, 0.5)';
DefaultTheme.btnPrimaryHoverBgStart = '#0087d5';
DefaultTheme.btnPrimaryHoverBgEnd = '#167ac1';
DefaultTheme.btnPrimaryHoverShadow = '0 0 0 1px rgba(5, 60, 99, 0.7), 0 1px 0 0 rgba(7, 37, 80, 0.3)';
DefaultTheme.btnPrimaryHoverShadowArrow = '1px -1px 0 0 rgba(5, 60, 99, 0.7), 1px 0 0 0 rgba(7, 37, 80, 0.3)';
DefaultTheme.btnPrimaryHoverShadowArrowLeft = '1px -1px 0 0 rgba(5, 60, 99, 0.7), 0 -1px 0 0 rgba(7, 37, 80, 0.3)';
DefaultTheme.btnPrimaryActiveBg = '#0079c3';
DefaultTheme.btnPrimaryActiveShadow = '0 0 0 1px rgba(10, 63, 99, 0.75), 0 -1px 0 0 rgba(8, 45, 96, 0.5), inset 0 1px 2px 0 rgba(0, 0, 0, 0.2)';
DefaultTheme.btnPrimaryActiveShadowArrow = '1px -1px 0 0 rgba(10, 63, 99, 0.75), 0 -2px 0 -1px rgba(8, 45, 96, 0.5), inset 0 4px 5px -4px rgba(0, 0, 0, 0.2)';
DefaultTheme.btnPrimaryActiveShadowArrowLeft = '1px -1px 0 0 rgba(10, 63, 99, 0.75), 0 0 0 -1px rgba(8, 45, 96, 0.5), inset -4px 0 5px -4px rgba(0, 0, 0, 0.2)';
DefaultTheme.btnDangerBg = '#e14c30';
DefaultTheme.btnDangerHoverBg = 'none';
DefaultTheme.btnDangerHoverBorderColor = 'transparent';
DefaultTheme.btnDangerDisabledBg = 'none';
DefaultTheme.btnDangerBorder = 'none';
DefaultTheme.btnDangerBgStart = '#ec5438';
DefaultTheme.btnDangerBgEnd = '#d44327';
DefaultTheme.btnDangerBgArrowStart = '#ec5438';
DefaultTheme.btnDangerBgArrowEnd = '#d44327';
DefaultTheme.btnDangerTextColor = '#fff';
DefaultTheme.btnDangerShadow = '0 0 0 1px rgba(173, 15, 0, 0.7), 0 1px 0 0 rgba(0, 0, 0, 0.4)';
DefaultTheme.btnDangerShadowArrow = '1px -1px 0 0 rgba(173, 15, 0, 0.7), 1px 0 0 0 rgba(0, 0, 0, 0.4)';
DefaultTheme.btnDangerShadowArrowLeft = '1px -1px 0 0 rgba(173, 15, 0, 0.7), 0 -1px 0 0 rgba(0, 0, 0, 0.4)';
DefaultTheme.btnDangerHoverBgStart = '#d44227';
DefaultTheme.btnDangerHoverBgEnd = '#c73013';
DefaultTheme.btnDangerHoverShadow = '0 0 0 1px rgba(145, 0, 0, 0.7), 0 1px 0 0 rgba(90, 3, 3, 0.4)';
DefaultTheme.btnDangerHoverShadowArrow = '1px -1px 0 0 rgba(145, 0, 0, 0.7), 1px 0 0 0 rgba(90, 3, 3, 0.4)';
DefaultTheme.btnDangerHoverShadowArrowLeft = '1px -1px 0 0 rgba(145, 0, 0, 0.7), 0 -1px 0 0 rgba(90, 3, 3, 0.4)';
DefaultTheme.btnDangerActiveBg = '#cd381b';
DefaultTheme.btnDangerActiveShadow = '0 0 0 1px rgba(108, 7, 7, 0.75), 0 -1px 0 0 rgba(90, 3, 3, 0.4), inset 0 1px 2px 0 rgba(0, 0, 0, 0.1)';
DefaultTheme.btnDangerActiveShadowArrow = '1px -1px 0 0 rgba(108, 7, 7, 0.75), 0 -2px 0 -1px rgba(90, 3, 3, 0.4), inset 0 4px 5px -4px rgba(0, 0, 0, 0.1)';
DefaultTheme.btnDangerActiveShadowArrowLeft = '1px -1px 0 0 rgba(108, 7, 7, 0.75), 0 0 0 -1px rgba(90, 3, 3, 0.4), inset -4px 0 5px -4px rgba(0, 0, 0, 0.1)';
DefaultTheme.btnPayBg = '#ffc943';
DefaultTheme.btnPayHoverBg = 'none';
DefaultTheme.btnPayHoverBorderColor = 'transparent';
DefaultTheme.btnPayDisabledBg = 'none';
DefaultTheme.btnPayBorder = 'none';
DefaultTheme.btnPayBgStart = '#ffd54b';
DefaultTheme.btnPayBgEnd = '#ffbb39';
DefaultTheme.btnPayBgArrowStart = '#ffd54b';
DefaultTheme.btnPayBgArrowEnd = '#ffbb39';
DefaultTheme.btnPayTextColor = 'none';
DefaultTheme.btnPayShadow = '0 0 0 1px rgba(238, 169, 34, 0.7), 0 1px 0 0 rgba(77, 16, 0, 0.56)';
DefaultTheme.btnPayShadowArrow = '1px -1px 0 0 rgba(238, 169, 34, 0.7), 1px -0.3px 0 0 rgba(77, 16, 0, 0.56)';
DefaultTheme.btnPayShadowArrowLeft = '1px -1px 0 0 rgba(238, 169, 34, 0.7), 0.2px -1px 0 -0.3px rgba(77, 16, 0, 0.56)';
DefaultTheme.btnPayHoverBgStart = '#ffbd3a';
DefaultTheme.btnPayHoverBgEnd = '#f8a91d';
DefaultTheme.btnPayHoverShadow = '0 0 0 1px rgba(227, 142, 8, 0.7), 0 1px 0 0 rgba(93, 20, 3, 0.4)';
DefaultTheme.btnPayHoverShadowArrow = '1px -1px 0 0 rgba(227, 142, 8, 0.7), 1px -0.3px 0 0 rgba(93, 20, 3, 0.4)';
DefaultTheme.btnPayHoverShadowArrowLeft = '1px -1px 0 0 rgba(227, 142, 8, 0.7), 0 -1px 0 0 rgba(93, 20, 3, 0.4)';
DefaultTheme.btnPayActiveBg = '#fbb028';
DefaultTheme.btnPayActiveShadow = '0 0 0 1px rgba(210, 144, 0, 0.7), 0 -1px 0 0 rgba(0, 0, 0, 0.44), inset 0 1px 2px 0 rgba(0, 0, 0, 0.05)';
DefaultTheme.btnPayActiveShadowArrow = '1px -1px 0 0 rgba(210, 144, 0, 0.7), 0 -2px 0 -1px rgba(0, 0, 0, 0.44), inset 0 4px 5px -4px rgba(0, 0, 0, 0.05)';
DefaultTheme.btnPayActiveShadowArrowLeft = '1px -1px 0 0 rgba(210, 144, 0, 0.7), 2px -0.3px 0 -1px rgba(0, 0, 0, 0.44), inset -4px 0 5px -4px rgba(0, 0, 0, 0.05)';
DefaultTheme.btnDeprecatedSizeMediumPaddingShiftIe = '1';
DefaultTheme.btnSmallArrowTop = '7px';
DefaultTheme.btnSmallArrowLeftLoadingDelay = '0.23s';
DefaultTheme.btnSmallArrowBg = 'linear-gradient(-54deg, transparent 48%, #ccc 0, #ccc 72%, transparent 0)';
DefaultTheme.btnMediumArrowRight = '-10px';
DefaultTheme.btnMediumArrowBg = 'linear-gradient(-58deg, transparent 47.5%, #ccc 0, #ccc 70.5%, transparent 0)';
DefaultTheme.btnMediumArrowLeftLoadingDelay = '0.2s';
DefaultTheme.btnLargeArrowLeftLoadingDelay = '0s';
DefaultTheme.sltPlaceholderColor = '#a0a0a0';
DefaultTheme.tooltipCloseBtnColor = 'rgba(0, 0, 0, 0.374)';
DefaultTheme.tooltipCloseBtnHoverColor = 'rgba(0, 0, 0, 0.5)';
DefaultTheme.modalBackBg = '#333';
DefaultTheme.modalBackOpacity = '0.6';
DefaultTheme.modalCloseButtonColor = '#808080';
DefaultTheme.modalCloseButtonDisabledColor = '#8b8b8b';
DefaultTheme.modalCloseButtonHoverColor = '#333';
DefaultTheme.modalFixedHeaderBg = '#fff';
DefaultTheme.modalFixedHeaderShadow = '0 1px 10px #000000';
DefaultTheme.modalFixedFooterShadow = '0 -1px 10px #000000';
DefaultTheme.modalFooterBg = '#e9e9e9';
DefaultTheme.modalAdaptiveThreshold = '425px';
DefaultTheme.sidePageFooterPanelBg = '#e9e9e9';
DefaultTheme.sidePageCloseButtonColor = 'rgba(0, 0, 0, 0.374)';
DefaultTheme.sidePageCloseButtonHoverColor = 'rgba(0, 0, 0, 0.5)';
DefaultTheme.sidePageContainerShadow = '0 5px 10px rgba(0, 0, 0, 0.2)';
DefaultTheme.dateInputIconColor = '#333';
DefaultTheme.dateInputMaskColor = '#b8b8b8';
DefaultTheme.dateInputComponentSelectedBgColor = '#cae0f4';
DefaultTheme.calendarCellBg = 'white';
DefaultTheme.calendarCellHoverColor = 'white';
DefaultTheme.calendarCellActiveHoverColor = 'white';
DefaultTheme.calendarCellWeekendColor = '#f00';
DefaultTheme.calendarCellTodayBorder = '1px solid #8b8b8b';
DefaultTheme.calendarCellSelectedBgColor = '#e9e9e9';
DefaultTheme.calendarCellSelectedFontColor = 'inherit';
DefaultTheme.calendarMonthHeaderStickedBgColor = 'white';
DefaultTheme.calendarMonthTitleBorderBottomColor = '#dfdede';
DefaultTheme.dateSelectMenuItemBgSelected = '#ececec';
DefaultTheme.datePickerOpenBtnColor = '#333';
DefaultTheme.pickerBg = '#fff';
DefaultTheme.pickerShadow = '0 0 0 1px rgba(0, 0, 0, 0.1), 0 3px 10px 0 rgba(0, 0, 0, 0.2)';
DefaultTheme.pickerTodayWrapperBgColor = 'white';
DefaultTheme.pickerTodayWrapperBorderTop = '1px solid #dfdede';
DefaultTheme.pickerTodayWrapperHoverBgColor = '#f5f5f5';
DefaultTheme.pagingDotsColor = 'gray';
DefaultTheme.pagingPageLinkActiveBg = 'rgba(0, 0, 0, 0.09)';
DefaultTheme.pagingPageLinkActiveColor = 'black';
DefaultTheme.pagingPageLinkHoverBg = 'rgba(0, 0, 0, 0.05)';
DefaultTheme.pagingPageLinkHintColor = '#bbb';
DefaultTheme.menuSeparatorBorderColor = '#e6e6e6';
DefaultTheme.toastBg = 'rgba(51, 51, 51, 0.8)';
DefaultTheme.toastColor = 'white';
DefaultTheme.toastLinkColor = '#80caff';
DefaultTheme.toastCloseColor = '#a0a0a0';
DefaultTheme.toastCloseHoverColor = 'white';
DefaultTheme.tbBg = '#fff';
DefaultTheme.tbShadow = '0 1px 1px 0 rgba(0, 0, 0, 0.1), 0 1px 8px 0 rgba(0, 0, 0, 0.1)';
DefaultTheme.tdDividerBg = '#dfdfdf';
DefaultTheme.logoColor = '#000';
DefaultTheme.logoHoverColor = '#000';
DefaultTheme.menuItemPaddingForIcon = '36px';
DefaultTheme.menuBorder = '1px solid #d5d5d5';
DefaultTheme.menuShadow = '0 2px 6px rgba(0, 0, 0, 0.2)';
DefaultTheme.toggleBg = 'linear-gradient(-180deg, #fff, #ebebeb)';
DefaultTheme.toggleBgDisabled = 'none';
DefaultTheme.toggleBgChecked = '#3072c4';
DefaultTheme.toggleBorderColor = '#d0d0d0';
DefaultTheme.btnMenuArrowColor = '#a6a6a6';
DefaultTheme.popupBorder = 'none';
DefaultTheme.popupBorderRadius = '2px';
DefaultTheme.popupBorderColor = 'transparent';
DefaultTheme.popupDropShadow = 'drop-shadow(0 0 1px rgba(0, 0, 0, 0.1)) drop-shadow(0 1px 2px rgba(0, 0, 0, 0.3))';
DefaultTheme.popupBoxShadow = '0 0 0 1px rgba(0, 0, 0, 0.1), 0 3px 10px 0 rgba(0, 0, 0, 0.2)';
DefaultTheme.popupTextColor = 'inherit';
DefaultTheme.inputTextColor = 'none';
DefaultTheme.inputShadow = 'inset 0 1px 0 0 rgba(0, 0, 0, 0.05)';
DefaultTheme.inputBg = 'white';
DefaultTheme.inputIconColor = '#a9a9a9';
DefaultTheme.inputColor = 'inherit';
DefaultTheme.chbBgStart = '#fdfdfd';
DefaultTheme.chbBgEnd = '#ededed';
DefaultTheme.chbIndeterminateBorderRadius = '1px';
DefaultTheme.chbShadow = '0 0 0 1px rgba(0, 0, 0, 0.15)';
DefaultTheme.chbShadowDisabled = '0 0 0 1px rgba(0, 0, 0, 0.15)';
DefaultTheme.chbBorder = 'none';
DefaultTheme.chbBorderRadius = '1px';
DefaultTheme.chbShadowWidth = '2px';
DefaultTheme.specificityLevel = '0';
DefaultTheme.linkIconMarginRight = '3px';
DefaultTheme.toggleBgFocus = 'linear-gradient(-180deg, #f1f1f1, #dedede)';
DefaultTheme.textareaBg = 'none';
DefaultTheme.textareaShadow = 'inset 0 1px 0 0 rgba(0, 0, 0, 0.05)';
DefaultTheme.radioSize = '16px';
DefaultTheme.radioVerticalAlign = '-2px';
DefaultTheme.radioBgImage = 'linear-gradient(-180deg, #fff 0, #ebebeb 100%)';
DefaultTheme.radioHoverBg = 'linear-gradient(-180deg, #f2f2f2 0, #dfdfdf 100%)';
DefaultTheme.radioActiveBg = 'linear-gradient(-180deg, #e1e1e1 0, #e1e1e1 100%)';
DefaultTheme.radioBoxShadow = '0 1px 0 0 rgba(0, 0, 0, 0.15), 0 0 0 1px rgba(0, 0, 0, 0.15)';
DefaultTheme.radioBorder = '0 none';
DefaultTheme.radioHoverShadow = '0 1px 0 0 rgba(0, 0, 0, 0.15), 0 0 0 1px rgba(0, 0, 0, 0.2)';
DefaultTheme.radioActiveShadow = '0 -1px 0 0 rgba(0, 0, 0, 0.1), 0 0 0 1px rgba(0, 0, 0, 0.2), inset 0 1px 2px 0 rgba(0, 0, 0, 0.1)';
DefaultTheme.radioFocusShadow = 'none';
DefaultTheme.radioCheckedBgColor = 'transparent';
DefaultTheme.radioCheckedBulletColor = '#404040';
DefaultTheme.radioDisabledShadow = '0 0 0 1px rgba(0, 0, 0, 0.15)';
DefaultTheme.radioLabelDisplay = 'inline-table';
export var DefaultThemeInternal = DefaultTheme;