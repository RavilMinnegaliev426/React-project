import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";

var _dec, _class, _class2, _temp;

import React, { Component } from 'react';
import { locale } from "../../../lib/locale/decorators";
import { Menu } from "../../Menu";
import { MenuItem } from "../../../components/MenuItem";
import { Spinner } from "../../../components/Spinner";
import { MenuSeparator } from "../../../components/MenuSeparator";
import { ComboBoxRequestStatus } from "../CustomComboBoxTypes";
import { CustomComboBoxLocaleHelper } from "../locale";
export var ComboBoxMenu = (_dec = locale('ComboBox', CustomComboBoxLocaleHelper), _dec(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(ComboBoxMenu, _Component);

  function ComboBoxMenu() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.locale = void 0;

    _this.renderItem = function (item, index) {
      // NOTE this is undesireable feature, better
      // to remove it from further versions
      var _this$props = _this.props,
          renderItem = _this$props.renderItem,
          onValueChange = _this$props.onValueChange;

      if (typeof item === 'function' || React.isValidElement(item)) {
        // @ts-ignore
        var element = typeof item === 'function' ? item() : item;
        var props = Object.assign({
          key: index,
          onClick: function onClick() {
            return onValueChange(element.props);
          }
        }, element.props);
        return React.cloneElement(element, props);
      }

      return React.createElement(MenuItem, {
        "data-tid": "ComboBoxMenu__item",
        onClick: function onClick() {
          return onValueChange(item);
        },
        key: index
      }, function (state) {
        return renderItem(item, state);
      });
    };

    return _this;
  }

  var _proto = ComboBoxMenu.prototype;

  _proto.render = function render() {
    var _this$props2 = this.props,
        opened = _this$props2.opened,
        items = _this$props2.items,
        totalCount = _this$props2.totalCount,
        loading = _this$props2.loading,
        refMenu = _this$props2.refMenu,
        _this$props2$renderNo = _this$props2.renderNotFound,
        renderNotFound = _this$props2$renderNo === void 0 ? function () {
      return notFound;
    } : _this$props2$renderNo,
        renderTotalCount = _this$props2.renderTotalCount,
        maxMenuHeight = _this$props2.maxMenuHeight,
        requestStatus = _this$props2.requestStatus;
    var _this$locale = this.locale,
        notFound = _this$locale.notFound,
        errorNetworkButton = _this$locale.errorNetworkButton,
        errorNetworkMessage = _this$locale.errorNetworkMessage;

    if (!opened) {
      return null;
    }

    var renderAddButton = null;

    if (this.props.renderAddButton) {
      renderAddButton = this.props.renderAddButton();
    }

    if (loading && (!items || !items.length)) {
      return React.createElement(Menu, {
        ref: refMenu
      }, React.createElement(MenuItem, {
        disabled: true
      }, React.createElement(Spinner, {
        type: "mini",
        dimmed: true
      })));
    }

    if (items === null && requestStatus === ComboBoxRequestStatus.Failed) {
      return React.createElement(Menu, {
        ref: refMenu,
        maxHeight: maxMenuHeight
      }, React.createElement(MenuItem, {
        disabled: true,
        key: "message"
      }, React.createElement("div", {
        style: {
          maxWidth: 300,
          whiteSpace: 'normal'
        }
      }, errorNetworkMessage)), React.createElement(MenuItem, {
        link: true,
        onClick: this.props.repeatRequest,
        key: "retry"
      }, errorNetworkButton));
    }

    if ((items == null || items.length === 0) && renderNotFound) {
      return React.createElement(Menu, {
        ref: refMenu
      }, renderAddButton ? renderAddButton : React.createElement(MenuItem, {
        disabled: true
      }, renderNotFound()));
    }

    var total = null;

    if (items && renderTotalCount && totalCount && items.length < totalCount) {
      total = React.createElement(MenuItem, {
        disabled: true,
        key: "total"
      }, React.createElement("div", {
        style: {
          fontSize: 12
        }
      }, renderTotalCount(items.length, totalCount)));
    }

    return React.createElement(Menu, {
      "data-tid": "ComboBoxMenu__items",
      ref: refMenu,
      maxHeight: maxMenuHeight
    }, items && items.map(this.renderItem), total, renderAddButton && [React.createElement(MenuSeparator, {
      key: "separator"
    }), renderAddButton]);
  };

  return ComboBoxMenu;
}(Component), _class2.__KONTUR_REACT_UI__ = 'ComboBoxMenu', _class2.defaultProps = {
  repeatRequest: function repeatRequest() {
    return undefined;
  },
  requestStatus: ComboBoxRequestStatus.Unknown
}, _temp)) || _class);