import _extends from "@babel/runtime/helpers/esm/extends";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import { getRandomID } from "../../../lib/utils";
import { RenderInnerContainer } from "../RenderInnerContainer";
export var RenderContainer =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(RenderContainer, _React$Component);

  function RenderContainer(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.domContainer = null;
    _this.rootId = RenderContainer.getRootId();

    if (props.children) {
      _this.mountContainer();
    }

    return _this;
  }

  var _proto = RenderContainer.prototype;

  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
    if (!this.props.children && nextProps.children) {
      this.mountContainer();
    }

    if (this.props.children && !nextProps.children) {
      this.unmountContainer();
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.destroyContainer();
  };

  _proto.render = function render() {
    return React.createElement(RenderInnerContainer, _extends({}, this.props, {
      domContainer: this.domContainer,
      rootId: this.rootId
    }));
  };

  _proto.createContainer = function createContainer() {
    if (!document || !document.body) {
      throw Error('There is no "body" in "document"');
    }

    if (!this.domContainer) {
      var domContainer = document.createElement('div');
      domContainer.setAttribute('class', 'react-ui');
      domContainer.setAttribute('data-rendered-container-id', "" + this.rootId);
      this.domContainer = domContainer;
    }
  };

  _proto.mountContainer = function mountContainer() {
    if (!this.domContainer) {
      this.createContainer();
    }

    if (this.domContainer && this.domContainer.parentNode !== document.body) {
      document.body.appendChild(this.domContainer);

      if (window.ReactTesting) {
        window.ReactTesting.addRenderContainer(this.rootId, this);
      }
    }
  };

  _proto.destroyContainer = function destroyContainer() {
    if (this.domContainer) {
      this.unmountContainer();
      this.domContainer = null;
    }
  };

  _proto.unmountContainer = function unmountContainer() {
    if (this.domContainer && this.domContainer.parentNode) {
      this.domContainer.parentNode.removeChild(this.domContainer);

      if (window.ReactTesting) {
        window.ReactTesting.removeRenderContainer(this.rootId);
      }
    }
  };

  return RenderContainer;
}(React.Component);
RenderContainer.__KONTUR_REACT_UI__ = 'RenderContainer';

RenderContainer.getRootId = function () {
  return getRandomID();
};