import _extends from "@babel/runtime/helpers/esm/extends";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import { isFunctionalComponent } from "../../lib/utils"; // TODO We should output state too

var renderPropsDesc = function renderPropsDesc(props) {
  return Object.keys(props).map(function (key) {
    var value = props[key];

    switch (typeof value) {
      case 'boolean':
        return value ? key : key + ": false";

      case 'string':
        return key + ": \"" + value + "\"";

      case 'object':
        if (React.isValidElement(value)) {
          return React.createElement('span', {}, [key + ": ", value]);
        }

        return key + ": " + JSON.stringify(value);

      default:
        return key + ": " + value;
    }
  }).map(function (node, index, nodes) {
    return React.createElement("span", {
      key: index
    }, node, " ", index + 1 < nodes.length ? ', ' : null);
  });
}; // Known limitation: Don't work when component have `propTypes` static field


export var ComponentTable =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(ComponentTable, _React$Component);

  function ComponentTable() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = ComponentTable.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        _this$props$rows = _this$props.rows,
        rows = _this$props$rows === void 0 ? [] : _this$props$rows,
        _this$props$cols = _this$props.cols,
        cols = _this$props$cols === void 0 ? [] : _this$props$cols,
        presetProps = _this$props.presetProps,
        presetState = _this$props.presetState,
        Component = _this$props.Component;
    return React.createElement("table", {
      style: {
        borderSpacing: 10,
        marginBottom: 20
      }
    }, React.createElement("caption", {
      style: {
        captionSide: 'bottom'
      }
    }, renderPropsDesc(presetProps)), React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null), cols.map(function (_ref, i) {
      var _ref$props = _ref.props,
          colProps = _ref$props === void 0 ? {} : _ref$props;
      return React.createElement("th", {
        style: {
          whiteSpace: 'nowrap'
        },
        key: i
      }, renderPropsDesc(colProps));
    }))), React.createElement("tbody", null, rows.map(function (_ref2, rowIndex) {
      var _ref2$props = _ref2.props,
          rowProps = _ref2$props === void 0 ? {} : _ref2$props,
          _ref2$state = _ref2.state,
          rowState = _ref2$state === void 0 ? {} : _ref2$state;
      return React.createElement("tr", {
        key: rowIndex
      }, React.createElement("td", {
        style: {
          whiteSpace: 'nowrap'
        }
      }, renderPropsDesc(rowProps)), cols.map(function (_ref3, colIndex) {
        var _ref3$props = _ref3.props,
            colProps = _ref3$props === void 0 ? {} : _ref3$props,
            _ref3$state = _ref3.state,
            colState = _ref3$state === void 0 ? {} : _ref3$state;
        return React.createElement("td", {
          key: colIndex
        }, React.createElement(Component, _extends({}, presetProps, rowProps, colProps, {
          ref: // NOTE Call setState from outside is bad practice, but here it needed for test state combinations
          isFunctionalComponent(Component) ? undefined : function (el) {
            return el && el.setState(function (state) {
              return _extends({}, state, {}, presetState, {}, rowState, {}, colState);
            });
          }
        })));
      }));
    })));
  };

  return ComponentTable;
}(React.Component);
ComponentTable.defaultProps = {
  presetProps: {},
  presetState: {}
};