{"version":3,"sources":["ComponentTable.tsx"],"names":["React","isFunctionalComponent","renderPropsDesc","props","Object","keys","map","key","value","isValidElement","createElement","JSON","stringify","node","index","nodes","length","ComponentTable","render","rows","cols","presetProps","presetState","Component","borderSpacing","marginBottom","captionSide","i","colProps","whiteSpace","rowIndex","rowProps","state","rowState","colIndex","colState","undefined","el","setState","defaultProps"],"mappings":"gIAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,qBAAT,QAAuD,cAAvD;;AAEA;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAgCC,KAAhC,EAA8D;AACpF,SAAOC,MAAM,CAACC,IAAP,CAAYF,KAAZ;AACJG,EAAAA,GADI,CACA,UAAAC,GAAG,EAAI;AACV,QAAMC,KAAK,GAAGL,KAAK,CAACI,GAAD,CAAnB;AACA,YAAQ,OAAOC,KAAf;AACE,WAAK,SAAL;AACE,eAAOA,KAAK,GAAGD,GAAH,GAAYA,GAAZ,YAAZ;AACF,WAAK,QAAL;AACE,eAAUA,GAAV,YAAmBC,KAAnB;AACF,WAAK,QAAL;AACE,YAAIR,KAAK,CAACS,cAAN,CAAqBD,KAArB,CAAJ,EAAiC;AAC/B,iBAAOR,KAAK,CAACU,aAAN,CAAoB,MAApB,EAA4B,EAA5B,EAAgC,CAAIH,GAAJ,SAAaC,KAAb,CAAhC,CAAP;AACD;AACD,eAAUD,GAAV,UAAkBI,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAAlB;AACF;AACE,eAAUD,GAAV,UAAkBC,KAAlB,CAXJ;;AAaD,GAhBI;AAiBJF,EAAAA,GAjBI,CAiBA,UAACO,IAAD,EAAOC,KAAP,EAAcC,KAAd;AACH,oCAAM,GAAG,EAAED,KAAX;AACGD,MAAAA,IADH,OACUC,KAAK,GAAG,CAAR,GAAYC,KAAK,CAACC,MAAlB,GAA2B,IAA3B,GAAkC,IAD5C,CADG,GAjBA,CAAP;;;AAsBD,CAvBD;;;;;;;;;;;;;;AAqCA;AACA,WAAaC,cAAb;;;;;;;;;AASSC,EAAAA,MATT,GASE,kBAAgB;AACwD,SAAKf,KAD7D,gCACNgB,IADM,CACNA,IADM,iCACC,EADD,mDACKC,IADL,CACKA,IADL,iCACY,EADZ,oBACgBC,WADhB,eACgBA,WADhB,CAC6BC,WAD7B,eAC6BA,WAD7B,CAC0CC,SAD1C,eAC0CA,SAD1C;AAEd;AACE,qCAAO,KAAK,EAAE,EAAEC,aAAa,EAAE,EAAjB,EAAqBC,YAAY,EAAE,EAAnC,EAAd;AACE,uCAAS,KAAK,EAAE,EAAEC,WAAW,EAAE,QAAf,EAAhB,IAA4CxB,eAAe,CAACmB,WAAD,CAA3D,CADF;AAEE;AACE;AACE,qCADF;AAEGD,MAAAA,IAAI,CAACd,GAAL,CAAS,gBAA2BqB,CAA3B,yBAAGxB,KAAH,CAAUyB,QAAV,2BAAqB,EAArB;AACR,sCAAI,KAAK,EAAE,EAAEC,UAAU,EAAE,QAAd,EAAX,EAAqC,GAAG,EAAEF,CAA1C;AACGzB,UAAAA,eAAe,CAAC0B,QAAD,CADlB,CADQ,GAAT,CAFH,CADF,CAFF;;;;;AAYE;AACGT,MAAAA,IAAI,CAACb,GAAL,CAAS,iBAAiDwB,QAAjD,2BAAG3B,KAAH,CAAU4B,QAAV,4BAAqB,EAArB,mCAAyBC,KAAzB,CAAgCC,QAAhC,4BAA2C,EAA3C;AACR,sCAAI,GAAG,EAAEH,QAAT;AACE,sCAAI,KAAK,EAAE,EAAED,UAAU,EAAE,QAAd,EAAX,IAAsC3B,eAAe,CAAC6B,QAAD,CAArD,CADF;AAEGX,UAAAA,IAAI,CAACd,GAAL,CAAS,iBAAiD4B,QAAjD,2BAAG/B,KAAH,CAAUyB,QAAV,4BAAqB,EAArB,mCAAyBI,KAAzB,CAAgCG,QAAhC,4BAA2C,EAA3C;AACR,0CAAI,GAAG,EAAED,QAAT;;;AAGE,kCAAC,SAAD;AACMb,cAAAA,WADN;AAEMU,cAAAA,QAFN;AAGMH,cAAAA,QAHN;AAIE,gBAAA,GAAG;AACD;AACA3B,gBAAAA,qBAAqB,CAACsB,SAAD,CAArB;AACIa,gBAAAA,SADJ;AAEI,0BAACC,EAAD;AACEA,oBAAAA,EAAE;AACFA,oBAAAA,EAAE,CAACC,QAAH,CAAY,UAACN,KAAD;AACPA,sBAAAA,KADO;AAEPV,sBAAAA,WAFO;AAGPW,sBAAAA,QAHO;AAIPE,sBAAAA,QAJO,GAAZ,CAFF,GARR,IAHF,CADQ,GAAT,CAFH,CADQ,GAAT,CADH,CAZF,CADF;;;;;;;;;;;AA8CD,GAzDH,yBAIUnC,KAAK,CAACuB,SAJhB,EAAaN,c,CAOGsB,Y,GAAe,EAAElB,WAAW,EAAE,EAAf,EAAmBC,WAAW,EAAE,EAAhC,E","sourcesContent":["import React from 'react';\r\n\r\nimport { isFunctionalComponent, DefaultizeProps } from '../lib/utils';\r\n\r\n// TODO We should output state too\r\nconst renderPropsDesc = <P extends Record<string, any>>(props: P): React.ReactNode => {\r\n  return Object.keys(props)\r\n    .map(key => {\r\n      const value = props[key];\r\n      switch (typeof value) {\r\n        case 'boolean':\r\n          return value ? key : `${key}: false`;\r\n        case 'string':\r\n          return `${key}: \"${value}\"`;\r\n        case 'object':\r\n          if (React.isValidElement(value)) {\r\n            return React.createElement('span', {}, [`${key}: `, value]);\r\n          }\r\n          return `${key}: ${JSON.stringify(value)}`;\r\n        default:\r\n          return `${key}: ${value}`;\r\n      }\r\n    })\r\n    .map((node, index, nodes) => (\r\n      <span key={index}>\r\n        {node} {index + 1 < nodes.length ? ', ' : null}\r\n      </span>\r\n    ));\r\n};\r\n\r\nexport type StatePropsCombinations<P, S> = Array<{ props?: Partial<P>; state?: Partial<S> }>;\r\n\r\nexport type StateType<C> = C extends React.Component<any, infer S> | React.ComponentClass<any, infer S> ? S : never;\r\n\r\nexport interface ComponentTableProps<C, P, S> {\r\n  rows?: StatePropsCombinations<P, S>;\r\n  cols?: StatePropsCombinations<P, S>;\r\n  presetProps: DefaultizeProps<C, P>;\r\n  presetState: Partial<S>;\r\n  Component: C;\r\n}\r\n\r\n// Known limitation: Don't work when component have `propTypes` static field\r\nexport class ComponentTable<\r\n  T extends React.Component<any, any, any>,\r\n  C extends React.ComponentType<any>,\r\n  P extends React.ComponentProps<C>\r\n> extends React.Component<\r\n  ComponentTableProps<C extends React.ComponentClass<P, any> ? React.ClassType<P, T, C> : C, P, StateType<C>>\r\n> {\r\n  public static defaultProps = { presetProps: {}, presetState: {} };\r\n\r\n  public render() {\r\n    const { rows = [], cols = [], presetProps, presetState, Component } = this.props;\r\n    return (\r\n      <table style={{ borderSpacing: 10, marginBottom: 20 }}>\r\n        <caption style={{ captionSide: 'bottom' }}>{renderPropsDesc(presetProps)}</caption>\r\n        <thead>\r\n          <tr>\r\n            <th />\r\n            {cols.map(({ props: colProps = {} }, i) => (\r\n              <th style={{ whiteSpace: 'nowrap' }} key={i}>\r\n                {renderPropsDesc(colProps)}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {rows.map(({ props: rowProps = {}, state: rowState = {} }, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              <td style={{ whiteSpace: 'nowrap' }}>{renderPropsDesc(rowProps)}</td>\r\n              {cols.map(({ props: colProps = {}, state: colState = {} }, colIndex) => (\r\n                <td key={colIndex}>\r\n                  {/* Defaultized props incompatible with JSX.LibraryManagedAttributes so just ignore it\r\n                  // @ts-ignore */}\r\n                  <Component\r\n                    {...presetProps}\r\n                    {...rowProps}\r\n                    {...colProps}\r\n                    ref={\r\n                      // NOTE Call setState from outside is bad practice, but here it needed for test state combinations\r\n                      isFunctionalComponent(Component)\r\n                        ? undefined\r\n                        : (el: React.Component<P, StateType<C>>) =>\r\n                            el &&\r\n                            el.setState((state: StateType<C>) => ({\r\n                              ...state,\r\n                              ...presetState,\r\n                              ...rowState,\r\n                              ...colState,\r\n                            }))\r\n                    }\r\n                  />\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n"]}