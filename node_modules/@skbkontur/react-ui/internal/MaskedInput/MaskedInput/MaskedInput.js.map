{"version":3,"sources":["MaskedInput.tsx"],"names":["React","ReactInputMask","ThemeContext","jsStyles","MaskedInput","props","input","theme","reactInputMask","getValue","value","defaultValue","undefined","toString","refInput","refMaskedInput","handleChange","event","target","state","handleUnexpectedInput","setState","onValueChange","onChange","handleFocus","focused","onFocus","handleBlur","onBlur","preprocess","newState","oldState","userInput","options","visibleMaskChars","Array","mask","length","fill","maskChar","split","forEach","char","index","permanents","includes","emptyValue","join","isMaskVisible","alwaysShowMask","onUnexpectedInput","componentDidMount","forceUpdate","UNSAFE_componentWillReceiveProps","nextProps","render","renderMain","hasLeftIcon","hasRightIcon","maxLength","inputProps","container","inputMask","color","slice","Component","__KONTUR_REACT_UI__"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactInputMask, { InputState, MaskOptions } from 'react-input-mask';\r\n\r\nimport { ThemeContext } from '../../lib/theming/ThemeContext';\r\nimport { Theme } from '../../lib/theming/Theme';\r\n\r\nimport { jsStyles } from './MaskedInput.styles';\r\n\r\nexport interface MaskedInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  mask: string;\r\n  maskChar?: string | null;\r\n  formatChars?: { [key: string]: string };\r\n  alwaysShowMask?: boolean;\r\n  hasLeftIcon?: boolean;\r\n  hasRightIcon?: boolean;\r\n  onUnexpectedInput?: (value: string) => void;\r\n  onValueChange?: (value: string) => void;\r\n}\r\n\r\ninterface MaskedInputState {\r\n  value: string;\r\n  emptyValue: string;\r\n  focused: boolean;\r\n}\r\n\r\nexport class MaskedInput extends React.Component<MaskedInputProps, MaskedInputState> {\r\n  public static __KONTUR_REACT_UI__ = 'MaskedInput';\r\n\r\n  public input: HTMLInputElement | null = null;\r\n  private theme!: Theme;\r\n  private reactInputMask: ReactInputMask | null = null;\r\n\r\n  public constructor(props: MaskedInputProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: this.getValue(props),\r\n      emptyValue: '',\r\n      focused: false,\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    if (this.reactInputMask) {\r\n      // FIXME: принудительно вызываем beforeMaskedValueChange, чтобы получить emptyValue\r\n      this.reactInputMask.forceUpdate();\r\n    }\r\n  }\r\n\r\n  public UNSAFE_componentWillReceiveProps(nextProps: MaskedInputProps) {\r\n    if (this.props.value !== nextProps.value) {\r\n      this.setState({\r\n        value: nextProps.value ? nextProps.value.toString() : '',\r\n      });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <ThemeContext.Consumer>\r\n        {theme => {\r\n          this.theme = theme;\r\n          return this.renderMain();\r\n        }}\r\n      </ThemeContext.Consumer>\r\n    );\r\n  }\r\n\r\n  private renderMain() {\r\n    const {\r\n      maskChar,\r\n      alwaysShowMask,\r\n      hasLeftIcon,\r\n      hasRightIcon,\r\n      maxLength,\r\n      onValueChange,\r\n      onUnexpectedInput,\r\n      defaultValue,\r\n      ...inputProps\r\n    } = this.props;\r\n\r\n    return (\r\n      <span className={jsStyles.container()} x-ms-format-detection=\"none\">\r\n        <ReactInputMask\r\n          {...inputProps}\r\n          maskChar={null}\r\n          beforeMaskedValueChange={this.preprocess}\r\n          alwaysShowMask={false}\r\n          onChange={this.handleChange}\r\n          onFocus={this.handleFocus}\r\n          onBlur={this.handleBlur}\r\n          value={this.state.value}\r\n          inputRef={this.refInput}\r\n          ref={this.refMaskedInput}\r\n        />\r\n        {this.isMaskVisible() && (\r\n          <span className={jsStyles.inputMask(this.theme)}>\r\n            <span style={{ color: 'transparent' }}>{this.state.emptyValue.slice(0, this.state.value.length)}</span>\r\n            {this.state.emptyValue.slice(this.state.value.length)}\r\n          </span>\r\n        )}\r\n      </span>\r\n    );\r\n  }\r\n\r\n  private getValue = (props: MaskedInputProps): string => {\r\n    const { value, defaultValue } = props;\r\n\r\n    return value !== undefined ? value.toString() : defaultValue !== undefined ? defaultValue.toString() : '';\r\n  };\r\n\r\n  private refInput = (input: HTMLInputElement | null) => {\r\n    this.input = input;\r\n  };\r\n\r\n  private refMaskedInput = (reactInputMask: ReactInputMask) => {\r\n    this.reactInputMask = reactInputMask;\r\n  };\r\n\r\n  private handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.value === this.state.value) {\r\n      this.handleUnexpectedInput();\r\n    } else {\r\n      this.setState({ value: event.target.value });\r\n      if (this.props.onValueChange) {\r\n        this.props.onValueChange(event.target.value);\r\n      }\r\n      if (this.props.onChange) {\r\n        this.props.onChange(event);\r\n      }\r\n    }\r\n  };\r\n\r\n  private handleFocus = (event: React.FocusEvent<HTMLInputElement>) => {\r\n    this.setState({ focused: true });\r\n\r\n    if (this.props.onFocus) {\r\n      this.props.onFocus(event);\r\n    }\r\n  };\r\n\r\n  private handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\r\n    this.setState({ focused: false });\r\n\r\n    if (this.props.onBlur) {\r\n      this.props.onBlur(event);\r\n    }\r\n  };\r\n\r\n  private preprocess = (\r\n    newState: InputState,\r\n    oldState: InputState,\r\n    userInput: string,\r\n    options: MaskOptions & Pick<MaskedInputProps, 'mask'>,\r\n  ) => {\r\n    const visibleMaskChars = new Array(options.mask.length).fill(this.props.maskChar);\r\n\r\n    if (newState.value !== oldState.value && userInput === null) {\r\n      this.setState({\r\n        value: newState.value,\r\n      });\r\n    }\r\n\r\n    options.mask.split('').forEach((char, index) => {\r\n      if (options.permanents.includes(index)) {\r\n        visibleMaskChars[index] = char;\r\n      }\r\n\r\n      if (newState.value[index]) {\r\n        visibleMaskChars[index] = newState.value[index];\r\n      }\r\n    });\r\n\r\n    const emptyValue = visibleMaskChars.join('');\r\n\r\n    if (this.state.emptyValue !== emptyValue) {\r\n      this.setState({\r\n        emptyValue,\r\n      });\r\n    }\r\n\r\n    return newState;\r\n  };\r\n\r\n  private isMaskVisible = () => this.props.alwaysShowMask || this.state.focused;\r\n\r\n  private handleUnexpectedInput = () => {\r\n    if (this.props.onUnexpectedInput) {\r\n      this.props.onUnexpectedInput(this.state.value);\r\n    }\r\n  };\r\n}\r\n"]}