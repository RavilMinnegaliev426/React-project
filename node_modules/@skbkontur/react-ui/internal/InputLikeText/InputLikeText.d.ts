import React from 'react';
import { MouseDragEventHandler } from '../../lib/events/MouseDrag';
import { InputProps, InputState } from '../../components/Input';
export interface InputLikeTextProps extends InputProps {
    children?: React.ReactNode;
    innerRef?: (el: HTMLElement | null) => void;
    onFocus?: React.FocusEventHandler<HTMLElement>;
    onBlur?: React.FocusEventHandler<HTMLElement>;
    onMouseDragStart?: MouseDragEventHandler;
    onMouseDragEnd?: MouseDragEventHandler;
}
export declare type InputLikeTextState = Omit<InputState, 'polyfillPlaceholder'>;
export declare class InputLikeText extends React.Component<InputLikeTextProps, InputLikeTextState> {
    static __KONTUR_REACT_UI__: string;
    static defaultProps: {
        size: string;
    };
    state: {
        blinking: boolean;
        focused: boolean;
    };
    private theme;
    private node;
    private hiddenInput;
    private lastSelectedInnerNode;
    private frozen;
    private frozenBlur;
    private dragging;
    private focusTimeout;
    private blinkTimeout;
    /**
     * @public
     */
    focus(): void;
    /**
     * @public
     */
    blur(): void;
    /**
     * @public
     */
    blink(): void;
    getNode(): HTMLElement | null;
    selectInnerNode: (node: HTMLElement | null, start?: number, end?: number) => void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    private renderMain;
    private renderLeftIcon;
    private renderRightIcon;
    private renderIcon;
    private renderPrefix;
    private renderSuffix;
    private renderLeftSide;
    private renderRightSide;
    private renderPlaceholder;
    private handleDocumentMouseDown;
    private handleDocumentKeyDown;
    private handleMouseDown;
    private handleKeyDown;
    private handleMouseDragStart;
    private handleMouseDragEnd;
    private handleFocus;
    private handleBlur;
    private hiddenInputRef;
    private innerRef;
    private defrost;
    private getSizeClassName;
}
