import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import cn from 'classnames';
import { isKeyTab, isShortcutPaste } from "../../../lib/events/keyboard/identifiers";
import { MouseDrag } from "../../../lib/events/MouseDrag";
import { isEdge, isIE11 } from "../../../lib/utils";
import { removeAllSelections, selectNodeContents } from "../../../components/DateInput/helpers/SelectionHelpers";
import { jsStyles as jsInputStyles } from "../../../components/Input/Input.styles";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { jsStyles } from "../InputLikeText.styles";
import { HiddenInput } from "../HiddenInput";
export var InputLikeText =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(InputLikeText, _React$Component);

  function InputLikeText() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      blinking: false,
      focused: false
    };
    _this.theme = void 0;
    _this.node = null;
    _this.hiddenInput = null;
    _this.lastSelectedInnerNode = null;
    _this.frozen = false;
    _this.frozenBlur = false;
    _this.dragging = false;
    _this.focusTimeout = void 0;
    _this.blinkTimeout = void 0;

    _this.selectInnerNode = function (node, start, end) {
      if (start === void 0) {
        start = 0;
      }

      if (end === void 0) {
        end = 1;
      }

      if (_this.dragging || !node) {
        return;
      }

      _this.frozen = true;
      _this.frozenBlur = true;
      _this.lastSelectedInnerNode = [node, start, end];
      setTimeout(function () {
        return selectNodeContents(node, start, end);
      }, 0);

      if (_this.focusTimeout) {
        clearInterval(_this.focusTimeout);
      }

      _this.focusTimeout = window.setTimeout(function () {
        return (isIE11 || isEdge) && _this.node && _this.node.focus();
      }, 0);
    };

    _this.renderLeftIcon = function () {
      return _this.renderIcon(_this.props.leftIcon, jsInputStyles.leftIcon());
    };

    _this.renderRightIcon = function () {
      return _this.renderIcon(_this.props.rightIcon, jsInputStyles.rightIcon());
    };

    _this.renderIcon = function (icon, className) {
      if (!icon) {
        return null;
      }

      if (icon instanceof Function) {
        return React.createElement("span", {
          className: className
        }, icon());
      }

      return React.createElement("span", {
        className: cn(className, jsInputStyles.useDefaultColor(_this.theme))
      }, icon);
    };

    _this.renderPrefix = function () {
      var prefix = _this.props.prefix;

      if (!prefix) {
        return null;
      }

      return React.createElement("span", {
        className: jsInputStyles.prefix(_this.theme)
      }, prefix);
    };

    _this.renderSuffix = function () {
      var suffix = _this.props.suffix;

      if (!suffix) {
        return null;
      }

      return React.createElement("span", {
        className: jsInputStyles.suffix(_this.theme)
      }, suffix);
    };

    _this.renderLeftSide = function () {
      var leftIcon = _this.renderLeftIcon();

      var prefix = _this.renderPrefix();

      if (!leftIcon && !prefix) {
        return null;
      }

      return React.createElement("span", {
        className: jsInputStyles.sideContainer()
      }, leftIcon, prefix);
    };

    _this.renderRightSide = function () {
      var rightIcon = _this.renderRightIcon();

      var suffix = _this.renderSuffix();

      if (!rightIcon && !suffix) {
        return null;
      }

      return React.createElement("span", {
        className: jsInputStyles.sideContainer()
      }, rightIcon, suffix);
    };

    _this.renderPlaceholder = function () {
      var _this$props = _this.props,
          children = _this$props.children,
          placeholder = _this$props.placeholder;

      if (!children && placeholder) {
        return React.createElement("span", {
          className: jsInputStyles.placeholder(_this.theme)
        }, placeholder);
      }

      return null;
    };

    _this.handleDocumentMouseDown = function (e) {
      if (_this.state.focused && _this.node && e.target instanceof Node && !_this.node.contains(e.target)) {
        _this.defrost();
      }
    };

    _this.handleDocumentKeyDown = function (e) {
      if (_this.state.focused && isKeyTab(e)) {
        _this.defrost();
      }
    };

    _this.handleMouseDown = function (e) {
      _this.frozen = true;
    };

    _this.handleKeyDown = function (e) {
      if (_this.props.disabled) {
        return;
      }

      if (isIE11 && isShortcutPaste(e) && _this.hiddenInput) {
        _this.frozen = true;
        setTimeout(function () {
          if (_this.lastSelectedInnerNode) {
            var _this2;

            (_this2 = _this).selectInnerNode.apply(_this2, _this.lastSelectedInnerNode);
          }

          if (_this.node) {
            _this.node.focus();
          }
        }, 0);

        _this.hiddenInput.focus();
      }

      if (_this.props.onKeyDown) {
        _this.props.onKeyDown(e);
      }
    };

    _this.handleMouseDragStart = function (e) {
      _this.dragging = true;
      document.documentElement.classList.add(jsStyles.userSelectNone());

      if (_this.props.onMouseDragStart) {
        _this.props.onMouseDragStart(e);
      }
    };

    _this.handleMouseDragEnd = function (e) {
      // Дожидаемся onMouseUp
      setTimeout(function () {
        _this.dragging = false;

        if (_this.props.onMouseDragEnd) {
          _this.props.onMouseDragEnd(e);
        }
      }, 0);
      document.documentElement.classList.remove(jsStyles.userSelectNone());
    };

    _this.handleFocus = function (e) {
      if (_this.props.disabled) {
        if (isIE11) {
          selectNodeContents(document.body, 0, 0);
        }

        return;
      }

      if ((isIE11 || isEdge) && _this.frozen) {
        _this.frozen = false;

        if (_this.state.focused) {
          return;
        }
      }

      _this.setState({
        focused: true
      });

      if (_this.props.onFocus) {
        _this.props.onFocus(e);
      }
    };

    _this.handleBlur = function (e) {
      if (_this.props.disabled) {
        e.stopPropagation();
        return;
      }

      if ((isIE11 || isEdge) && _this.frozenBlur) {
        _this.frozenBlur = false;
        return;
      }

      if ((isIE11 || isEdge) && _this.frozen) {
        return;
      }

      removeAllSelections();

      _this.setState({
        focused: false
      });

      if (_this.props.onBlur) {
        _this.props.onBlur(e);
      }
    };

    _this.hiddenInputRef = function (el) {
      _this.hiddenInput = el;
    };

    _this.innerRef = function (el) {
      if (_this.props.innerRef) {
        _this.props.innerRef(el);
      }

      _this.node = el;
    };

    _this.defrost = function () {
      _this.frozen = false;
      _this.frozenBlur = false;
    };

    _this.getSizeClassName = function () {
      var _ref, _ref2, _ref3;

      switch (_this.props.size) {
        case 'large':
          return _ref = {}, _ref[jsInputStyles.sizeLarge(_this.theme)] = true, _ref[jsInputStyles.sizeLargeFallback(_this.theme)] = isIE11 || isEdge, _ref;

        case 'medium':
          return _ref2 = {}, _ref2[jsInputStyles.sizeMedium(_this.theme)] = true, _ref2[jsInputStyles.sizeMediumFallback(_this.theme)] = isIE11 || isEdge, _ref2;

        case 'small':
        default:
          return _ref3 = {}, _ref3[jsInputStyles.sizeSmall(_this.theme)] = true, _ref3[jsInputStyles.sizeSmallFallback(_this.theme)] = isIE11 || isEdge, _ref3;
      }
    };

    return _this;
  }

  var _proto = InputLikeText.prototype;
  /**
   * @public
   */

  _proto.focus = function focus() {
    if (this.node) {
      this.node.focus();
    }
  }
  /**
   * @public
   */
  ;

  _proto.blur = function blur() {
    if (this.node) {
      this.node.blur();
    }
  }
  /**
   * @public
   */
  ;

  _proto.blink = function blink() {
    var _this3 = this;

    if (this.props.disabled) {
      return;
    }

    this.setState({
      blinking: true
    }, function () {
      _this3.blinkTimeout = window.setTimeout(function () {
        return _this3.setState({
          blinking: false
        });
      }, 150);
    });
  };

  _proto.getNode = function getNode() {
    return this.node;
  };

  _proto.componentDidMount = function componentDidMount() {
    if (this.node) {
      MouseDrag.listen(this.node).onMouseDragStart(this.handleMouseDragStart).onMouseDragEnd(this.handleMouseDragEnd);
    }

    document.addEventListener('mousedown', this.handleDocumentMouseDown);
    document.addEventListener('keydown', this.handleDocumentKeyDown);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.blinkTimeout) {
      clearTimeout(this.blinkTimeout);
    }

    MouseDrag.stop(this.node);
    document.removeEventListener('mousedown', this.handleDocumentMouseDown);
    document.removeEventListener('keydown', this.handleDocumentKeyDown);
  };

  _proto.render = function render() {
    var _this4 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this4.theme = theme;
      return _this4.renderMain();
    });
  };

  _proto.renderMain = function renderMain() {
    var _cn, _cn2;

    var _this$props2 = this.props,
        innerRef = _this$props2.innerRef,
        tabIndex = _this$props2.tabIndex,
        placeholder = _this$props2.placeholder,
        align = _this$props2.align,
        borderless = _this$props2.borderless,
        width = _this$props2.width,
        children = _this$props2.children,
        error = _this$props2.error,
        warning = _this$props2.warning,
        onValueChange = _this$props2.onValueChange,
        disabled = _this$props2.disabled,
        prefix = _this$props2.prefix,
        suffix = _this$props2.suffix,
        leftIcon = _this$props2.leftIcon,
        rightIcon = _this$props2.rightIcon,
        value = _this$props2.value,
        onMouseDragStart = _this$props2.onMouseDragStart,
        onMouseDragEnd = _this$props2.onMouseDragEnd,
        rest = _objectWithoutPropertiesLoose(_this$props2, ["innerRef", "tabIndex", "placeholder", "align", "borderless", "width", "children", "error", "warning", "onValueChange", "disabled", "prefix", "suffix", "leftIcon", "rightIcon", "value", "onMouseDragStart", "onMouseDragEnd"]);

    var _this$state = this.state,
        focused = _this$state.focused,
        blinking = _this$state.blinking;
    var leftSide = this.renderLeftSide();
    var rightSide = this.renderRightSide();
    var className = cn(jsStyles.root(), jsInputStyles.root(this.theme), this.getSizeClassName(), (_cn = {}, _cn[jsInputStyles.borderless()] = !!borderless, _cn[jsStyles.withoutLeftSide()] = !leftSide, _cn[jsInputStyles.focus(this.theme)] = focused, _cn[jsInputStyles.blink(this.theme)] = blinking, _cn[jsInputStyles.warning(this.theme)] = !!warning, _cn[jsInputStyles.error(this.theme)] = !!error, _cn[jsInputStyles.disabled(this.theme)] = !!disabled, _cn[jsInputStyles.focusFallback(this.theme)] = focused && (isIE11 || isEdge), _cn[jsInputStyles.warningFallback(this.theme)] = !!warning && (isIE11 || isEdge), _cn[jsInputStyles.errorFallback(this.theme)] = !!error && (isIE11 || isEdge), _cn));
    var wrapperClass = cn(jsInputStyles.wrapper(), (_cn2 = {}, _cn2[jsStyles.userSelectContain()] = focused, _cn2));
    return React.createElement("span", _extends({}, rest, {
      className: className,
      style: {
        width: width,
        textAlign: align
      },
      tabIndex: disabled ? undefined : 0,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      ref: this.innerRef,
      onKeyDown: this.handleKeyDown,
      onMouseDown: this.handleMouseDown
    }), React.createElement("input", {
      type: "hidden",
      value: value
    }), leftSide, React.createElement("span", {
      className: wrapperClass
    }, React.createElement("span", {
      "data-tid": "InputLikeText__input",
      className: cn(jsStyles.input(), jsInputStyles.input(this.theme))
    }, children), this.renderPlaceholder()), rightSide, isIE11 && focused && React.createElement(HiddenInput, {
      nodeRef: this.hiddenInputRef
    }));
  };

  return InputLikeText;
}(React.Component);
InputLikeText.__KONTUR_REACT_UI__ = 'InputLikeText';
InputLikeText.defaultProps = {
  size: 'small'
};