import _extends from "@babel/runtime/helpers/esm/extends";
import { MAX_ALLOWED_CHARS, MAX_SAFE_DIGITS } from "../constants";
export var CurrencyHelper =
/*#__PURE__*/
function () {
  function CurrencyHelper() {}

  CurrencyHelper.getOptions = function getOptions(options) {
    return _extends({}, CurrencyHelper.defaultOptions, {}, options);
  };

  CurrencyHelper.getInfo = function getInfo(value, options) {
    var raw = CurrencyHelper.unformatString(value);
    var formatted = CurrencyHelper.formatString(value, options);
    var cursorMap = CurrencyHelper.getCursorMap(formatted, options);
    return {
      raw: raw,
      formatted: formatted,
      cursorMap: cursorMap
    };
  };

  CurrencyHelper.getCursorMap = function getCursorMap(formatted, formattingOptions) {
    var options = CurrencyHelper.getOptions(formattingOptions);
    var regexp = new RegExp(options.thousandsDelimiter);
    var cursorMap = [];
    var index = formatted.length;
    var cursor = formatted.length;
    var skip = 0;

    while (index >= 0) {
      cursorMap[index] = cursor;
      var ignoredSymbol = regexp.exec(formatted[index - 1]);

      if (ignoredSymbol) {
        ++skip;
      } else {
        cursor = cursor - skip - 1;
        skip = 0;
      }

      --index;
    }

    return cursorMap;
  };

  CurrencyHelper.format = function format(value, options) {
    if (value == null) {
      return '';
    }

    return CurrencyHelper.formatString(value.toString(), options);
  };

  CurrencyHelper.parse = function parse(value) {
    var cleaned = CurrencyHelper.unformatString(value);

    if (!cleaned) {
      return null;
    }

    var destructed = CurrencyHelper.destructString(cleaned);

    if (!destructed) {
      return null;
    }

    var result = destructed.sign + (destructed.integer || '0') + (destructed.delimiter || '.') + (destructed.fraction || '0');
    return parseFloat(result);
  };

  CurrencyHelper.unformatString = function unformatString(value) {
    return value.replace(/\s/g, '').replace(',', '.').replace(/[\u2212\u002D\uFE63\uFF0D\u2012\u2013\u2014\u2015]/g, '-');
  };

  CurrencyHelper.formatForClipboard = function formatForClipboard(value) {
    return CurrencyHelper.unformatString(value).replace('.', ',');
  };

  CurrencyHelper.formatString = function formatString(value, formattingOptions) {
    var options = CurrencyHelper.getOptions(formattingOptions);
    value = CurrencyHelper.unformatString(value);
    var destructed = CurrencyHelper.destructString(value) || {
      sign: '',
      integer: '',
      delimiter: '',
      fraction: ''
    };
    var sign = destructed.sign,
        integer = destructed.integer,
        delimiter = destructed.delimiter;
    var fraction = destructed.fraction;
    var fractionDigits = fraction.length;

    if (options.hideTrailingZeros) {
      fraction = fraction.replace(/0+$/, '');
      fractionDigits = fraction.length;
    } else if (options.fractionDigits !== null) {
      fractionDigits = options.fractionDigits;
    }

    var parts = [];
    var blockSize = 3;
    var start = (integer.length - 1) % blockSize - blockSize + 1;

    for (var i = start; i < integer.length; i += blockSize) {
      parts.push(integer.substring(Math.max(i, 0), i + blockSize));
    }

    var result = parts.join(options.thousandsDelimiter);

    if (delimiter || fractionDigits) {
      result += ',';
      result += fraction.padEnd(Math.min(fractionDigits, MAX_SAFE_DIGITS), '0');
    }

    if (sign) {
      result = options.minusSign + result;
    }

    return result;
  };

  CurrencyHelper.isValidString = function isValidString(value, options) {
    value = CurrencyHelper.unformatString(value);
    var destructed = CurrencyHelper.destructString(value);

    if (!destructed) {
      return false;
    }

    var sign = destructed.sign,
        integer = destructed.integer,
        delimiter = destructed.delimiter,
        fraction = destructed.fraction;

    if (options.unsigned && sign) {
      return false;
    }

    if (options.fractionDigits === 0 && delimiter) {
      return false;
    }

    var integerDigits = integer === '0' ? 0 : integer.length;
    var fractionDigits = fraction.length;

    if (options.integerDigits != null && integerDigits > options.integerDigits) {
      return false;
    }

    if (options.integerDigits == null && integerDigits > MAX_SAFE_DIGITS - (options.fractionDigits || 0)) {
      return false;
    }

    if (options.fractionDigits != null && fractionDigits > options.fractionDigits) {
      return false;
    }

    return integerDigits + fractionDigits <= MAX_SAFE_DIGITS;
  };

  CurrencyHelper.extractValid = function extractValid(value, options) {
    value = CurrencyHelper.unformatString(value);
    var match = /[-.\d]+/.exec(value);

    if (!match) {
      return '';
    }

    var token = match[0].substr(0, MAX_ALLOWED_CHARS);

    for (var i = token.length; i >= 0; --i) {
      var result = token.substr(0, i);

      if (CurrencyHelper.isValidString(result, options)) {
        return result;
      }
    }

    return '';
  };

  CurrencyHelper.destructString = function destructString(value) {
    var match = /^(-)?(\d*)?(\.)?(\d*)?$/.exec(value);

    if (!match) {
      return null;
    }

    var _match$ = match[1],
        sign = _match$ === void 0 ? '' : _match$,
        _match$2 = match[2],
        integer = _match$2 === void 0 ? '' : _match$2,
        _match$3 = match[3],
        delimiter = _match$3 === void 0 ? '' : _match$3,
        _match$4 = match[4],
        fraction = _match$4 === void 0 ? '' : _match$4;
    return {
      sign: sign,
      integer: integer,
      delimiter: delimiter,
      fraction: fraction
    };
  };

  return CurrencyHelper;
}();
CurrencyHelper.defaultOptions = {
  fractionDigits: null,
  hideTrailingZeros: false,
  thousandsDelimiter: String.fromCharCode(0x2009),
  minusSign: String.fromCharCode(0x2212)
};