{"version":3,"sources":["CurrencyHelper.tsx"],"names":["MAX_ALLOWED_CHARS","MAX_SAFE_DIGITS","CurrencyHelper","getOptions","options","defaultOptions","getInfo","value","raw","unformatString","formatted","formatString","cursorMap","getCursorMap","formattingOptions","regexp","RegExp","thousandsDelimiter","index","length","cursor","skip","ignoredSymbol","exec","format","toString","parse","cleaned","destructed","destructString","result","sign","integer","delimiter","fraction","parseFloat","replace","formatForClipboard","fractionDigits","hideTrailingZeros","parts","blockSize","start","i","push","substring","Math","max","join","padEnd","min","minusSign","isValidString","unsigned","integerDigits","extractValid","match","token","substr","String","fromCharCode"],"mappings":";;;;AAIA,SAASA,iBAAT,EAA4BC,eAA5B,QAAmD,aAAnD;;;;;;;;;;;;;;;;;AAiBA,WAAaC,cAAb;;;;;;;;AAQgBC,EAAAA,UARhB,GAQE,oBAAyBC,OAAzB,EAAyG;AACvG,wBAAYF,cAAc,CAACG,cAA3B,MAA8CD,OAA9C;AACD,GAVH;;AAYgBE,EAAAA,OAZhB,GAYE,iBAAsBC,KAAtB,EAAqCH,OAArC,EAAmG;AACjG,QAAMI,GAAG,GAAGN,cAAc,CAACO,cAAf,CAA8BF,KAA9B,CAAZ;AACA,QAAMG,SAAS,GAAGR,cAAc,CAACS,YAAf,CAA4BJ,KAA5B,EAAmCH,OAAnC,CAAlB;AACA,QAAMQ,SAAS,GAAGV,cAAc,CAACW,YAAf,CAA4BH,SAA5B,EAAuCN,OAAvC,CAAlB;;AAEA,WAAO,EAAEI,GAAG,EAAHA,GAAF,EAAOE,SAAS,EAATA,SAAP,EAAkBE,SAAS,EAATA,SAAlB,EAAP;AACD,GAlBH;;AAoBgBC,EAAAA,YApBhB,GAoBE,sBAA2BH,SAA3B,EAA8CI,iBAA9C,EAAiH;AAC/G,QAAMV,OAAO,GAAGF,cAAc,CAACC,UAAf,CAA0BW,iBAA1B,CAAhB;AACA,QAAMC,MAAM,GAAG,IAAIC,MAAJ,CAAWZ,OAAO,CAACa,kBAAnB,CAAf;AACA,QAAML,SAAoB,GAAG,EAA7B;;AAEA,QAAIM,KAAK,GAAGR,SAAS,CAACS,MAAtB;AACA,QAAIC,MAAM,GAAGV,SAAS,CAACS,MAAvB;AACA,QAAIE,IAAI,GAAG,CAAX;;AAEA,WAAOH,KAAK,IAAI,CAAhB,EAAmB;AACjBN,MAAAA,SAAS,CAACM,KAAD,CAAT,GAAmBE,MAAnB;;AAEA,UAAME,aAAa,GAAGP,MAAM,CAACQ,IAAP,CAAYb,SAAS,CAACQ,KAAK,GAAG,CAAT,CAArB,CAAtB;AACA,UAAII,aAAJ,EAAmB;AACjB,UAAED,IAAF;AACD,OAFD,MAEO;AACLD,QAAAA,MAAM,GAAGA,MAAM,GAAGC,IAAT,GAAgB,CAAzB;AACAA,QAAAA,IAAI,GAAG,CAAP;AACD;AACD,QAAEH,KAAF;AACD;AACD,WAAON,SAAP;AACD,GA1CH;;AA4CgBY,EAAAA,MA5ChB,GA4CE,gBAAqBjB,KAArB,EAA8CH,OAA9C,EAAoG;AAClG,QAAIG,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAO,EAAP;AACD;;AAED,WAAOL,cAAc,CAACS,YAAf,CAA4BJ,KAAK,CAACkB,QAAN,EAA5B,EAA8CrB,OAA9C,CAAP;AACD,GAlDH;;AAoDgBsB,EAAAA,KApDhB,GAoDE,eAAoBnB,KAApB,EAAqD;AACnD,QAAMoB,OAAO,GAAGzB,cAAc,CAACO,cAAf,CAA8BF,KAA9B,CAAhB;AACA,QAAI,CAACoB,OAAL,EAAc;AACZ,aAAO,IAAP;AACD;;AAED,QAAMC,UAAU,GAAG1B,cAAc,CAAC2B,cAAf,CAA8BF,OAA9B,CAAnB;AACA,QAAI,CAACC,UAAL,EAAiB;AACf,aAAO,IAAP;AACD;;AAED,QAAME,MAAM;AACVF,IAAAA,UAAU,CAACG,IAAX,IAAmBH,UAAU,CAACI,OAAX,IAAsB,GAAzC,KAAiDJ,UAAU,CAACK,SAAX,IAAwB,GAAzE,KAAiFL,UAAU,CAACM,QAAX,IAAuB,GAAxG,CADF;;AAGA,WAAOC,UAAU,CAACL,MAAD,CAAjB;AACD,GAnEH;;AAqEgBrB,EAAAA,cArEhB,GAqEE,wBAA6BF,KAA7B,EAAoD;AAClD,WAAOA,KAAK;AACT6B,IAAAA,OADI,CACI,KADJ,EACW,EADX;AAEJA,IAAAA,OAFI,CAEI,GAFJ,EAES,GAFT;AAGJA,IAAAA,OAHI,CAGI,qDAHJ,EAG2D,GAH3D,CAAP;AAID,GA1EH;;AA4EgBC,EAAAA,kBA5EhB,GA4EE,4BAAiC9B,KAAjC,EAAwD;AACtD,WAAOL,cAAc,CAACO,cAAf,CAA8BF,KAA9B,EAAqC6B,OAArC,CAA6C,GAA7C,EAAkD,GAAlD,CAAP;AACD,GA9EH;;AAgFgBzB,EAAAA,YAhFhB,GAgFE,sBAA2BJ,KAA3B,EAA0CO,iBAA1C,EAA0G;AACxG,QAAMV,OAAO,GAAGF,cAAc,CAACC,UAAf,CAA0BW,iBAA1B,CAAhB;AACAP,IAAAA,KAAK,GAAGL,cAAc,CAACO,cAAf,CAA8BF,KAA9B,CAAR;AACA,QAAMqB,UAAU,GAAG1B,cAAc,CAAC2B,cAAf,CAA8BtB,KAA9B,KAAwC,EAAEwB,IAAI,EAAE,EAAR,EAAYC,OAAO,EAAE,EAArB,EAAyBC,SAAS,EAAE,EAApC,EAAwCC,QAAQ,EAAE,EAAlD,EAA3D,CAHwG;;AAKhGH,IAAAA,IALgG,GAKnEH,UALmE,CAKhGG,IALgG,CAK1FC,OAL0F,GAKnEJ,UALmE,CAK1FI,OAL0F,CAKjFC,SALiF,GAKnEL,UALmE,CAKjFK,SALiF;AAMxG,QAAIC,QAAQ,GAAGN,UAAU,CAACM,QAA1B;AACA,QAAII,cAAc,GAAGJ,QAAQ,CAACf,MAA9B;;AAEA,QAAIf,OAAO,CAACmC,iBAAZ,EAA+B;AAC7BL,MAAAA,QAAQ,GAAGA,QAAQ,CAACE,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,CAAX;AACAE,MAAAA,cAAc,GAAGJ,QAAQ,CAACf,MAA1B;AACD,KAHD,MAGO,IAAIf,OAAO,CAACkC,cAAR,KAA2B,IAA/B,EAAqC;AAC1CA,MAAAA,cAAc,GAAGlC,OAAO,CAACkC,cAAzB;AACD;;AAED,QAAME,KAAK,GAAG,EAAd;;AAEA,QAAMC,SAAS,GAAG,CAAlB;AACA,QAAMC,KAAK,GAAI,CAACV,OAAO,CAACb,MAAR,GAAiB,CAAlB,IAAuBsB,SAAxB,GAAqCA,SAArC,GAAiD,CAA/D;AACA,SAAK,IAAIE,CAAC,GAAGD,KAAb,EAAoBC,CAAC,GAAGX,OAAO,CAACb,MAAhC,EAAwCwB,CAAC,IAAIF,SAA7C,EAAwD;AACtDD,MAAAA,KAAK,CAACI,IAAN,CAAWZ,OAAO,CAACa,SAAR,CAAkBC,IAAI,CAACC,GAAL,CAASJ,CAAT,EAAY,CAAZ,CAAlB,EAAkCA,CAAC,GAAGF,SAAtC,CAAX;AACD;;AAED,QAAIX,MAAM,GAAGU,KAAK,CAACQ,IAAN,CAAW5C,OAAO,CAACa,kBAAnB,CAAb;;AAEA,QAAIgB,SAAS,IAAIK,cAAjB,EAAiC;AAC/BR,MAAAA,MAAM,IAAI,GAAV;AACAA,MAAAA,MAAM,IAAII,QAAQ,CAACe,MAAT,CAAgBH,IAAI,CAACI,GAAL,CAASZ,cAAT,EAAyBrC,eAAzB,CAAhB,EAA2D,GAA3D,CAAV;AACD;;AAED,QAAI8B,IAAJ,EAAU;AACRD,MAAAA,MAAM,GAAG1B,OAAO,CAAC+C,SAAR,GAAoBrB,MAA7B;AACD;;AAED,WAAOA,MAAP;AACD,GApHH;;AAsHgBsB,EAAAA,aAtHhB,GAsHE,uBAA4B7C,KAA5B,EAA2CH,OAA3C,EAAoE;AAClEG,IAAAA,KAAK,GAAGL,cAAc,CAACO,cAAf,CAA8BF,KAA9B,CAAR;AACA,QAAMqB,UAAU,GAAG1B,cAAc,CAAC2B,cAAf,CAA8BtB,KAA9B,CAAnB;;AAEA,QAAI,CAACqB,UAAL,EAAiB;AACf,aAAO,KAAP;AACD,KANiE;;AAQ1DG,IAAAA,IAR0D,GAQnBH,UARmB,CAQ1DG,IAR0D,CAQpDC,OARoD,GAQnBJ,UARmB,CAQpDI,OARoD,CAQ3CC,SAR2C,GAQnBL,UARmB,CAQ3CK,SAR2C,CAQhCC,QARgC,GAQnBN,UARmB,CAQhCM,QARgC;;AAUlE,QAAI9B,OAAO,CAACiD,QAAR,IAAoBtB,IAAxB,EAA8B;AAC5B,aAAO,KAAP;AACD;;AAED,QAAI3B,OAAO,CAACkC,cAAR,KAA2B,CAA3B,IAAgCL,SAApC,EAA+C;AAC7C,aAAO,KAAP;AACD;;AAED,QAAMqB,aAAa,GAAGtB,OAAO,KAAK,GAAZ,GAAkB,CAAlB,GAAsBA,OAAO,CAACb,MAApD;AACA,QAAMmB,cAAc,GAAGJ,QAAQ,CAACf,MAAhC;;AAEA,QAAIf,OAAO,CAACkD,aAAR,IAAyB,IAAzB,IAAiCA,aAAa,GAAGlD,OAAO,CAACkD,aAA7D,EAA4E;AAC1E,aAAO,KAAP;AACD;;AAED,QAAIlD,OAAO,CAACkD,aAAR,IAAyB,IAAzB,IAAiCA,aAAa,GAAGrD,eAAe,IAAIG,OAAO,CAACkC,cAAR,IAA0B,CAA9B,CAApE,EAAsG;AACpG,aAAO,KAAP;AACD;;AAED,QAAIlC,OAAO,CAACkC,cAAR,IAA0B,IAA1B,IAAkCA,cAAc,GAAGlC,OAAO,CAACkC,cAA/D,EAA+E;AAC7E,aAAO,KAAP;AACD;;AAED,WAAOgB,aAAa,GAAGhB,cAAhB,IAAkCrC,eAAzC;AACD,GAxJH;;AA0JgBsD,EAAAA,YA1JhB,GA0JE,sBAA2BhD,KAA3B,EAA0CH,OAA1C,EAA2E;AACzEG,IAAAA,KAAK,GAAGL,cAAc,CAACO,cAAf,CAA8BF,KAA9B,CAAR;;AAEA,QAAMiD,KAAK,GAAG,UAAUjC,IAAV,CAAehB,KAAf,CAAd;;AAEA,QAAI,CAACiD,KAAL,EAAY;AACV,aAAO,EAAP;AACD;;AAED,QAAMC,KAAK,GAAGD,KAAK,CAAC,CAAD,CAAL,CAASE,MAAT,CAAgB,CAAhB,EAAmB1D,iBAAnB,CAAd;;AAEA,SAAK,IAAI2C,CAAC,GAAGc,KAAK,CAACtC,MAAnB,EAA2BwB,CAAC,IAAI,CAAhC,EAAmC,EAAEA,CAArC,EAAwC;AACtC,UAAMb,MAAM,GAAG2B,KAAK,CAACC,MAAN,CAAa,CAAb,EAAgBf,CAAhB,CAAf;AACA,UAAIzC,cAAc,CAACkD,aAAf,CAA6BtB,MAA7B,EAAqC1B,OAArC,CAAJ,EAAmD;AACjD,eAAO0B,MAAP;AACD;AACF;;AAED,WAAO,EAAP;AACD,GA7KH;;AA+KgBD,EAAAA,cA/KhB,GA+KE,wBAA6BtB,KAA7B,EAA4C;AAC1C,QAAMiD,KAAK,GAAG,0BAA0BjC,IAA1B,CAA+BhB,KAA/B,CAAd;AACA,QAAI,CAACiD,KAAL,EAAY;AACV,aAAO,IAAP;AACD,KAJyC;AAKyBA,IAAAA,KALzB,IAKjCzB,IALiC,wBAK1B,EAL0B,sBAKyByB,KALzB,IAKtBxB,OALsB,yBAKZ,EALY,uBAKyBwB,KALzB,IAKRvB,SALQ,yBAKI,EALJ,uBAKyBuB,KALzB,IAKQtB,QALR,yBAKmB,EALnB;AAM1C,WAAO,EAAEH,IAAI,EAAJA,IAAF,EAAQC,OAAO,EAAPA,OAAR,EAAiBC,SAAS,EAATA,SAAjB,EAA4BC,QAAQ,EAARA,QAA5B,EAAP;AACD,GAtLH,2BAAahC,c,CACGG,c,GAAmD,EAC/DiC,cAAc,EAAE,IAD+C,EAE/DC,iBAAiB,EAAE,KAF4C,EAG/DtB,kBAAkB,EAAE0C,MAAM,CAACC,YAAP,CAAoB,MAApB,CAH2C,EAI/DT,SAAS,EAAEQ,MAAM,CAACC,YAAP,CAAoB,MAApB,CAJoD,E","sourcesContent":["import { Nullable } from '../../typings/utility-types';\r\n\r\nimport { DecimalOptions } from './CurrencyInputHelper';\r\nimport { CursorMap } from './CursorHelper';\r\nimport { MAX_ALLOWED_CHARS, MAX_SAFE_DIGITS } from './constants';\r\n\r\nexport interface DecimalFormattingOptions {\r\n  fractionDigits?: Nullable<number>;\r\n  hideTrailingZeros?: boolean;\r\n  thousandsDelimiter?: string;\r\n  minusSign?: string;\r\n}\r\n\r\ntype DecimalFormattingOptionsInternal = Required<DecimalFormattingOptions>;\r\n\r\nexport interface FormattingInfo {\r\n  raw: string;\r\n  formatted: string;\r\n  cursorMap: CursorMap;\r\n}\r\n\r\nexport class CurrencyHelper {\r\n  public static defaultOptions: DecimalFormattingOptionsInternal = {\r\n    fractionDigits: null,\r\n    hideTrailingZeros: false,\r\n    thousandsDelimiter: String.fromCharCode(0x2009),\r\n    minusSign: String.fromCharCode(0x2212),\r\n  };\r\n\r\n  public static getOptions(options?: Nullable<DecimalFormattingOptions>): DecimalFormattingOptionsInternal {\r\n    return { ...CurrencyHelper.defaultOptions, ...options };\r\n  }\r\n\r\n  public static getInfo(value: string, options?: Nullable<DecimalFormattingOptions>): FormattingInfo {\r\n    const raw = CurrencyHelper.unformatString(value);\r\n    const formatted = CurrencyHelper.formatString(value, options);\r\n    const cursorMap = CurrencyHelper.getCursorMap(formatted, options);\r\n\r\n    return { raw, formatted, cursorMap };\r\n  }\r\n\r\n  public static getCursorMap(formatted: string, formattingOptions?: Nullable<DecimalFormattingOptions>): CursorMap {\r\n    const options = CurrencyHelper.getOptions(formattingOptions);\r\n    const regexp = new RegExp(options.thousandsDelimiter);\r\n    const cursorMap: CursorMap = [];\r\n\r\n    let index = formatted.length;\r\n    let cursor = formatted.length;\r\n    let skip = 0;\r\n\r\n    while (index >= 0) {\r\n      cursorMap[index] = cursor;\r\n\r\n      const ignoredSymbol = regexp.exec(formatted[index - 1]);\r\n      if (ignoredSymbol) {\r\n        ++skip;\r\n      } else {\r\n        cursor = cursor - skip - 1;\r\n        skip = 0;\r\n      }\r\n      --index;\r\n    }\r\n    return cursorMap;\r\n  }\r\n\r\n  public static format(value: Nullable<number>, options?: Nullable<DecimalFormattingOptions>): string {\r\n    if (value == null) {\r\n      return '';\r\n    }\r\n\r\n    return CurrencyHelper.formatString(value.toString(), options);\r\n  }\r\n\r\n  public static parse(value: string): Nullable<number> {\r\n    const cleaned = CurrencyHelper.unformatString(value);\r\n    if (!cleaned) {\r\n      return null;\r\n    }\r\n\r\n    const destructed = CurrencyHelper.destructString(cleaned);\r\n    if (!destructed) {\r\n      return null;\r\n    }\r\n\r\n    const result =\r\n      destructed.sign + (destructed.integer || '0') + (destructed.delimiter || '.') + (destructed.fraction || '0');\r\n\r\n    return parseFloat(result);\r\n  }\r\n\r\n  public static unformatString(value: string): string {\r\n    return value\r\n      .replace(/\\s/g, '')\r\n      .replace(',', '.')\r\n      .replace(/[\\u2212\\u002D\\uFE63\\uFF0D\\u2012\\u2013\\u2014\\u2015]/g, '-');\r\n  }\r\n\r\n  public static formatForClipboard(value: string): string {\r\n    return CurrencyHelper.unformatString(value).replace('.', ',');\r\n  }\r\n\r\n  public static formatString(value: string, formattingOptions?: Nullable<DecimalFormattingOptions>): string {\r\n    const options = CurrencyHelper.getOptions(formattingOptions);\r\n    value = CurrencyHelper.unformatString(value);\r\n    const destructed = CurrencyHelper.destructString(value) || { sign: '', integer: '', delimiter: '', fraction: '' };\r\n\r\n    const { sign, integer, delimiter } = destructed;\r\n    let fraction = destructed.fraction;\r\n    let fractionDigits = fraction.length;\r\n\r\n    if (options.hideTrailingZeros) {\r\n      fraction = fraction.replace(/0+$/, '');\r\n      fractionDigits = fraction.length;\r\n    } else if (options.fractionDigits !== null) {\r\n      fractionDigits = options.fractionDigits;\r\n    }\r\n\r\n    const parts = [];\r\n\r\n    const blockSize = 3;\r\n    const start = ((integer.length - 1) % blockSize) - blockSize + 1;\r\n    for (let i = start; i < integer.length; i += blockSize) {\r\n      parts.push(integer.substring(Math.max(i, 0), i + blockSize));\r\n    }\r\n\r\n    let result = parts.join(options.thousandsDelimiter);\r\n\r\n    if (delimiter || fractionDigits) {\r\n      result += ',';\r\n      result += fraction.padEnd(Math.min(fractionDigits, MAX_SAFE_DIGITS), '0');\r\n    }\r\n\r\n    if (sign) {\r\n      result = options.minusSign + result;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public static isValidString(value: string, options: DecimalOptions) {\r\n    value = CurrencyHelper.unformatString(value);\r\n    const destructed = CurrencyHelper.destructString(value);\r\n\r\n    if (!destructed) {\r\n      return false;\r\n    }\r\n\r\n    const { sign, integer, delimiter, fraction } = destructed;\r\n\r\n    if (options.unsigned && sign) {\r\n      return false;\r\n    }\r\n\r\n    if (options.fractionDigits === 0 && delimiter) {\r\n      return false;\r\n    }\r\n\r\n    const integerDigits = integer === '0' ? 0 : integer.length;\r\n    const fractionDigits = fraction.length;\r\n\r\n    if (options.integerDigits != null && integerDigits > options.integerDigits) {\r\n      return false;\r\n    }\r\n\r\n    if (options.integerDigits == null && integerDigits > MAX_SAFE_DIGITS - (options.fractionDigits || 0)) {\r\n      return false;\r\n    }\r\n\r\n    if (options.fractionDigits != null && fractionDigits > options.fractionDigits) {\r\n      return false;\r\n    }\r\n\r\n    return integerDigits + fractionDigits <= MAX_SAFE_DIGITS;\r\n  }\r\n\r\n  public static extractValid(value: string, options: DecimalOptions): string {\r\n    value = CurrencyHelper.unformatString(value);\r\n\r\n    const match = /[-.\\d]+/.exec(value);\r\n\r\n    if (!match) {\r\n      return '';\r\n    }\r\n\r\n    const token = match[0].substr(0, MAX_ALLOWED_CHARS);\r\n\r\n    for (let i = token.length; i >= 0; --i) {\r\n      const result = token.substr(0, i);\r\n      if (CurrencyHelper.isValidString(result, options)) {\r\n        return result;\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  public static destructString(value: string) {\r\n    const match = /^(-)?(\\d*)?(\\.)?(\\d*)?$/.exec(value);\r\n    if (!match) {\r\n      return null;\r\n    }\r\n    const [, sign = '', integer = '', delimiter = '', fraction = ''] = match;\r\n    return { sign, integer, delimiter, fraction };\r\n  }\r\n}\r\n"]}