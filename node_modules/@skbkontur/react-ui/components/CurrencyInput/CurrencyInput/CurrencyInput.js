import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import PropTypes from 'prop-types';
import warning from 'warning';
import { Input } from "../../Input";
import { MAX_SAFE_DIGITS } from "../constants";
import { SelectionHelper } from "../SelectionHelper";
import { CurrencyHelper } from "../CurrencyHelper";
import { CurrencyInputHelper } from "../CurrencyInputHelper";
import { CURRENCY_INPUT_ACTIONS, extractAction } from "../CurrencyInputKeyboardActions";
/**
                                                                                         * Поле для денежных сумм (и других числовых значений).
                                                                                         * Принимает любые свойства `Input`.
                                                                                         *
                                                                                         * Максимальная длина числа - **15 цифр** (с десятичным разделителем в любом месте).
                                                                                         * <br/>
                                                                                         * Если `fractionDigits=15`, то в целой части допускается **0**.
                                                                                         */

export var CurrencyInput =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(CurrencyInput, _React$Component);

  function CurrencyInput() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = _extends({}, _this.getState(_this.props.value, _this.props.fractionDigits, _this.props.hideTrailingZeros), {
      focused: false
    });
    _this.input = void 0;
    _this.tempSelectionForOnChange = SelectionHelper.fromPosition(0);

    _this.focus = function () {
      if (_this.input) {
        _this.input.focus();
      }
    };

    _this.blur = function () {
      if (_this.input) {
        _this.input.blur();
      }
    };

    _this.handleMouseUp = function (event) {
      var selection = getInputSelection(event.target);
      var normilized = CurrencyInputHelper.normalizeSelection(_this.state.formatted, selection);

      _this.setState({
        selection: normilized
      });
    };

    _this.handleKeyDown = function (event) {
      var selection = _this.getSelection(event.target);

      _this.tempSelectionForOnChange = selection;

      if (_this.props.onKeyDown) {
        _this.props.onKeyDown(event);

        if (event.defaultPrevented) {
          return;
        }
      }

      var action = extractAction(event);

      if (action === CURRENCY_INPUT_ACTIONS.Ignore) {
        return;
      }

      if (action !== CURRENCY_INPUT_ACTIONS.Unknown) {
        event.preventDefault();
      }

      switch (action) {
        case CURRENCY_INPUT_ACTIONS.Submit:
          {
            if (_this.props.onSubmit) {
              _this.props.onSubmit();
            }

            return;
          }

        case CURRENCY_INPUT_ACTIONS.Backspace:
          {
            _this.inputValue(CurrencyInputHelper.moveCursor(_this.state.formatted, selection, -1), selection.end, '');

            return;
          }

        case CURRENCY_INPUT_ACTIONS.Delete:
          {
            _this.inputValue(selection.start, CurrencyInputHelper.moveCursor(_this.state.formatted, selection, +1), '');

            return;
          }

        case CURRENCY_INPUT_ACTIONS.MoveCursorLeft:
          {
            _this.moveCursor(selection, -1);

            return;
          }

        case CURRENCY_INPUT_ACTIONS.MoveCursorRight:
          {
            _this.moveCursor(selection, +1);

            return;
          }

        case CURRENCY_INPUT_ACTIONS.Home:
          {
            _this.setState({
              selection: SelectionHelper.fromPosition(0)
            });

            return;
          }

        case CURRENCY_INPUT_ACTIONS.End:
          {
            var end = _this.state.formatted.length;

            _this.setState({
              selection: SelectionHelper.fromPosition(end)
            });

            return;
          }

        case CURRENCY_INPUT_ACTIONS.ExtendSelectionLeft:
          {
            _this.extendSelection(selection, -1);

            return;
          }

        case CURRENCY_INPUT_ACTIONS.ExtendSelectionRight:
          {
            _this.extendSelection(selection, +1);

            return;
          }

        case CURRENCY_INPUT_ACTIONS.FullSelection:
          {
            _this.setState({
              selection: SelectionHelper.forward(0, _this.state.formatted.length)
            });

            return;
          }

        case CURRENCY_INPUT_ACTIONS.ExtendSelectionToStart:
          {
            _this.setState({
              selection: SelectionHelper.backward(0, selection.start)
            });

            return;
          }

        case CURRENCY_INPUT_ACTIONS.ExtendSelectionToEnd:
          {
            var inputEnd = _this.state.formatted.length;

            _this.setState({
              selection: SelectionHelper.forward(selection.start, inputEnd)
            });

            return;
          }
      }
    };

    _this.getSelection = function (input) {
      var selection = getInputSelection(input);
      return {
        start: selection.start,
        end: selection.end,
        direction: _this.state.selection.direction
      };
    };

    _this.moveCursor = function (selection, step) {
      var position = CurrencyInputHelper.moveCursor(_this.state.formatted, selection, step);

      _this.setState({
        selection: SelectionHelper.fromPosition(position)
      });
    };

    _this.extendSelection = function (selection, step) {
      var extended = CurrencyInputHelper.extendSelection(_this.state.formatted, selection, step);

      _this.setState({
        selection: extended
      });
    };

    _this.inputValue = function (start, end, value) {
      var result = CurrencyInputHelper.safeInsert(_this.state.formatted, start, end, value, {
        integerDigits: _this.props.integerDigits,
        fractionDigits: _this.props.fractionDigits,
        unsigned: !_this.props.signed
      });

      if (result) {
        var formatted = result.value;
        var selection = SelectionHelper.fromPosition(result.position);

        _this.setState({
          formatted: formatted,
          selection: selection
        }, function () {
          var parsedValue = CurrencyHelper.parse(formatted);

          if (_this.props.value !== parsedValue) {
            _this.props.onValueChange(parsedValue);
          }
        });

        return true;
      }

      if (_this.input) {
        _this.input.blink();
      }

      return false;
    };

    _this.getOnChangeDelta = function (value) {
      var selection = _this.tempSelectionForOnChange;
      var oldValue = _this.state.formatted;

      if (selection.start !== selection.end) {
        return value.substring(selection.start, value.length - (oldValue.length - selection.end));
      } else if (value.length > oldValue.length) {
        return value.substr(selection.start, value.length - oldValue.length);
      }

      return null;
    };

    _this.handleValueChange = function (value) {
      var selection = _this.tempSelectionForOnChange;

      var delta = _this.getOnChangeDelta(value);

      if (delta != null && !_this.inputValue(selection.start, selection.end, delta)) {
        _this.setState({
          selection: selection
        });
      }
    };

    _this.handlePaste = function (event) {
      var data = event.clipboardData.getData('text');

      var selection = _this.getSelection(event.target);

      _this.inputValue(selection.start, selection.end, data);

      event.preventDefault();
    };

    _this.handleCopy = function (event) {
      var selection = _this.getSelection(event.target);

      if (selection.start !== selection.end) {
        var substring = _this.state.formatted.substring(selection.start, selection.end);

        var data = CurrencyHelper.formatForClipboard(substring);
        event.clipboardData.setData('text', data);
      }

      event.preventDefault();
    };

    _this.handleCut = function (event) {
      var selection = _this.getSelection(event.target);

      if (selection.start !== selection.end) {
        var substring = _this.state.formatted.substring(selection.start, selection.end);

        var data = CurrencyHelper.formatForClipboard(substring);
        event.clipboardData.setData('text', data);

        _this.inputValue(selection.start, selection.end, '');
      }

      event.preventDefault();
    };

    _this.handleFocus = function (event) {
      var _event$target = event.target,
          selectionStart = _event$target.selectionStart,
          selectionEnd = _event$target.selectionEnd,
          selectionDirection = _event$target.selectionDirection;
      var valueLenght = event.target.value.length;
      var selection = {
        start: selectionStart !== selectionEnd ? selectionStart || 0 : selectionStart || valueLenght,
        end: selectionEnd !== selectionStart ? selectionEnd || 0 : selectionEnd || valueLenght,
        direction: selectionDirection || 'none'
      };

      _this.setState({
        focused: true,
        selection: selection
      });

      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }
    };

    _this.handleBlur = function (event) {
      var value = CurrencyHelper.parse(_this.state.formatted);

      _this.setState(_extends({}, _this.getState(value, _this.props.fractionDigits, _this.props.hideTrailingZeros), {
        focused: false
      }));

      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }
    };

    _this.refInput = function (element) {
      _this.input = element;
    };

    return _this;
  }

  var _proto = CurrencyInput.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this$props = this.props,
        maxLength = _this$props.maxLength,
        integerDigits = _this$props.integerDigits,
        fractionDigits = _this$props.fractionDigits;
    warning(maxLength === undefined, "[CurrencyInput]: Prop 'maxLength' has been deprecated. See 'integerDigits' and 'fractionDigits'");
    warning((integerDigits || 0) + (fractionDigits || 0) <= MAX_SAFE_DIGITS, "[CurrencyInput]: Sum of 'integerDigits' and 'fractionDigits' exceeds " + MAX_SAFE_DIGITS + "." + "\nSee https://tech.skbkontur.ru/react-ui/#/CurrencyInput?id=why15");
  };

  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
    var value = nextProps.value,
        fractionDigits = nextProps.fractionDigits,
        hideTrailingZeros = nextProps.hideTrailingZeros;

    if (value !== CurrencyHelper.parse(this.state.formatted) || fractionDigits !== this.props.fractionDigits) {
      var state = this.getState(value, fractionDigits, hideTrailingZeros);
      this.setState(state);
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    if (this.state.focused && this.input) {
      var _this$state$selection = this.state.selection,
          start = _this$state$selection.start,
          end = _this$state$selection.end;
      this.input.setSelectionRange(start, end);
    }
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        fractionDigits = _this$props2.fractionDigits,
        signed = _this$props2.signed,
        onSubmit = _this$props2.onSubmit,
        integerDigits = _this$props2.integerDigits,
        hideTrailingZeros = _this$props2.hideTrailingZeros,
        rest = _objectWithoutPropertiesLoose(_this$props2, ["fractionDigits", "signed", "onSubmit", "integerDigits", "hideTrailingZeros"]);

    var placeholder = this.props.placeholder == null ? CurrencyHelper.format(0, {
      fractionDigits: fractionDigits,
      hideTrailingZeros: hideTrailingZeros
    }) : this.props.placeholder;
    return React.createElement(Input, _extends({}, rest, {
      value: this.state.formatted,
      onBlur: this.handleBlur,
      onFocus: this.handleFocus,
      onMouseUp: this.handleMouseUp,
      onKeyDown: this.handleKeyDown,
      onValueChange: this.handleValueChange,
      onPaste: this.handlePaste,
      onCopy: this.handleCopy,
      onCut: this.handleCut,
      onMouseEnter: this.props.onMouseEnter,
      onMouseLeave: this.props.onMouseLeave,
      onMouseOver: this.props.onMouseOver,
      ref: this.refInput,
      placeholder: this.state.focused ? '' : placeholder
    }));
  }
  /**
   * @public
   */
  ;

  _proto.getState = function getState(value, fractionDigits, hideTrailingZeros) {
    return {
      formatted: CurrencyHelper.format(value, {
        fractionDigits: fractionDigits,
        hideTrailingZeros: hideTrailingZeros
      }),
      selection: SelectionHelper.fromPosition(0)
    };
  };

  return CurrencyInput;
}(React.Component);
CurrencyInput.__KONTUR_REACT_UI__ = 'CurrencyInput';
CurrencyInput.propTypes = {
  align: PropTypes.oneOf(['left', 'center', 'right']),
  autoFocus: PropTypes.bool,
  borderless: PropTypes.bool,
  disabled: PropTypes.bool,
  error: PropTypes.bool,
  fractionDigits: PropTypes.number,
  hideTrailingZeros: PropTypes.bool,
  leftIcon: PropTypes.element,
  placeholder: PropTypes.string,
  signed: PropTypes.bool,
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  value: PropTypes.number,
  warning: PropTypes.bool,
  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  onBlur: PropTypes.func,
  onValueChange: PropTypes.func.isRequired,
  onFocus: PropTypes.func,
  onMouseEnter: PropTypes.func,
  onMouseLeave: PropTypes.func,
  onMouseOver: PropTypes.func,
  onSubmit: PropTypes.func
};
CurrencyInput.defaultProps = {
  align: 'right',
  fractionDigits: 2,
  hideTrailingZeros: false,
  value: null
};

function getInputSelection(input) {
  if (!(input instanceof HTMLInputElement)) {
    throw new Error('input is not HTMLInputElement');
  }

  return {
    start: input.selectionStart,
    end: input.selectionEnd,
    direction: input.selectionDirection
  };
}