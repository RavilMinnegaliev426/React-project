{"version":3,"sources":["CurrencyInputKeyboardActions.tsx"],"names":["Keyboard","KeyboardActionExctracterBuilder","CURRENCY_INPUT_ACTIONS","Unknown","Ignore","MoveCursorLeft","MoveCursorRight","Home","End","ExtendSelectionLeft","ExtendSelectionRight","FullSelection","ExtendSelectionToStart","ExtendSelectionToEnd","Backspace","Delete","Submit","extractAction","add","isKeyEnter","isModShift","isKeyArrowLeft","isKeyArrowRight","isShortcutSelectAll","isKeyHome","isKeyEnd","isUnmodified","isKeyBackspace","isKeyDelete","e","isModified","isKeyTab","build"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,uCAA1B;AACA,SAASC,+BAAT,QAAgD,iCAAhD;;AAEA,OAAO,IAAMC,sBAAsB,GAAG;AACpCC,EAAAA,OAAO,EAAE,CAD2B;AAEpCC,EAAAA,MAAM,EAAE,CAF4B;;AAIpCC,EAAAA,cAAc,EAAE,EAJoB;AAKpCC,EAAAA,eAAe,EAAE,EALmB;AAMpCC,EAAAA,IAAI,EAAE,EAN8B;AAOpCC,EAAAA,GAAG,EAAE,EAP+B;;AASpCC,EAAAA,mBAAmB,EAAE,EATe;AAUpCC,EAAAA,oBAAoB,EAAE,EAVc;AAWpCC,EAAAA,aAAa,EAAE,EAXqB;AAYpCC,EAAAA,sBAAsB,EAAE,EAZY;AAapCC,EAAAA,oBAAoB,EAAE,EAbc;;AAepCC,EAAAA,SAAS,EAAE,EAfyB;AAgBpCC,EAAAA,MAAM,EAAE,EAhB4B;AAiBpCC,EAAAA,MAAM,EAAE,EAjB4B,EAA/B;;;AAoBP,OAAO,IAAMC,aAAa,GAAG,IAAIhB,+BAAJ;AAC1BiB,GAD0B,CACtBhB,sBAAsB,CAACc,MADD,EACShB,QAAQ,CAACmB,UADlB;AAE1BD,GAF0B,CAEtBhB,sBAAsB,CAACO,mBAFD,EAEsBT,QAAQ,CAACoB,UAAT,CAAoBpB,QAAQ,CAACqB,cAA7B,CAFtB;AAG1BH,GAH0B,CAGtBhB,sBAAsB,CAACQ,oBAHD,EAGuBV,QAAQ,CAACoB,UAAT,CAAoBpB,QAAQ,CAACsB,eAA7B,CAHvB;AAI1BJ,GAJ0B,CAItBhB,sBAAsB,CAACS,aAJD,EAIgBX,QAAQ,CAACuB,mBAJzB;AAK1BL,GAL0B,CAKtBhB,sBAAsB,CAACU,sBALD,EAKyBZ,QAAQ,CAACoB,UAAT,CAAoBpB,QAAQ,CAACwB,SAA7B,CALzB;AAM1BN,GAN0B,CAMtBhB,sBAAsB,CAACW,oBAND,EAMuBb,QAAQ,CAACoB,UAAT,CAAoBpB,QAAQ,CAACyB,QAA7B,CANvB;AAO1BP,GAP0B,CAOtBhB,sBAAsB,CAACG,cAPD,EAOiBL,QAAQ,CAACqB,cAP1B;AAQ1BH,GAR0B,CAQtBhB,sBAAsB,CAACI,eARD,EAQkBN,QAAQ,CAACsB,eAR3B;AAS1BJ,GAT0B,CAStBhB,sBAAsB,CAACK,IATD,EASOP,QAAQ,CAAC0B,YAAT,CAAsB1B,QAAQ,CAACwB,SAA/B,CATP;AAU1BN,GAV0B,CAUtBhB,sBAAsB,CAACM,GAVD,EAUMR,QAAQ,CAAC0B,YAAT,CAAsB1B,QAAQ,CAACyB,QAA/B,CAVN;AAW1BP,GAX0B,CAWtBhB,sBAAsB,CAACY,SAXD,EAWYd,QAAQ,CAAC2B,cAXrB;AAY1BT,GAZ0B,CAYtBhB,sBAAsB,CAACa,MAZD,EAYSf,QAAQ,CAAC4B,WAZlB;AAa1BV,GAb0B,CAatBhB,sBAAsB,CAACE,MAbD,EAaS,UAAAyB,CAAC,UAAI7B,QAAQ,CAAC8B,UAAT,GAAsBD,CAAtB,KAA4B7B,QAAQ,CAAC+B,QAAT,CAAkBF,CAAlB,CAAhC,EAbV;AAc1BG,KAd0B,CAcpB9B,sBAAsB,CAACC,OAdH,CAAtB","sourcesContent":["import * as Keyboard from '../../lib/events/keyboard/identifiers';\r\nimport { KeyboardActionExctracterBuilder } from '../../lib/extractKeyboardAction';\r\n\r\nexport const CURRENCY_INPUT_ACTIONS = {\r\n  Unknown: 0,\r\n  Ignore: 1,\r\n\r\n  MoveCursorLeft: 11,\r\n  MoveCursorRight: 12,\r\n  Home: 13,\r\n  End: 14,\r\n\r\n  ExtendSelectionLeft: 21,\r\n  ExtendSelectionRight: 22,\r\n  FullSelection: 23,\r\n  ExtendSelectionToStart: 24,\r\n  ExtendSelectionToEnd: 25,\r\n\r\n  Backspace: 31,\r\n  Delete: 32,\r\n  Submit: 33,\r\n};\r\n\r\nexport const extractAction = new KeyboardActionExctracterBuilder()\r\n  .add(CURRENCY_INPUT_ACTIONS.Submit, Keyboard.isKeyEnter)\r\n  .add(CURRENCY_INPUT_ACTIONS.ExtendSelectionLeft, Keyboard.isModShift(Keyboard.isKeyArrowLeft))\r\n  .add(CURRENCY_INPUT_ACTIONS.ExtendSelectionRight, Keyboard.isModShift(Keyboard.isKeyArrowRight))\r\n  .add(CURRENCY_INPUT_ACTIONS.FullSelection, Keyboard.isShortcutSelectAll)\r\n  .add(CURRENCY_INPUT_ACTIONS.ExtendSelectionToStart, Keyboard.isModShift(Keyboard.isKeyHome))\r\n  .add(CURRENCY_INPUT_ACTIONS.ExtendSelectionToEnd, Keyboard.isModShift(Keyboard.isKeyEnd))\r\n  .add(CURRENCY_INPUT_ACTIONS.MoveCursorLeft, Keyboard.isKeyArrowLeft)\r\n  .add(CURRENCY_INPUT_ACTIONS.MoveCursorRight, Keyboard.isKeyArrowRight)\r\n  .add(CURRENCY_INPUT_ACTIONS.Home, Keyboard.isUnmodified(Keyboard.isKeyHome))\r\n  .add(CURRENCY_INPUT_ACTIONS.End, Keyboard.isUnmodified(Keyboard.isKeyEnd))\r\n  .add(CURRENCY_INPUT_ACTIONS.Backspace, Keyboard.isKeyBackspace)\r\n  .add(CURRENCY_INPUT_ACTIONS.Delete, Keyboard.isKeyDelete)\r\n  .add(CURRENCY_INPUT_ACTIONS.Ignore, e => Keyboard.isModified()(e) || Keyboard.isKeyTab(e))\r\n  .build(CURRENCY_INPUT_ACTIONS.Unknown);\r\n"]}