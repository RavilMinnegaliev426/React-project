import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import { isIE11, isEdge } from "../../../lib/utils";
import { Corners } from "../../Button/Corners";
import { isButton } from "../../Button";
import { jsStyles } from "../Group.styles";
export var Group =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Group, _React$Component);

  function Group() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Group.prototype;

  _proto.render = function render() {
    var _this = this;

    var style = {
      width: this.props.width
    };
    var first = null;
    var last = null;
    React.Children.forEach(this.props.children, function (child) {
      if (child && React.isValidElement(child)) {
        first = first || child;
        last = child;
      }
    });
    return React.createElement("span", {
      className: jsStyles.root(),
      style: style
    }, React.Children.map(this.props.children, function (child) {
      var _cn, _cn2;

      if (!child || !React.isValidElement(child)) {
        return null;
      }

      var isWidthInPercent = Boolean(child.props.width && child.props.width.toString().includes('%'));
      var itemCss = cn((_cn = {}, _cn[jsStyles.item()] = true, _cn[jsStyles.itemFirst()] = child === first, _cn));
      var corners = 0;

      if (child !== first) {
        corners |= Corners.TOP_LEFT | Corners.BOTTOM_LEFT;
      }

      if (child !== last) {
        corners |= Corners.TOP_RIGHT | Corners.BOTTOM_RIGHT;
      }

      if (isButton(child)) {
        child = React.cloneElement(child, {
          corners: corners
        });
      }

      return React.createElement("div", {
        className: cn((_cn2 = {}, _cn2[jsStyles.fixed()] = !isWidthInPercent, _cn2[jsStyles.stretch()] = isWidthInPercent, _cn2[jsStyles.stretchFallback()] = Boolean(isWidthInPercent && _this.props.width && (isIE11 || isEdge)), _cn2))
      }, React.createElement("div", {
        className: itemCss
      }, child));
    }));
  };

  return Group;
}(React.Component);
Group.__KONTUR_REACT_UI__ = 'Group';
Group.propTypes = {
  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
};