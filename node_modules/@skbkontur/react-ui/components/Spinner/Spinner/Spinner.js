import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";

var _dec, _class, _class2, _temp;

import React from 'react';
import PropTypes from 'prop-types';
import warning from 'warning';
import cn from 'classnames';
import { locale } from "../../../lib/locale/decorators";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { hasSvgAnimationSupport } from "../../../lib/utils";
import { SpinnerIcon } from "../../../internal/icons/SpinnerIcon";
import { SpinnerOld } from "../../../internal/SpinnerOld";
import { jsStyles } from "../Spinner.styles";
import { SpinnerFallback, types } from "../SpinnerFallback";
import { SpinnerLocaleHelper } from "../locale";
export
/**
 * DRAFT - инлайн-лоадер
 */
var Spinner = (_dec = locale('Spinner', SpinnerLocaleHelper), _dec(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Spinner, _React$Component);

  function Spinner(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.theme = void 0;
    _this.locale = void 0;

    _this.renderSpinner = function (type, dimmed) {
      var circleClassName = dimmed ? jsStyles.circleDimmed(_this.theme) : jsStyles.circle(_this.theme);
      return React.createElement(SpinnerIcon, {
        size: type,
        className: circleClassName
      });
    };

    _this.renderCaption = function (type, caption) {
      return React.createElement("span", {
        className: cn(jsStyles[type](), jsStyles.captionColor(_this.theme))
      }, caption);
    };

    warning(!_this.props.cloud, 'cloud is deprecated, will removed in 3.0. ');
    return _this;
  }

  var _proto = Spinner.prototype;

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return !_this2.props.cloud ? _this2.renderMain() : _this2.renderSpinnerOld();
    });
  };

  _proto.renderSpinnerOld = function renderSpinnerOld() {
    return React.createElement(SpinnerOld, this.props);
  };

  _proto.renderMain = function renderMain() {
    var _this$props = this.props,
        type = _this$props.type,
        _this$props$caption = _this$props.caption,
        caption = _this$props$caption === void 0 ? this.locale.loading : _this$props$caption,
        dimmed = _this$props.dimmed;
    return React.createElement("div", {
      className: jsStyles.spinner()
    }, React.createElement("span", {
      className: jsStyles.inner()
    }, hasSvgAnimationSupport && this.renderSpinner(type, dimmed), !hasSvgAnimationSupport && React.createElement(SpinnerFallback, {
      type: type,
      dimmed: dimmed
    })), caption && this.renderCaption(type, caption));
  };

  return Spinner;
}(React.Component), _class2.__KONTUR_REACT_UI__ = 'Spinner', _class2.propTypes = {
  /**
   * Текст рядом с мини-лоадером.
   *
   * 'Загрузка' - значение по-умолчанию
   */
  caption: PropTypes.node,
  dimmed: PropTypes.bool,

  /**
   * Тип спиннера: mini, normal, big
   *
   * Значение по-умолчанию - normal
   *
   * Spinner.types - все доступные типы
   */
  type: PropTypes.oneOf(Object.keys(types)),

  /**
   * @deprecated Старое поведение спиннера - облачко при среднем и большом размере
   *
   * @default false - исчезнет в 3.0
   */
  cloud: PropTypes.bool
}, _class2.defaultProps = {
  type: 'normal'
}, _class2.Types = types, _temp)) || _class);