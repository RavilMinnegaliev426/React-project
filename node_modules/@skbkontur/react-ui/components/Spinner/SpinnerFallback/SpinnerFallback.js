import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import PropTypes from 'prop-types';
import fallbackImage_mini from "../fallback_circle_mini.png";
import fallbackImage_mini_dimmed from "../fallback_circle_dimmed.png";
import fallbackImage_big from "../fallback_circle_big.png";
import fallbackImage_normal from "../fallback_circle_normal.png";
import { jsStyles } from "../Spinner.styles";
export var types = {
  big: 'big',
  mini: 'mini',
  normal: 'normal'
};
export var SpinnerFallback =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(SpinnerFallback, _React$Component);

  function SpinnerFallback() {
    var _this$_framesCount, _this$imageUrls;

    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      frame: 0
    };
    _this.mounted = false;
    _this._framesCount = (_this$_framesCount = {}, _this$_framesCount[types.mini] = 151, _this$_framesCount[types.normal] = 151, _this$_framesCount[types.big] = 151, _this$_framesCount.dimmed = 60, _this$_framesCount);
    _this.imageUrls = (_this$imageUrls = {}, _this$imageUrls[types.mini] = fallbackImage_mini, _this$imageUrls[types.normal] = fallbackImage_normal, _this$imageUrls[types.big] = fallbackImage_big, _this$imageUrls.dimmed = fallbackImage_mini_dimmed, _this$imageUrls);

    _this.animate = function () {
      if (!_this.mounted) {
        return;
      }

      var frame = _this.state.frame;

      var framesCount = _this._framesCount[_this.getSpriteSettingsKey()];

      var nextFrame = frame < framesCount ? frame + 1 : 0;

      _this.setState({
        frame: nextFrame
      });

      setTimeout(_this.animate, 1000 / 25);
    };

    _this.getSpriteSettingsKey = function () {
      return _this.props.type === types.mini && _this.props.dimmed ? 'dimmed' : _this.props.type;
    };

    return _this;
  }

  var _proto = SpinnerFallback.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.mounted = true;
    this.animate();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };

  _proto.render = function render() {
    return this.renderCircle();
  };

  _proto.renderCircle = function renderCircle() {
    var dimmed = this.props.dimmed;
    var type = this.props.type;
    var frame = this.state.frame;
    var size = type === 'big' ? 96 : type === 'normal' ? 48 : 16;
    var backgroundImage = dimmed ? this.imageUrls.dimmed : this.imageUrls[type];
    var cssSet = {
      backgroundImage: "url('" + backgroundImage + "')",
      height: size,
      width: size,
      marginBottom: -3,
      marginLeft: -1,
      marginRight: -1
    };

    if (!process.env.enableReactTesting) {
      cssSet.backgroundPosition = "0 -" + frame * size + "px";
    }

    return React.createElement("span", {
      className: jsStyles.fallback(),
      style: cssSet
    });
  };

  return SpinnerFallback;
}(React.Component);
SpinnerFallback.__KONTUR_REACT_UI__ = 'SpinnerFallback';
SpinnerFallback.propTypes = {
  type: PropTypes.oneOf(Object.keys(types)),
  dimmed: PropTypes.bool
};