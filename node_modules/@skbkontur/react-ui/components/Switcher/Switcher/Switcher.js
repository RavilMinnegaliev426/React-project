import _extends from "@babel/runtime/helpers/esm/extends";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import { isKeyArrowHorizontal, isKeyArrowLeft, isKeyEnter } from "../../../lib/events/keyboard/identifiers";
import { Group } from "../../Group";
import { Button } from "../../Button";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { jsStyles } from "../Switcher.styles";
export var Switcher =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Switcher, _React$Component);

  function Switcher() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      focusedIndex: null
    };
    _this.theme = void 0;

    _this.selectItem = function (value) {
      if (_this.props.onValueChange) {
        _this.props.onValueChange(value);
      }
    };

    _this._extractPropsFromItem = function (item) {
      return typeof item === 'object' ? item : {
        label: item,
        value: item
      };
    };

    _this._extractValuesFromItems = function () {
      return _this.props.items.map(function (item) {
        var _this$_extractPropsFr = _this._extractPropsFromItem(item),
            value = _this$_extractPropsFr.value;

        return value;
      });
    };

    _this.move = function (step) {
      var selectedIndex = _this.state.focusedIndex;

      if (typeof selectedIndex !== 'number') {
        return;
      }

      var items = _this._extractValuesFromItems();

      selectedIndex += step;

      if (selectedIndex < 0) {
        selectedIndex = items.length - 1;
      } else if (selectedIndex >= items.length) {
        selectedIndex = 0;
      }

      _this._focus(selectedIndex);
    };

    _this._focus = function (index) {
      _this.setState({
        focusedIndex: index
      });
    };

    _this.handleKey = function (e) {
      var focusedIndex = _this.state.focusedIndex;

      if (typeof focusedIndex !== 'number') {
        return;
      }

      if (isKeyEnter(e)) {
        if (_this.props.onValueChange) {
          var _this$_extractPropsFr2 = _this._extractPropsFromItem(_this.props.items[focusedIndex]),
              _value = _this$_extractPropsFr2.value;

          _this.selectItem(_value);
        }

        return;
      }

      if (isKeyArrowHorizontal(e)) {
        e.preventDefault();

        _this.move(isKeyArrowLeft(e) ? -1 : 1);
      }
    };

    _this._handleFocus = function () {
      var value = _this.props.value;

      var items = _this._extractValuesFromItems();

      var currentIndex = [].concat(items).indexOf(value);
      var index = currentIndex > -1 ? currentIndex : 0;

      _this.setState({
        focusedIndex: index
      });
    };

    _this._handleBlur = function () {
      _this.setState({
        focusedIndex: null
      });
    };

    _this._renderItems = function () {
      return _this.props.items.map(function (item, i) {
        var _this$_extractPropsFr3 = _this._extractPropsFromItem(item),
            label = _this$_extractPropsFr3.label,
            value = _this$_extractPropsFr3.value;

        var buttonProps = {
          checked: _this.props.value === value,
          visuallyFocused: _this.state.focusedIndex === i,
          onClick: function onClick() {
            _this.selectItem(value);
          },
          disableFocus: true,
          size: _this.props.size
        };
        return React.createElement(Button, _extends({
          key: value
        }, buttonProps), label);
      });
    };

    return _this;
  }

  var _proto = Switcher.prototype;

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return _this2.renderMain();
    });
  };

  _proto.renderMain = function renderMain() {
    var _cn;

    var listClassName = cn((_cn = {}, _cn[jsStyles.error(this.theme)] = !!this.props.error, _cn));
    var inputProps = {
      type: 'checkbox',
      onKeyDown: this.handleKey,
      onFocus: this._handleFocus,
      onBlur: this._handleBlur,
      className: jsStyles.input()
    };
    return React.createElement("div", null, this.props.label ? React.createElement("div", {
      className: jsStyles.label()
    }, this.props.label) : null, React.createElement("div", {
      className: jsStyles.wrap()
    }, React.createElement("input", inputProps), React.createElement("div", {
      className: listClassName
    }, React.createElement(Group, null, this._renderItems()))));
  };

  return Switcher;
}(React.Component);
Switcher.__KONTUR_REACT_UI__ = 'Switcher';
Switcher.propTypes = {
  error: PropTypes.bool,
  items: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string,
    value: PropTypes.string
  }))]).isRequired,
  label: PropTypes.string,
  value: PropTypes.string,
  onValueChange: PropTypes.func
};