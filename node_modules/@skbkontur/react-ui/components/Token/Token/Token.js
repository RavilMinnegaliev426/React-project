import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import cn from 'classnames';
import { CrossIcon } from "../../../internal/icons/CrossIcon";
import { emptyHandler } from "../../../lib/utils";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { jsStyles, jsTokenColors } from "../Token.styles";
export var Token =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Token, _React$Component);

  function Token() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.theme = void 0;

    _this.onRemoveClick = function (event) {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          _this$props$onRemove = _this$props.onRemove,
          onRemove = _this$props$onRemove === void 0 ? emptyHandler : _this$props$onRemove;

      if (disabled) {
        event.preventDefault();
        return;
      }

      onRemove(event);
    };

    return _this;
  }

  var _proto = Token.prototype;

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return _this2.renderMain();
    });
  };

  _proto.renderMain = function renderMain() {
    var _cn, _cn2;

    var _this$props2 = this.props,
        children = _this$props2.children,
        isActive = _this$props2.isActive,
        colors = _this$props2.colors,
        error = _this$props2.error,
        warning = _this$props2.warning,
        disabled = _this$props2.disabled,
        _this$props2$onClick = _this$props2.onClick,
        onClick = _this$props2$onClick === void 0 ? emptyHandler : _this$props2$onClick,
        _this$props2$onMouseE = _this$props2.onMouseEnter,
        onMouseEnter = _this$props2$onMouseE === void 0 ? emptyHandler : _this$props2$onMouseE,
        _this$props2$onMouseL = _this$props2.onMouseLeave,
        onMouseLeave = _this$props2$onMouseL === void 0 ? emptyHandler : _this$props2$onMouseL,
        _this$props2$onFocus = _this$props2.onFocus,
        onFocus = _this$props2$onFocus === void 0 ? emptyHandler : _this$props2$onFocus,
        _this$props2$onBlur = _this$props2.onBlur,
        onBlur = _this$props2$onBlur === void 0 ? emptyHandler : _this$props2$onBlur;
    var theme = this.theme;
    var validation = error ? 'error' : warning ? 'warning' : null;
    var disableClassNames = cn(jsTokenColors.defaultDisabled(theme), (_cn = {}, _cn[jsTokenColors.defaultDisabledWarning(theme)] = warning, _cn[jsTokenColors.defaultDisabledError(theme)] = error, _cn));
    var tokenClassName = disabled ? disableClassNames : jsTokenColors.defaultIdle(theme, validation);
    var activeTokenClassName = disabled ? disableClassNames : jsTokenColors.defaultActive(theme, validation);

    if (!disabled && colors) {
      tokenClassName = jsTokenColors[colors.idle](theme, validation);
      var activeClassName = colors.active ? colors.active : colors.idle;
      activeTokenClassName = jsTokenColors[activeClassName](theme, validation);
    }

    var tokenClassNames = cn(jsStyles.token(), tokenClassName, (_cn2 = {}, _cn2[activeTokenClassName] = !!isActive, _cn2[jsStyles.disabled(theme)] = !!disabled, _cn2));
    return React.createElement("div", {
      className: tokenClassNames,
      onClick: onClick,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      onFocus: onFocus,
      onBlur: onBlur
    }, React.createElement("span", {
      className: jsStyles.text()
    }, children), React.createElement("span", {
      className: jsStyles.removeIcon(),
      onClick: this.onRemoveClick
    }, React.createElement(CrossIcon, null)));
  };

  return Token;
}(React.Component);
Token.__KONTUR_REACT_UI__ = 'Token';