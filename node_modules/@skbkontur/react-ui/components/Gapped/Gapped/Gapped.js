import _extends from "@babel/runtime/helpers/esm/extends";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import PropTypes from 'prop-types';
/**
                                     * Контейнер, расстояние между элементами в котором равно `gap`.
                                     */

export var Gapped =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Gapped, _React$Component);

  function Gapped() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Gapped.prototype;

  _proto.render = function render() {
    if (this.props.vertical) {
      return this.renderVertical();
    }

    return this.renderHorizontal();
  };

  _proto.renderVertical = function renderVertical() {
    var subsequentItemStyle = {
      paddingTop: this.props.gap
    };
    var isFirst = true;
    var children = React.Children.map(this.props.children, function (child) {
      if (!child) {
        return child;
      }

      var style = isFirst ? undefined : subsequentItemStyle;
      isFirst = false;
      return React.createElement("div", {
        style: style
      }, child);
    });
    return React.createElement("div", null, children);
  };

  _proto.renderHorizontal = function renderHorizontal() {
    var _this$props = this.props,
        gap = _this$props.gap,
        children = _this$props.children,
        verticalAlign = _this$props.verticalAlign,
        wrap = _this$props.wrap;

    var itemStyle = _extends({
      display: 'inline-block',
      verticalAlign: verticalAlign
    }, wrap ? {
      marginLeft: gap,
      marginTop: gap
    } : {});

    var rootStyle = wrap ? {
      paddingTop: 1
    } : {};
    var contStyle = wrap ? {
      marginTop: -gap - 1,
      marginLeft: -gap
    } : {
      whiteSpace: 'nowrap'
    };
    return React.createElement("div", {
      style: rootStyle
    }, React.createElement("div", {
      style: contStyle
    }, React.Children.map(children, function (child, index) {
      if (!child) {
        return child;
      }

      var marginLeft = index === 0 ? undefined : gap;
      return React.createElement("span", {
        style: _extends({
          marginLeft: marginLeft
        }, itemStyle)
      }, child);
    })));
  };

  return Gapped;
}(React.Component);
Gapped.__KONTUR_REACT_UI__ = 'Gapped';
Gapped.propTypes = {
  /**
   * Расстояние между элементами.
   */
  gap: PropTypes.number,

  /**
   * Располагать элементы вертикально.
   */
  vertical: PropTypes.bool,

  /**
   * Вертикальное выравнивание элементов.
   */
  verticalAlign: PropTypes.oneOf(['top', 'middle', 'baseline', 'bottom'])
};
Gapped.defaultProps = {
  gap: 10,
  wrap: false,
  vertical: false,
  verticalAlign: 'baseline'
};