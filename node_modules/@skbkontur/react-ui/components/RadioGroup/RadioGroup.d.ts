import React from 'react';
import PropTypes from 'prop-types';
import { Prevent } from './Prevent';
export interface RadioGroupProps<T = string | number> {
    defaultValue?: T;
    value?: T;
    items?: T[] | [T, React.ReactNode][];
    name?: string;
    disabled?: boolean;
    warning?: boolean;
    error?: boolean;
    inline?: boolean;
    width?: React.CSSProperties['width'];
    renderItem?: (itemValue: T, data: React.ReactNode) => React.ReactNode;
    /** Вызывается при изменении `value` */
    onValueChange?: (value: T) => void;
    onBlur?: (event: FocusEvent) => void;
    onMouseLeave?: () => any;
    onMouseOver?: () => any;
    onMouseEnter?: () => any;
}
export interface RadioGroupState<T> {
    activeItem?: T;
}
export declare class RadioGroup<T> extends React.Component<RadioGroupProps<T>, RadioGroupState<T>> {
    static __KONTUR_REACT_UI__: string;
    static childContextTypes: {
        error: PropTypes.Requireable<boolean>;
        name: PropTypes.Requireable<string>;
        warning: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        activeItem: PropTypes.Requireable<any>;
        onSelect: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static propTypes: {
        /**
         * Может быть использовано, если не передан параметр `items`
         *
         * `children` может содержать любую разметку с компонентами Radio.
         * Каждому компоненту Radio нужно указать параметр `value`, такого же типа
         * как и параметр `value` самой радиогруппы.
         *
         * Значения активного элемента сравниваются по строгому равенству `===`
         */
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        /**
         * Значение по умолчанию. Должно быть одним из значений дочерних радиокнопок
         * или значей из параметра `items`
         */
        defaultValue: PropTypes.Requireable<any>;
        /**
         * Дизейблит все радиокнопки
         */
        disabled: PropTypes.Requireable<boolean>;
        /**
         * Переводит все радиокнопки в состоянии ошибки
         */
        error: PropTypes.Requireable<boolean>;
        /**
         * Выравнивает элементы в строку. Не работает с `children`
         */
        inline: PropTypes.Requireable<boolean>;
        /**
         * Может быть использовано, если не передан параметр `children`
         *
         * Массив параметров радиокнопок. Может быть типа `Array<Value>` или
         * `Array<[Value, Data]>`, где тип `Value` — значение радиокнопки, а `Data`
         * — значение которое будет использовано вторым параметром в `renderItem`.
         * Если тип `items: Array<Value>`, то он будет приведен к типу
         * `Array<[Value, Value]>`
         */
        items: PropTypes.Requireable<any>;
        /**
         * Аттрибут name для вложенных радиокнопок. Если не указан, то сгенерируется
         * случайное имя по алгоритму
         * [uuid v1](https://github.com/kelektiv/node-uuid#version-1)
         */
        name: PropTypes.Requireable<string>;
        /**
         * Метод отрисовки контента радиокнопки. Не работает с `children`.
         *
         * Принимает два аргумента: `(value: Value, data: Data) => React.Node`
         */
        renderItem: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Значение радиогруппы. Должно быть одним из значений радиокнопок.
         * Если не указано, то компонент будет работать, как неконтроллируемый
         */
        value: PropTypes.Requireable<any>;
        /**
         * Переводит все радиокнопки в состоянии предупреждения
         */
        warning: PropTypes.Requireable<boolean>;
        /**
         * Ширина радиогруппы. Не работает с `children`
         */
        width: PropTypes.Requireable<string | number>;
        /**
         * Обработчик события при переключении радиокнопок.
         * Имеет тип
         * `(value: Value) => any`
         */
        onValueChange: PropTypes.Requireable<(...args: any[]) => any>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: {
        renderItem: typeof renderItem;
    };
    static Prevent: typeof Prevent;
    private node;
    private name;
    private getProps;
    constructor(props: RadioGroupProps<T>);
    getChildContext(): {
        activeItem: T | undefined;
        onSelect: (value: T) => void;
        name: string;
        disabled: boolean | undefined;
        error: boolean | undefined;
        warning: boolean | undefined;
    };
    render(): JSX.Element;
    /**
     * @public
     */
    focus(): void;
    private getValue;
    private getName;
    private isControlled;
    private handleSelect;
    private renderChildren;
    private renderRadio;
    private ref;
}
declare function renderItem<T>(_value: T, data: React.ReactNode): React.ReactNode;
export {};
