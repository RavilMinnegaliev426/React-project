import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import { createPropsGetter } from "../../../lib/createPropsGetter";
import { tabListener } from "../../../lib/events/tabListener";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { isExternalLink } from "../../../lib/utils";
import { jsStyles } from "../Link.styles";
/**
                                           * Стандартная ссылка.
                                           * Интерфес пропсов наследуется от `React.AnchorHTMLAttributes<HTMLAnchorElement>`.
                                           * Все свойства передаются в элемент `<a>`.
                                           * `className` и `style` не поддерживаются
                                           */

export var Link =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Link, _React$Component);

  function Link() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      focusedByTab: false
    };
    _this.theme = void 0;
    _this.getProps = createPropsGetter(Link.defaultProps);

    _this._handleFocus = function (event) {
      if (!_this.props.disabled) {
        // focus event fires before keyDown eventlistener
        // so we should check tabPressed in async way
        process.nextTick(function () {
          if (tabListener.isTabPressed) {
            _this.setState({
              focusedByTab: true
            });
          }
        });
      }
    };

    _this._handleBlur = function () {
      _this.setState({
        focusedByTab: false
      });
    };

    _this._handleClick = function (event) {
      var _this$props = _this.props,
          href = _this$props.href,
          onClick = _this$props.onClick,
          disabled = _this$props.disabled;

      if (!href) {
        event.preventDefault();
      }

      if (onClick && !disabled) {
        onClick(event);
      }
    };

    return _this;
  }

  var _proto = Link.prototype;

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return _this2.renderMain();
    });
  };

  _proto.renderMain = function renderMain() {
    var _cn;

    var _this$getProps = this.getProps(),
        disabled = _this$getProps.disabled,
        href = _this$getProps.href,
        icon = _this$getProps.icon,
        use = _this$getProps.use,
        _button = _this$getProps._button,
        _buttonOpened = _this$getProps._buttonOpened,
        className = _this$getProps.className,
        style = _this$getProps.style,
        relOrigin = _this$getProps.rel,
        rest = _objectWithoutPropertiesLoose(_this$getProps, ["disabled", "href", "icon", "use", "_button", "_buttonOpened", "className", "style", "rel"]);

    var iconElement = null;

    if (icon) {
      iconElement = React.createElement("span", {
        className: jsStyles.icon(this.theme)
      }, icon);
    }

    var arrow = null;

    if (_button) {
      arrow = React.createElement("span", {
        className: jsStyles.arrow()
      });
    }

    var rel = relOrigin;

    if (typeof rel === 'undefined' && href) {
      rel = "noopener" + (isExternalLink(href) ? ' noreferrer' : '');
    }

    var props = {
      className: cn((_cn = {}, _cn[jsStyles.root(this.theme)] = true, _cn[jsStyles.disabled(this.theme)] = !!disabled, _cn[jsStyles.button()] = !!_button, _cn[jsStyles.buttonOpened()] = !!_buttonOpened, _cn[jsStyles.focus(this.theme)] = !disabled && this.state.focusedByTab, _cn[jsStyles.useDefault(this.theme)] = use === 'default', _cn[jsStyles.useSuccess(this.theme)] = use === 'success', _cn[jsStyles.useDanger(this.theme)] = use === 'danger', _cn[jsStyles.useGrayed(this.theme)] = use === 'grayed', _cn)),
      href: href,
      rel: rel,
      onClick: this._handleClick,
      onFocus: this._handleFocus,
      onBlur: this._handleBlur,
      tabIndex: this.props.tabIndex
    };

    if (disabled) {
      props.tabIndex = -1;
    }

    return React.createElement("a", _extends({}, rest, props), iconElement, this.props.children, arrow);
  };

  return Link;
}(React.Component);
Link.__KONTUR_REACT_UI__ = 'Link';
Link.propTypes = {
  disabled: PropTypes.bool,
  href: PropTypes.string,
  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  use: PropTypes.oneOf(['default', 'success', 'danger', 'grayed'])
};
Link.defaultProps = {
  href: '',
  use: 'default'
};