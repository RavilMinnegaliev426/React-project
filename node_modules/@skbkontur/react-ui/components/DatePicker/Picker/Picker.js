import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";

var _dec, _class, _class2, _temp;

import React from 'react';
import shallowEqual from 'shallowequal';
import { InternalDate } from "../../../lib/date/InternalDate";
import { InternalDateGetter } from "../../../lib/date/InternalDateGetter";
import { Calendar, isGreater, isLess } from "../../../internal/Calendar";
import { locale } from "../../../lib/locale/decorators";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { jsStyles } from "../Picker.styles";
import { DatePickerLocaleHelper } from "../locale";

var getTodayCalendarDate = function getTodayCalendarDate() {
  var d = new Date();
  return {
    date: d.getDate(),
    month: d.getMonth(),
    year: d.getFullYear()
  };
};

export var Picker = (_dec = locale('DatePicker', DatePickerLocaleHelper), _dec(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Picker, _React$Component);

  function Picker(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.theme = void 0;
    _this.calendar = null;
    _this.locale = void 0;

    _this.scrollToMonth = function (month, year) {
      if (_this.calendar) {
        _this.calendar.scrollToMonth(month, year);
      }
    };

    _this.handleSelectToday = function (today) {
      return function () {
        if (_this.props.onSelect) {
          _this.props.onSelect(today.toNativeFormat());
        }

        if (_this.calendar) {
          var _this$state$today = _this.state.today,
              month = _this$state$today.month,
              year = _this$state$today.year;

          _this.calendar.scrollToMonth(month, year);
        }
      };
    };

    _this.getInitialDate = function (today) {
      if (_this.props.value) {
        return _this.props.value;
      }

      if (_this.props.minDate && isLess(today, _this.props.minDate)) {
        return _this.props.minDate;
      }

      if (_this.props.maxDate && isGreater(today, _this.props.maxDate)) {
        return _this.props.maxDate;
      }

      return today;
    };

    var _today = getTodayCalendarDate();

    _this.state = {
      date: _this.getInitialDate(_today),
      today: _today
    };
    return _this;
  }

  var _proto = Picker.prototype;

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var value = this.props.value;

    if (value && !shallowEqual(value, prevProps.value)) {
      this.scrollToMonth(value.month, value.year);
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return _this2.renderMain();
    });
  };

  _proto.renderMain = function renderMain() {
    var _this3 = this;

    var date = this.state.date;
    return React.createElement("div", {
      className: jsStyles.root(this.theme),
      onMouseDown: function onMouseDown(e) {
        return e.preventDefault();
      }
    }, React.createElement(Calendar, {
      ref: function ref(c) {
        return _this3.calendar = c;
      },
      value: this.props.value,
      initialMonth: date.month,
      initialYear: date.year,
      onSelect: this.props.onPick,
      minDate: this.props.minDate,
      maxDate: this.props.maxDate,
      isHoliday: this.props.isHoliday
    }), this.props.enableTodayLink && this.renderTodayLink());
  };

  _proto.renderTodayLink = function renderTodayLink() {
    var _this$locale = this.locale,
        order = _this$locale.order,
        separator = _this$locale.separator;
    var today = new InternalDate({
      order: order,
      separator: separator
    }).setComponents(InternalDateGetter.getTodayComponents());
    return React.createElement("button", {
      "data-tid": "Picker__todayWrapper",
      className: jsStyles.todayWrapper(this.theme),
      onClick: this.handleSelectToday(today),
      tabIndex: -1
    }, this.locale.today + " " + today.toString({
      withPad: true,
      withSeparator: true
    }));
  };

  return Picker;
}(React.Component), _class2.__KONTUR_REACT_UI__ = 'Picker', _temp)) || _class);