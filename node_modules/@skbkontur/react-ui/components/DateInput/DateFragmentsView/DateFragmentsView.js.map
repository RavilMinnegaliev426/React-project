{"version":3,"sources":["DateFragmentsView.tsx"],"names":["React","cn","CHAR_MASK","InternalDateValidator","InternalDateComponentType","ThemeContext","jsStyles","DateFragmentsView","theme","rootNode","isFragment","el","fragments","Array","from","querySelectorAll","some","fragment","contains","getRootNode","rootRef","render","renderMain","root","props","map","index","type","Separator","renderSeparator","renderDateComponent","separatorClassName","mask","delimiterFilled","value","inputMode","onSelectDateComponent","selected","length","valueWithPad","valueMask","lengthMask","testParseToNumber","Math","max","toString","handleMouseUp","e","document","activeElement","currentTarget","repeat","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport cn from 'classnames';\r\n\r\nimport { CHAR_MASK } from '../../lib/date/constants';\r\nimport { InternalDateValidator } from '../../lib/date/InternalDateValidator';\r\nimport { InternalDateComponentType, InternalDateFragment } from '../../lib/date/types';\r\nimport { Theme } from '../../lib/theming/Theme';\r\nimport { ThemeContext } from '../../lib/theming/ThemeContext';\r\n\r\nimport { jsStyles } from './DateFragmentsView.styles';\r\n\r\ninterface DateFragmentViewProps {\r\n  selected: InternalDateComponentType | null;\r\n  fragments: InternalDateFragment[];\r\n  inputMode: boolean;\r\n  onSelectDateComponent: (type: InternalDateComponentType, e: React.MouseEvent<HTMLSpanElement>) => void;\r\n}\r\n\r\nexport class DateFragmentsView extends React.Component<DateFragmentViewProps, {}> {\r\n  private theme!: Theme;\r\n  private rootNode: HTMLSpanElement | null = null;\r\n\r\n  public isFragment = (el: HTMLElement | EventTarget): boolean => {\r\n    if (this.rootNode) {\r\n      // NOTE: NodeList doesn't support method 'forEach' in IE11\r\n      const fragments: HTMLSpanElement[] = Array.from(this.rootNode.querySelectorAll('[data-fragment]'));\r\n      return fragments.some(fragment => fragment === el || fragment.contains(el as HTMLSpanElement));\r\n    }\r\n    return false;\r\n  };\r\n\r\n  public getRootNode = () => this.rootNode;\r\n\r\n  public render() {\r\n    return (\r\n      <ThemeContext.Consumer>\r\n        {theme => {\r\n          this.theme = theme;\r\n          return this.renderMain();\r\n        }}\r\n      </ThemeContext.Consumer>\r\n    );\r\n  }\r\n\r\n  private renderMain() {\r\n    return (\r\n      <span ref={this.rootRef} className={jsStyles.root(this.theme)}>\r\n        {this.props.fragments.map((fragment, index) =>\r\n          fragment.type === InternalDateComponentType.Separator\r\n            ? this.renderSeparator(fragment, index)\r\n            : this.renderDateComponent(fragment, index),\r\n        )}\r\n      </span>\r\n    );\r\n  }\r\n\r\n  private renderSeparator(fragment: InternalDateFragment, index: number): JSX.Element {\r\n    const separatorClassName = cn({\r\n      [jsStyles.mask(this.theme)]: true,\r\n      [jsStyles.delimiterFilled()]: this.props.fragments[index + 1].value !== null,\r\n    });\r\n\r\n    return (\r\n      <span key={index} className={separatorClassName}>\r\n        {fragment.value}\r\n      </span>\r\n    );\r\n  }\r\n\r\n  private renderDateComponent(fragment: InternalDateFragment, index: number): JSX.Element {\r\n    const { inputMode, onSelectDateComponent, selected } = this.props;\r\n    const { type, value, length, valueWithPad } = fragment;\r\n\r\n    const valueMask = value === null || (selected === type && inputMode) ? value : valueWithPad || value;\r\n    const lengthMask = InternalDateValidator.testParseToNumber(valueMask)\r\n      ? Math.max(length - valueMask!.toString().length, 0)\r\n      : length;\r\n\r\n    const handleMouseUp = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n      if (document.activeElement && document.activeElement.contains(e.currentTarget)) {\r\n        onSelectDateComponent(type, e);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <span key={index} data-fragment=\"\" onMouseUp={handleMouseUp}>\r\n        {valueMask}\r\n        <span className={jsStyles.mask(this.theme)}>{CHAR_MASK.repeat(lengthMask)}</span>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  private rootRef = (el: HTMLSpanElement | null) => {\r\n    this.rootNode = el;\r\n  };\r\n}\r\n"]}