import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import cn from 'classnames';
import { CHAR_MASK } from "../../../lib/date/constants";
import { InternalDateValidator } from "../../../lib/date/InternalDateValidator";
import { InternalDateComponentType } from "../../../lib/date/types";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { jsStyles } from "../DateFragmentsView.styles";
export var DateFragmentsView =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(DateFragmentsView, _React$Component);

  function DateFragmentsView() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.theme = void 0;
    _this.rootNode = null;

    _this.isFragment = function (el) {
      if (_this.rootNode) {
        // NOTE: NodeList doesn't support method 'forEach' in IE11
        var fragments = Array.from(_this.rootNode.querySelectorAll('[data-fragment]'));
        return fragments.some(function (fragment) {
          return fragment === el || fragment.contains(el);
        });
      }

      return false;
    };

    _this.getRootNode = function () {
      return _this.rootNode;
    };

    _this.rootRef = function (el) {
      _this.rootNode = el;
    };

    return _this;
  }

  var _proto = DateFragmentsView.prototype;

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return _this2.renderMain();
    });
  };

  _proto.renderMain = function renderMain() {
    var _this3 = this;

    return React.createElement("span", {
      ref: this.rootRef,
      className: jsStyles.root(this.theme)
    }, this.props.fragments.map(function (fragment, index) {
      return fragment.type === InternalDateComponentType.Separator ? _this3.renderSeparator(fragment, index) : _this3.renderDateComponent(fragment, index);
    }));
  };

  _proto.renderSeparator = function renderSeparator(fragment, index) {
    var _cn;

    var separatorClassName = cn((_cn = {}, _cn[jsStyles.mask(this.theme)] = true, _cn[jsStyles.delimiterFilled()] = this.props.fragments[index + 1].value !== null, _cn));
    return React.createElement("span", {
      key: index,
      className: separatorClassName
    }, fragment.value);
  };

  _proto.renderDateComponent = function renderDateComponent(fragment, index) {
    var _this$props = this.props,
        inputMode = _this$props.inputMode,
        onSelectDateComponent = _this$props.onSelectDateComponent,
        selected = _this$props.selected;
    var type = fragment.type,
        value = fragment.value,
        length = fragment.length,
        valueWithPad = fragment.valueWithPad;
    var valueMask = value === null || selected === type && inputMode ? value : valueWithPad || value;
    var lengthMask = InternalDateValidator.testParseToNumber(valueMask) ? Math.max(length - valueMask.toString().length, 0) : length;

    var handleMouseUp = function handleMouseUp(e) {
      if (document.activeElement && document.activeElement.contains(e.currentTarget)) {
        onSelectDateComponent(type, e);
      }
    };

    return React.createElement("span", {
      key: index,
      "data-fragment": "",
      onMouseUp: handleMouseUp
    }, valueMask, React.createElement("span", {
      className: jsStyles.mask(this.theme)
    }, CHAR_MASK.repeat(lengthMask)));
  };

  return DateFragmentsView;
}(React.Component);