{"version":3,"sources":["DateInputKeyboardActions.tsx"],"names":["SEPARATOR","Keyboard","KeyboardActionExctracterBuilder","delimiters","e","RegExp","test","key","isKeySpace","isCodeMinus","isCodeComma","isCodePeriod","isCodeSlash","isCodeBackslash","isCodeIntlBackslash","isCodeNumpadDecimal","isCodeNumpadDivide","isCodeNumpadSubtract","Actions","extractAction","add","PasteValue","isShortcutPaste","CopyValue","isShortcutCopy","FullSelection","isShortcutSelectAll","Ignore","someKeys","isModified","isKeyFs","isKeyTab","MoveSelectionLeft","isKeyArrowLeft","MoveSelectionRight","isKeyArrowRight","MoveSelectionFirst","isKeyHome","MoveSelectionLast","isKeyEnd","Separator","Increment","isKeyArrowUp","Decrement","isKeyArrowDown","ClearSelection","isKeyDelete","ClearOneChar","isKeyBackspace","Digit","isKeyNumber","WrongInput","build","Unknown"],"mappings":"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","sourcesContent":["// @ts-ignore noUnusedVar\r\nimport React from 'react';\r\n\r\nimport { SEPARATOR } from '../../../lib/date/constants';\r\nimport * as Keyboard from '../../../lib/events/keyboard/identifiers';\r\nimport { KeyboardActionExctracterBuilder } from '../../../lib/extractKeyboardAction';\r\n\r\nconst delimiters = [\r\n  (e: React.KeyboardEvent<HTMLElement> | KeyboardEvent) => new RegExp(SEPARATOR).test(e.key),\r\n  Keyboard.isKeySpace,\r\n  Keyboard.isCodeMinus,\r\n  Keyboard.isCodeComma,\r\n  Keyboard.isCodePeriod,\r\n  Keyboard.isCodeSlash,\r\n  Keyboard.isCodeBackslash,\r\n  Keyboard.isCodeIntlBackslash,\r\n  Keyboard.isCodeNumpadDecimal,\r\n  Keyboard.isCodeNumpadDivide,\r\n  Keyboard.isCodeNumpadSubtract,\r\n];\r\n\r\nexport enum Actions {\r\n  Unknown,\r\n  Ignore,\r\n  MoveSelectionLeft,\r\n  MoveSelectionRight,\r\n  MoveSelectionFirst,\r\n  MoveSelectionLast,\r\n  Decrement,\r\n  Increment,\r\n  FullSelection,\r\n  ClearSelection,\r\n  ClearOneChar,\r\n  Digit,\r\n  Separator,\r\n  WrongInput,\r\n  PasteValue,\r\n  CopyValue,\r\n}\r\n\r\nconst extractAction = new KeyboardActionExctracterBuilder<Actions>()\r\n  .add(Actions.PasteValue, Keyboard.isShortcutPaste)\r\n  .add(Actions.CopyValue, Keyboard.isShortcutCopy)\r\n  .add(Actions.FullSelection, Keyboard.isShortcutSelectAll)\r\n  .add(Actions.Ignore, Keyboard.someKeys(Keyboard.isModified(), Keyboard.isKeyFs, Keyboard.isKeyTab))\r\n  .add(Actions.MoveSelectionLeft, Keyboard.isKeyArrowLeft)\r\n  .add(Actions.MoveSelectionRight, Keyboard.isKeyArrowRight)\r\n  .add(Actions.MoveSelectionFirst, Keyboard.isKeyHome)\r\n  .add(Actions.MoveSelectionLast, Keyboard.isKeyEnd)\r\n  .add(Actions.Separator, Keyboard.someKeys(...delimiters))\r\n  .add(Actions.Increment, Keyboard.isKeyArrowUp)\r\n  .add(Actions.Decrement, Keyboard.isKeyArrowDown)\r\n  .add(Actions.ClearSelection, e => Keyboard.isKeyDelete(e))\r\n  .add(Actions.ClearOneChar, Keyboard.isKeyBackspace)\r\n  .add(Actions.Digit, Keyboard.isKeyNumber)\r\n  .add(Actions.WrongInput, e => !Keyboard.isKeyNumber(e))\r\n  .build(Actions.Unknown);\r\n\r\nexport { extractAction };\r\n"]}