import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";

var _dec, _class, _class2, _temp;

import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import warning from 'warning';
import { stopPropagation } from "../../../lib/events/stopPropagation";
import { locale } from "../../../lib/locale/decorators";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { CloudIcon } from "../../../internal/icons/CloudIcon";
import { ArrowChevronDownIcon } from "../../../internal/icons/16px";
import { jsStyles } from "../Logotype.styles";
import { ProductWidget } from "../ProductWidget";
import { LogotypeLocaleHelper } from "../locale";
var INITIAL_WIDTH = 25;
var INITIAL_HEIGHT = 18;
var INITIAL_VERTICAL_ALIGN = -1;
var INITIAL_FONT_SIZE = 22;
export
/**
 * @deprecated Контур-специфичный компонент, будет удален в 3.0.0, перенесен в `@skbkontur/react-ui-addons` смотри [миграцию](https://github.com/skbkontur/retail-ui/blob/master/packages/react-ui/MIGRATION.md)
 */
var Logotype = (_dec = locale('Logotype', LogotypeLocaleHelper), _dec(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Logotype, _React$Component);

  function Logotype(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.theme = void 0;
    _this.locale = void 0;
    _this.logoWrapper = null;
    _this.isWidgetInited = false;

    _this.refLogoWrapper = function (el) {
      if (_this.logoWrapper) {
        _this.logoWrapper.removeEventListener('click', _this.handleNativeLogoClick);
      }

      if (el) {
        el.addEventListener('click', _this.handleNativeLogoClick);
      }

      _this.logoWrapper = el;
    };

    _this.handleNativeLogoClick = function (event) {
      stopPropagation(event);
    };

    _this.initWidget = function () {
      if (!_this.isWidgetInited) {
        ProductWidget.init();
        _this.isWidgetInited = true;
      }
    };

    warning(false, "Logotype has been deprecated, use Logotype from @skbkontur/react-ui-addons instead, see [migration](https://github.com/skbkontur/retail-ui/blob/master/packages/react-ui/MIGRATION.md)");
    return _this;
  }

  var _proto = Logotype.prototype;

  _proto.componentDidMount = function componentDidMount() {
    if (this.props.withWidget) {
      this.initWidget();
    }

    warning(!this.props.locale, 'locale props is deprecated, use LocaleProvider instead');
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    if (this.props.withWidget) {
      this.initWidget();
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return _this2.renderMain();
    });
  };

  _proto.renderMain = function renderMain() {
    var _cn;

    var _this$props = this.props,
        color = _this$props.color,
        textColor = _this$props.textColor,
        Component = _this$props.component,
        suffix = _this$props.suffix,
        size = _this$props.size,
        href = _this$props.href,
        withWidget = _this$props.withWidget,
        _this$props$locale = _this$props.locale,
        propLocale = _this$props$locale === void 0 ? this.locale : _this$props$locale,
        onArrowClick = _this$props.onArrowClick;
    var dropdownClassName = cn((_cn = {}, _cn[jsStyles.dropdown()] = true, _cn[jsStyles.inline()] = !withWidget, _cn));
    var cloudStyle = {
      color: color,
      width: size * (INITIAL_WIDTH / INITIAL_FONT_SIZE),
      height: size * (INITIAL_HEIGHT / INITIAL_FONT_SIZE),
      verticalAlign: size * (INITIAL_VERTICAL_ALIGN / INITIAL_FONT_SIZE)
    };
    return React.createElement("div", {
      id: "spwDropdown",
      className: dropdownClassName
    }, React.createElement("span", {
      ref: this.refLogoWrapper,
      className: jsStyles.widgetWrapper()
    }, React.createElement(Component, {
      href: href,
      tabIndex: "-1",
      className: jsStyles.root(this.theme),
      style: {
        fontSize: size + "px"
      }
    }, React.createElement("span", {
      style: {
        color: textColor
      }
    }, propLocale.prefix), React.createElement("span", {
      className: jsStyles.cloud(),
      style: cloudStyle
    }, React.createElement(CloudIcon, null)), React.createElement("span", {
      style: {
        color: textColor
      }
    }, propLocale.suffix, suffix && '.'), suffix && React.createElement("span", {
      style: {
        color: color
      }
    }, suffix)), withWidget && React.createElement("span", {
      className: jsStyles.divider(this.theme)
    })), withWidget && React.createElement("button", {
      className: jsStyles.button(),
      onClick: onArrowClick
    }, React.createElement(ArrowChevronDownIcon, {
      color: "#aaa",
      size: 20
    })));
  };

  return Logotype;
}(React.Component), _class2.__KONTUR_REACT_UI__ = 'Logotype', _class2.propTypes = {
  color: PropTypes.string,
  href: PropTypes.string,
  suffix: PropTypes.string,
  size: PropTypes.number,
  textColor: PropTypes.string,
  withWidget: PropTypes.bool,
  locale: PropTypes.shape({
    prefix: PropTypes.string,
    suffix: PropTypes.string
  })
}, _class2.defaultProps = {
  color: '#D92932',
  size: INITIAL_FONT_SIZE,
  textColor: '#333333',
  component: 'a',
  href: '/'
}, _temp)) || _class);