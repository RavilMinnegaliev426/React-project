import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { jsStyles } from "../Radio.styles";
export var Radio =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Radio, _React$Component);

  function Radio() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.theme = void 0;
    _this.inputEl = React.createRef();

    _this._isInRadioGroup = function () {
      return Boolean(_this.context.name);
    };

    _this.handleChange = function (e) {
      _this.props.onValueChange == null ? void 0 : _this.props.onValueChange(_this.props.value);

      if (_this._isInRadioGroup()) {
        _this.context.onSelect(_this.props.value);
      }

      _this.props.onChange == null ? void 0 : _this.props.onChange(e);
    };

    _this.handleMouseOver = function (e) {
      _this.props.onMouseOver == null ? void 0 : _this.props.onMouseOver(e);
    };

    _this.handleMouseEnter = function (e) {
      _this.props.onMouseEnter == null ? void 0 : _this.props.onMouseEnter(e);
    };

    _this.handleMouseLeave = function (e) {
      _this.props.onMouseLeave == null ? void 0 : _this.props.onMouseLeave(e);
    };

    return _this;
  }

  var _proto = Radio.prototype;

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return _this2.renderMain();
    });
  }
  /**
   * @public
   */
  ;

  _proto.focus = function focus() {
    var _this$inputEl$current;

    (_this$inputEl$current = this.inputEl.current) == null ? void 0 : _this$inputEl$current.focus();
  }
  /**
   * @public
   */
  ;

  _proto.blur = function blur() {
    var _this$inputEl$current2;

    (_this$inputEl$current2 = this.inputEl.current) == null ? void 0 : _this$inputEl$current2.blur();
  };

  _proto.renderMain = function renderMain() {
    var _cn;

    var _this$props = this.props,
        active = _this$props.active,
        children = _this$props.children,
        _this$props$disabled = _this$props.disabled,
        disabled = _this$props$disabled === void 0 ? this.context.disabled : _this$props$disabled,
        _this$props$warning = _this$props.warning,
        warning = _this$props$warning === void 0 ? this.context.warning : _this$props$warning,
        _this$props$error = _this$props.error,
        error = _this$props$error === void 0 ? this.context.error : _this$props$error,
        focused = _this$props.focused,
        pressed = _this$props.pressed,
        hovered = _this$props.hovered,
        onMouseOver = _this$props.onMouseOver,
        onMouseEnter = _this$props.onMouseEnter,
        onMouseLeave = _this$props.onMouseLeave,
        onValueChange = _this$props.onValueChange,
        className = _this$props.className,
        style = _this$props.style,
        rest = _objectWithoutPropertiesLoose(_this$props, ["active", "children", "disabled", "warning", "error", "focused", "pressed", "hovered", "onMouseOver", "onMouseEnter", "onMouseLeave", "onValueChange", "className", "style"]);

    var radioClassNames = cn((_cn = {}, _cn[jsStyles.radio(this.theme)] = true, _cn[jsStyles.checked(this.theme)] = this.props.checked, _cn[jsStyles.focus(this.theme)] = this.props.focused, _cn[jsStyles.error(this.theme)] = error, _cn[jsStyles.warning(this.theme)] = warning, _cn[jsStyles.disabled(this.theme)] = disabled, _cn));
    var value;

    if (typeof this.props.value === 'string' || typeof this.props.value === 'number') {
      value = this.props.value;
    }

    var inputProps = _extends({}, rest, {
      type: 'radio',
      className: jsStyles.input(),
      disabled: disabled,
      tabIndex: this.props.tabIndex,
      value: value,
      ref: this.inputEl,
      onChange: this.handleChange
    });

    var labelProps = {
      className: jsStyles.root(),
      onMouseOver: this.handleMouseOver,
      onMouseEnter: this.handleMouseEnter,
      onMouseLeave: this.handleMouseLeave
    };

    if (this._isInRadioGroup()) {
      var checked = this.props.value === this.context.activeItem;
      inputProps.checked = checked;
      inputProps.name = this.context.name;
      radioClassNames = cn(radioClassNames, checked && jsStyles.checked(this.theme));
    }

    return React.createElement("label", labelProps, React.createElement("input", inputProps), React.createElement("span", {
      className: radioClassNames
    }, React.createElement("span", {
      className: jsStyles.placeholder()
    })), this.props.children && this.renderLabel());
  };

  _proto.renderLabel = function renderLabel() {
    var _cn2;

    var labelClassNames = cn((_cn2 = {}, _cn2[jsStyles.label(this.theme)] = true, _cn2[jsStyles.labelDisabled()] = !!(this.props.disabled || this.context.disabled), _cn2));
    return React.createElement("div", {
      className: labelClassNames
    }, this.props.children);
  };

  return Radio;
}(React.Component);
Radio.__KONTUR_REACT_UI__ = 'Radio';
Radio.contextTypes = {
  activeItem: PropTypes.any,
  onSelect: PropTypes.func,
  name: PropTypes.string,
  disabled: PropTypes.bool,
  error: PropTypes.bool,
  warning: PropTypes.bool
};
Radio.defaultProps = {
  focused: false
};