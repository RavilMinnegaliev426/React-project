import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import cn from 'classnames';
import { Popup } from "../../../internal/Popup";
import { jsStyles } from "../Hint.styles";
var HINT_BACKGROUND_COLOR = 'rgba(51, 51, 51, 0.8)';
var HINT_BORDER_COLOR = 'transparent';
var POPUP_MARGIN = 15;
var PIN_OFFSET = 8;
var Positions = ['top center', 'top left', 'top right', 'bottom center', 'bottom left', 'bottom right', 'left middle', 'left top', 'left bottom', 'right middle', 'right top', 'right bottom'];
export var Hint =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Hint, _React$Component);

  function Hint() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      opened: _this.props.manual ? !!_this.props.opened : false
    };
    _this.timer = null;

    _this.getPositions = function () {
      return Positions.filter(function (x) {
        return x.startsWith(_this.props.pos);
      });
    };

    _this.handleMouseEnter = function (e) {
      if (!_this.props.manual && !_this.timer) {
        _this.timer = window.setTimeout(_this.open, 400);
      }

      if (_this.props.onMouseEnter) {
        _this.props.onMouseEnter(e);
      }
    };

    _this.handleMouseLeave = function (e) {
      if (!_this.props.manual && _this.timer) {
        clearTimeout(_this.timer);
        _this.timer = null;

        _this.setState({
          opened: false
        });
      }

      if (_this.props.onMouseLeave) {
        _this.props.onMouseLeave(e);
      }
    };

    _this.open = function () {
      _this.setState({
        opened: true
      });
    };

    return _this;
  }

  var _proto = Hint.prototype;

  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
    if (!nextProps.manual) {
      return;
    }

    if (nextProps.opened !== this.props.opened) {
      this.setState({
        opened: !!nextProps.opened
      });
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.timer) {
      clearTimeout(this.timer);
      this.timer = null;
    }
  };

  _proto.render = function render() {
    return React.createElement(Popup, {
      hasPin: true,
      margin: POPUP_MARGIN,
      opened: this.state.opened,
      anchorElement: this.props.children,
      positions: this.getPositions(),
      backgroundColor: HINT_BACKGROUND_COLOR,
      borderColor: HINT_BORDER_COLOR,
      disableAnimations: this.props.disableAnimations,
      pinOffset: PIN_OFFSET,
      onMouseEnter: this.handleMouseEnter,
      onMouseLeave: this.handleMouseLeave,
      useWrapper: this.props.useWrapper
    }, this.renderContent());
  };

  _proto.renderContent = function renderContent() {
    var _cn;

    if (!this.props.text) {
      return null;
    }

    var _this$props = this.props,
        pos = _this$props.pos,
        maxWidth = _this$props.maxWidth;
    var className = cn((_cn = {}, _cn[jsStyles.content()] = true, _cn[jsStyles.contentCenter()] = pos === 'top' || pos === 'bottom', _cn));
    return React.createElement("div", {
      className: className,
      style: {
        maxWidth: maxWidth
      }
    }, this.props.text);
  };

  return Hint;
}(React.Component);
Hint.__KONTUR_REACT_UI__ = 'Hint';
Hint.defaultProps = {
  pos: 'top',
  manual: false,
  opened: false,
  maxWidth: 200,
  disableAnimations: Boolean(process.env.enableReactTesting),
  useWrapper: true
};