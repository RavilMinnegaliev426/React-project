import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import { CSSTransition } from 'react-transition-group';
import cn from 'classnames';
import { isKeyEscape } from "../../../lib/events/keyboard/identifiers";
import * as LayoutEvents from "../../../lib/LayoutEvents";
import { stopPropagation } from "../../../lib/events/stopPropagation";
import { HideBodyVerticalScroll } from "../../../internal/HideBodyVerticalScroll";
import { ModalStack } from "../../../lib/ModalStack";
import { RenderContainer } from "../../../internal/RenderContainer";
import { RenderLayer } from "../../../internal/RenderLayer";
import { ZIndex } from "../../../internal/ZIndex";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { SidePageBody } from "../SidePageBody";
import { SidePageContainer } from "../SidePageContainer";
import { SidePageContext } from "../SidePageContext";
import { SidePageFooter } from "../SidePageFooter";
import { SidePageHeader } from "../SidePageHeader";
import { jsStyles } from "../SidePage.styles";
var TRANSITION_TIMEOUT = 200;
/**
                               * Сайдпейдж
                               *
                               * Содержит в себе три компоненты: **SidePage.Header**,
                               * **SidePage.Body** и **SidePage.Footer**
                               *
                               * Для отображения серой плашки в футере в компонент
                               * **Footer** необходимо передать пропс **panel**
                               */

export var SidePage =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(SidePage, _React$Component);

  function SidePage() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {};
    _this.theme = void 0;
    _this.stackSubscription = null;
    _this.layoutRef = null;
    _this.footer = null;

    _this.updateLayout = function () {
      if (_this.footer) {
        _this.footer.update();
      }
    };

    _this.getWidth = function () {
      if (!_this.layoutRef) {
        return 'auto';
      }

      return _this.layoutRef.getBoundingClientRect().width;
    };

    _this.handleStackChange = function (stack) {
      var sidePages = stack.filter(function (x) {
        return x instanceof SidePage;
      });
      var currentSidePagePosition = sidePages.indexOf(_assertThisInitialized(_this));
      var isSidePageOnStackTop = stack[0] instanceof SidePage;
      var hasMargin = sidePages.length > 1 && currentSidePagePosition === sidePages.length - 1;
      var hasShadow = sidePages.length < 3 || currentSidePagePosition > sidePages.length - 3;
      var hasBackground = currentSidePagePosition === sidePages.length - 1 && isSidePageOnStackTop;

      _this.setState({
        stackPosition: stack.indexOf(_assertThisInitialized(_this)),
        hasMargin: hasMargin,
        hasShadow: hasShadow,
        hasBackground: hasBackground
      });
    };

    _this.handleClickOutside = function (e) {
      if (_this.state.stackPosition === 0 && !_this.props.ignoreBackgroundClick) {
        // ignore mousedown on window scrollbar
        if (e instanceof MouseEvent && e.clientX > document.documentElement.clientWidth) {
          return;
        }

        _this.requestClose();
      }
    };

    _this.handleKeyDown = function (e) {
      if (_this.state.stackPosition !== 0) {
        return;
      }

      if (isKeyEscape(e)) {
        stopPropagation(e);

        _this.requestClose();
      }
    };

    _this.requestClose = function () {
      if (_this.props.disableClose) {
        return;
      }

      if (_this.props.onClose) {
        _this.props.onClose();
      }
    };

    _this.footerRef = function (ref) {
      _this.footer = ref;
    };

    return _this;
  }

  var _proto = SidePage.prototype;

  _proto.componentDidMount = function componentDidMount() {
    window.addEventListener('keydown', this.handleKeyDown);
    this.stackSubscription = ModalStack.add(this, this.handleStackChange);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener('keydown', this.handleKeyDown);

    if (this.stackSubscription != null) {
      this.stackSubscription.remove();
    }

    ModalStack.remove(this);
  }
  /**
   * Обновляет разметку компонента.
   * @public
   */
  ;

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return _this2.renderMain();
    });
  };

  _proto.renderMain = function renderMain() {
    var _this$props = this.props,
        blockBackground = _this$props.blockBackground,
        disableAnimations = _this$props.disableAnimations;
    return React.createElement(RenderContainer, null, React.createElement("div", null, blockBackground && this.renderShadow(), React.createElement(CSSTransition, {
      "in": true,
      classNames: this.getTransitionNames(),
      appear: !disableAnimations,
      enter: !disableAnimations,
      exit: false,
      timeout: {
        enter: TRANSITION_TIMEOUT,
        exit: TRANSITION_TIMEOUT
      }
    }, this.renderContainer())));
  };

  _proto.renderContainer = function renderContainer() {
    var _cn,
        _this3 = this;

    var _this$props2 = this.props,
        width = _this$props2.width,
        blockBackground = _this$props2.blockBackground,
        fromLeft = _this$props2.fromLeft;
    return React.createElement(ZIndex, {
      priority: 'Sidepage',
      "data-tid": "SidePage__root",
      className: cn((_cn = {}, _cn[jsStyles.root()] = true, _cn[jsStyles.leftSide(this.theme)] = Boolean(fromLeft), _cn)),
      onScroll: LayoutEvents.emit,
      createStackingContext: true,
      style: {
        width: width || (blockBackground ? 800 : 500)
      }
    }, React.createElement(RenderLayer, {
      onClickOutside: this.handleClickOutside,
      active: true
    }, React.createElement("div", {
      "data-tid": "SidePage__container",
      className: cn(jsStyles.container(this.theme), this.state.hasShadow && jsStyles.shadow(this.theme)),
      style: this.getSidebarStyle()
    }, React.createElement("div", {
      ref: function ref(_) {
        return _this3.layoutRef = _;
      },
      className: jsStyles.layout()
    }, React.createElement(SidePageContext.Provider, {
      value: {
        requestClose: this.requestClose,
        getWidth: this.getWidth,
        updateLayout: this.updateLayout,
        footerRef: this.footerRef
      }
    }, this.props.children)))));
  };

  _proto.renderShadow = function renderShadow() {
    var _cn2;

    return React.createElement(ZIndex, {
      priority: 'Sidepage',
      className: jsStyles.overlay(),
      onScroll: LayoutEvents.emit
    }, React.createElement(HideBodyVerticalScroll, {
      key: "hbvs"
    }), React.createElement("div", {
      key: "overlay",
      className: cn((_cn2 = {}, _cn2[jsStyles.background()] = true, _cn2[jsStyles.backgroundGray()] = this.state.hasBackground, _cn2))
    }));
  };

  _proto.getSidebarStyle = function getSidebarStyle() {
    var sidePageStyle = {};

    if (this.state.hasMargin) {
      if (this.props.fromLeft) {
        sidePageStyle.marginLeft = 20;
      } else {
        sidePageStyle.marginRight = 20;
      }
    }

    return sidePageStyle;
  };

  _proto.getTransitionNames = function getTransitionNames() {
    var transition = this.props.fromLeft ? jsStyles.transitionRight : jsStyles.transitionLeft;
    return {
      enter: transition(),
      enterActive: jsStyles.transitionActive(),
      exit: jsStyles.transitionLeave(),
      exitActive: jsStyles.transitionLeaveActive(),
      appear: transition(),
      appearActive: jsStyles.transitionActive()
    };
  };

  return SidePage;
}(React.Component);
SidePage.__KONTUR_REACT_UI__ = 'SidePage';
SidePage.Header = SidePageHeader;
SidePage.Body = SidePageBody;
SidePage.Footer = SidePageFooter;
SidePage.Container = SidePageContainer;