import React from 'react';
import PropTypes from 'prop-types';
import { ButtonSize, ButtonUse } from '../Button';
import { Nullable } from '../../typings/utility-types';
import { Item } from './Item';
export interface ButtonParams {
    disabled?: boolean;
    label: React.ReactNode;
    onClick: () => void;
    onKeyDown: (event: React.KeyboardEvent<HTMLElement>) => void;
    opened: boolean;
    isPlaceholder: boolean;
}
export interface SelectProps<TValue, TItem> {
    /** @ignore */
    _icon?: React.ReactElement<any>;
    /** @ignore */
    _renderButton?: (params: ButtonParams) => React.ReactNode;
    defaultValue?: TValue;
    /** @deprecated @ignore */
    diadocLinkIcon?: React.ReactElement<any>;
    /**
     * Отключает использование портала
     */
    disablePortal?: boolean;
    disabled?: boolean;
    /**
     * Визуально показать наличие ошибки.
     */
    error?: boolean;
    filterItem?: (value: TValue, item: TItem, pattern: string) => boolean;
    /**
     * Набор значений. Поддерживаются любые перечисляемые типы, в том числе
     * `Array`, `Map`, `Immutable.Map`.
     *
     * Элементы воспринимаются следующим образом: если элемент — это массив, то
     * первый элемент является значением, второй — отображается в списке,
     * а третий – комментарий;
     * если элемент не является массивом, то он используется и для отображения,
     * и для значения.
     *
     * Для вставки разделителя можно использовать `Select.SEP`.
     *
     * Вставить невыделяемый элемент со своей разметкой можно так:
     * ```
     * <Select ...
     *   items={[Select.static(() => <div>My Element</div>)]}
     * />
     * ```
     *
     * Чтобы добавить стандартный отступ для статического элемента:
     * ```
     * <Select.Item>My Element</Select.Item>
     * ```
     */
    items?: Array<[TValue, TItem, React.ReactNode?] | TItem | React.ReactElement | (() => React.ReactElement)>;
    maxMenuHeight?: number;
    maxWidth?: React.CSSProperties['maxWidth'];
    menuAlign?: 'left' | 'right';
    menuWidth?: React.CSSProperties['width'];
    onValueChange?: (value: TValue) => void;
    onClose?: () => void;
    onMouseEnter?: (e: React.MouseEvent<HTMLElement>) => void;
    onMouseLeave?: (e: React.MouseEvent<HTMLElement>) => void;
    onMouseOver?: (e: React.MouseEvent<HTMLElement>) => void;
    onKeyDown?: (e: React.KeyboardEvent<HTMLElement>) => void;
    onOpen?: () => void;
    placeholder?: React.ReactNode;
    /**
     * Функция для отрисовки элемента в выпадающем списке. Аргументы — *value*,
     * *item*.
     */
    renderItem?: (value: TValue, item?: TItem) => React.ReactNode;
    /**
     * Функция для отрисовки выбранного элемента. Аргументы — *value*, *item*.
     */
    renderValue?: (value: TValue, item?: TItem) => React.ReactNode;
    /**
     * Функция для сравнения `value` с элементом из `items`
     */
    areValuesEqual?: (value1: TValue, value2: TValue) => boolean;
    /**
     * Показывать строку поиска в списке.
     */
    search?: boolean;
    value?: TValue;
    width?: number | string;
    warning?: boolean;
    use?: ButtonUse;
    size?: ButtonSize;
    onFocus?: React.FocusEventHandler<HTMLElement>;
    onBlur?: React.FocusEventHandler<HTMLElement>;
}
export interface SelectState<TValue> {
    opened: boolean;
    searchPattern?: string;
    value: Nullable<TValue>;
}
export declare class Select<TValue = {}, TItem = {}> extends React.Component<SelectProps<TValue, TItem>, SelectState<TValue>> {
    static __KONTUR_REACT_UI__: string;
    static propTypes: {
        areValuesEqual: PropTypes.Requireable<(...args: any[]) => any>;
        defaultValue: PropTypes.Requireable<any>;
        disablePortal: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        error: PropTypes.Requireable<boolean>;
        filterItem: PropTypes.Requireable<(...args: any[]) => any>;
        items: PropTypes.Requireable<object>;
        maxMenuHeight: PropTypes.Requireable<number>;
        maxWidth: PropTypes.Requireable<string | number>;
        placeholder: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        renderItem: PropTypes.Requireable<(...args: any[]) => any>;
        renderValue: PropTypes.Requireable<(...args: any[]) => any>;
        search: PropTypes.Requireable<boolean>;
        value: PropTypes.Requireable<any>;
        width: PropTypes.Requireable<string | number>;
        onValueChange: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
        onKeyDown: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: {
        renderValue: typeof renderValue;
        renderItem: typeof renderItem;
        areValuesEqual: typeof areValuesEqual;
        filterItem: typeof filterItem;
        use: string;
    };
    static Item: typeof Item;
    static SEP: () => JSX.Element;
    static static: (element: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | (() => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>)) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | (() => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>);
    state: SelectState<TValue>;
    private theme;
    private readonly locale;
    private menu;
    private buttonElement;
    private getProps;
    componentDidUpdate(_prevProps: SelectProps<TValue, TItem>, prevState: SelectState<TValue>): void;
    render(): JSX.Element;
    /**
     * @public
     */
    open: () => void;
    /**
     * @public
     */
    close: () => void;
    /**
     * @public
     */
    focus: () => void;
    private renderMain;
    private renderLabel;
    private renderDefaultButton;
    private renderLinkButton;
    private renderMenu;
    private dropdownContainerGetParent;
    private focusInput;
    private refMenu;
    private toggle;
    private handleKey;
    private handleSearch;
    private select;
    private getValue;
    private mapItems;
    private getItemByValue;
    private buttonRef;
    private getButton;
}
declare function renderValue(value: any, item: any): any;
declare function renderItem(value: any, item: any): any;
declare function areValuesEqual(value1: any, value2: any): boolean;
declare function filterItem(value: any, item: any, pattern: string): boolean;
export {};
