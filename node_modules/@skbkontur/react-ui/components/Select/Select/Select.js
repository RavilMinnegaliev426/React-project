import _extends from "@babel/runtime/helpers/esm/extends";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";

var _dec, _class, _class2, _temp;

import React from 'react';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import invariant from 'invariant';
import warning from 'warning';
import cn from 'classnames';
import { isKeyArrowDown, isKeyArrowUp, isKeyArrowVertical, isKeyEnter, isKeyEscape, isKeySpace } from "../../../lib/events/keyboard/identifiers";
import { locale } from "../../../lib/locale/decorators";
import { reactGetTextContent } from "../../../lib/reactGetTextContent";
import { Button } from "../../Button";
import { DropdownContainer } from "../../../internal/DropdownContainer";
import { filterProps } from "../../../lib/filterProps";
import { Input } from "../../Input";
import { Link } from "../../Link";
import { Menu } from "../../../internal/Menu";
import { MenuItem } from "../../MenuItem";
import { MenuSeparator } from "../../MenuSeparator";
import { RenderLayer } from "../../../internal/RenderLayer";
import { createPropsGetter } from "../../../lib/createPropsGetter";
import { isFunction } from "../../../lib/utils";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { Item } from "../Item";
import { SelectLocaleHelper } from "../locale";
import { jsStyles } from "../Select.styles";
var PASS_BUTTON_PROPS = {
  disabled: true,
  error: true,
  use: true,
  size: true,
  warning: true,
  onMouseEnter: true,
  onMouseLeave: true,
  onMouseOver: true
};
export var Select = (_dec = locale('Select', SelectLocaleHelper), _dec(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Select, _React$Component);

  function Select() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      opened: false,
      value: _this.props.defaultValue
    };
    _this.theme = void 0;
    _this.locale = void 0;
    _this.menu = void 0;
    _this.buttonElement = null;
    _this.getProps = createPropsGetter(Select.defaultProps);

    _this.open = function () {
      if (!_this.state.opened) {
        _this.setState({
          opened: true
        });

        if (_this.props.onOpen) {
          _this.props.onOpen();
        }
      }
    };

    _this.close = function () {
      if (_this.state.opened) {
        _this.setState({
          opened: false
        });

        if (_this.props.onClose) {
          _this.props.onClose();
        }
      }
    };

    _this.focus = function () {
      if (_this.buttonElement && _this.buttonElement.focus) {
        _this.buttonElement.focus();
      }
    };

    _this.dropdownContainerGetParent = function () {
      return ReactDOM.findDOMNode(_assertThisInitialized(_this));
    };

    _this.focusInput = function (input) {
      // fix cases when an Input is rendered in portal
      setTimeout(function () {
        return input == null ? void 0 : input.focus();
      }, 0);
    };

    _this.refMenu = function (menu) {
      _this.menu = menu;
    };

    _this.toggle = function () {
      if (_this.state.opened) {
        _this.close();
      } else {
        _this.open();
      }
    };

    _this.handleKey = function (e) {
      if (!_this.state.opened) {
        if (isKeySpace(e) || isKeyArrowVertical(e)) {
          e.preventDefault();

          _this.open();
        }
      } else {
        switch (true) {
          case isKeyEscape(e):
            _this.focus();

            _this.close();

            break;

          case isKeyArrowUp(e):
            e.preventDefault();

            if (_this.menu) {
              _this.menu.up();
            }

            break;

          case isKeyArrowDown(e):
            e.preventDefault();

            if (_this.menu) {
              _this.menu.down();
            }

            break;

          case isKeyEnter(e):
            e.preventDefault(); // To prevent form submission.

            if (_this.menu) {
              _this.menu.enter(e);
            }

            break;
        }
      }

      if (_this.props.onKeyDown) {
        _this.props.onKeyDown(e);
      }
    };

    _this.handleSearch = function (value) {
      _this.setState({
        searchPattern: value
      });
    };

    _this.buttonRef = function (element) {
      _this.buttonElement = element;
    };

    _this.getButton = function (buttonParams) {
      var button = _this.props._renderButton ? _this.props._renderButton(buttonParams) : _this.renderDefaultButton(buttonParams);
      var buttonElement = React.Children.only(button);
      return React.isValidElement(buttonElement) ? React.cloneElement(buttonElement, {
        ref: _this.buttonRef,
        onFocus: _this.props.onFocus,
        onBlur: _this.props.onBlur
      }) : buttonElement;
    };

    return _this;
  }

  var _proto = Select.prototype;

  _proto.componentDidUpdate = function componentDidUpdate(_prevProps, prevState) {
    if (!prevState.opened && this.state.opened) {
      window.addEventListener('popstate', this.close);
    }

    if (prevState.opened && !this.state.opened) {
      window.removeEventListener('popstate', this.close);
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return _this2.renderMain();
    });
  }
  /**
   * @public
   */
  ;

  _proto.renderMain = function renderMain() {
    var _this$renderLabel = this.renderLabel(),
        label = _this$renderLabel.label,
        isPlaceholder = _this$renderLabel.isPlaceholder;

    var buttonParams = {
      opened: this.state.opened,
      label: label,
      isPlaceholder: isPlaceholder,
      onClick: this.toggle,
      onKeyDown: this.handleKey
    };
    var style = {
      width: this.props.width,
      maxWidth: this.props.maxWidth || undefined
    };
    var button = this.getButton(buttonParams);
    return React.createElement(RenderLayer, {
      onClickOutside: this.close,
      onFocusOutside: this.close,
      active: this.state.opened
    }, React.createElement("span", {
      className: jsStyles.root(this.theme),
      style: style
    }, button, !this.props.disabled && this.state.opened && this.renderMenu()));
  };

  _proto.renderLabel = function renderLabel() {
    var value = this.getValue();
    var item = this.getItemByValue(value);

    if (item != null || value != null) {
      return {
        label: this.getProps().renderValue(value, item),
        isPlaceholder: false
      };
    }

    return {
      label: React.createElement("span", null, this.props.placeholder || this.locale.placeholder),
      isPlaceholder: true
    };
  };

  _proto.renderDefaultButton = function renderDefaultButton(params) {
    var _cn;

    if (this.props.diadocLinkIcon) {
      warning(false, "diadocLinkIcon has been deprecated");
      return this.renderLinkButton(params);
    }

    var buttonProps = _extends({}, filterProps(this.props, PASS_BUTTON_PROPS), {
      align: 'left',
      disabled: this.props.disabled,
      _noPadding: true,
      width: '100%',
      onClick: params.onClick,
      onKeyDown: params.onKeyDown,
      active: params.opened
    });

    if (this.props._icon) {
      Object.assign(buttonProps, {
        _noPadding: false,
        _noRightPadding: true,
        icon: this.props._icon
      });
    }

    var labelProps = {
      className: cn((_cn = {}, _cn[jsStyles.label()] = this.props.use !== 'link', _cn[jsStyles.labelWithLeftIcon()] = !!this.props._icon, _cn[jsStyles.placeholder(this.theme)] = params.isPlaceholder, _cn[jsStyles.customUsePlaceholder()] = params.isPlaceholder && this.props.use !== 'default', _cn)),
      style: {
        paddingRight: (buttonProps.size === 'large' ? 31 : 28) + (this.props._icon ? 10 : 0)
      }
    };
    var useIsCustom = this.props.use !== 'default';
    return React.createElement(Button, buttonProps, React.createElement("span", labelProps, React.createElement("span", {
      className: jsStyles.labelText()
    }, params.label)), React.createElement("div", {
      className: jsStyles.arrowWrap()
    }, React.createElement("div", {
      className: cn(jsStyles.arrow(this.theme), useIsCustom && jsStyles.customUseArrow())
    })));
  };

  _proto.renderLinkButton = function renderLinkButton(params) {
    var linkProps = {
      disabled: params.disabled,
      icon: this.props.diadocLinkIcon,
      _button: true,
      _buttonOpened: params.opened,
      onClick: params.onClick,
      onKeyDown: params.onKeyDown
    };
    return React.createElement(Link, linkProps, params.label);
  };

  _proto.renderMenu = function renderMenu() {
    var _this3 = this;

    var search = this.props.search ? React.createElement("div", {
      className: jsStyles.search()
    }, React.createElement(Input, {
      ref: this.focusInput,
      onValueChange: this.handleSearch,
      width: "100%"
    })) : null;
    var value = this.getValue();
    return React.createElement(DropdownContainer, {
      getParent: this.dropdownContainerGetParent,
      offsetY: -1,
      align: this.props.menuAlign,
      disablePortal: this.props.disablePortal
    }, React.createElement(Menu, {
      ref: this.refMenu,
      width: this.props.menuWidth,
      onItemClick: this.close,
      maxHeight: this.props.maxMenuHeight
    }, search, this.mapItems(function (iValue, item, i, comment) {
      if (isFunction(item)) {
        var element = item();

        if (React.isValidElement(element)) {
          return React.cloneElement(element, {
            key: i
          });
        }

        return null;
      }

      if (React.isValidElement(item)) {
        return React.cloneElement(item, {
          key: i
        });
      }

      return React.createElement(MenuItem, {
        key: i,
        state: _this3.getProps().areValuesEqual(iValue, value) ? 'selected' : null,
        onClick: _this3.select.bind(_this3, iValue),
        comment: comment
      }, _this3.getProps().renderItem(iValue, item));
    })));
  };

  _proto.select = function select(value) {
    this.focus();
    this.setState({
      opened: false,
      value: value
    });

    if (this.props.onValueChange && !this.getProps().areValuesEqual(this.getValue(), value)) {
      this.props.onValueChange(value);
    }
  };

  _proto.getValue = function getValue() {
    if (this.props.value !== undefined) {
      return this.props.value;
    }

    return this.state.value;
  };

  _proto.mapItems = function mapItems(fn) {
    var items = this.props.items;

    if (!items) {
      return [];
    }

    var pattern = this.state.searchPattern && this.state.searchPattern.toLowerCase();
    var result = [];
    var index = 0;

    for (var _iterator = items, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var entry = _ref;

      var _normalizeEntry = normalizeEntry(entry),
          _value = _normalizeEntry[0],
          _item = _normalizeEntry[1],
          _comment = _normalizeEntry[2];

      if (!pattern || this.getProps().filterItem(_value, _item, pattern)) {
        result.push(fn(_value, _item, index, _comment));
        ++index;
      }
    }

    return result;
  };

  _proto.getItemByValue = function getItemByValue(value) {
    if (value === null || value === undefined) {
      return null;
    }

    var items = this.props.items || [];

    for (var _iterator2 = items, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var entry = _ref2;

      var _normalizeEntry2 = normalizeEntry(entry),
          itemValue = _normalizeEntry2[0],
          _item2 = _normalizeEntry2[1];

      if (this.getProps().areValuesEqual(itemValue, value)) {
        return _item2;
      }
    }

    return null;
  };

  return Select;
}(React.Component), _class2.__KONTUR_REACT_UI__ = 'Select', _class2.propTypes = {
  areValuesEqual: PropTypes.func,
  defaultValue: PropTypes.any,
  disablePortal: PropTypes.bool,
  disabled: PropTypes.bool,
  error: PropTypes.bool,
  filterItem: PropTypes.func,
  items: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),
  maxMenuHeight: PropTypes.number,
  maxWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  placeholder: PropTypes.node,
  renderItem: PropTypes.func,
  renderValue: PropTypes.func,
  search: PropTypes.bool,
  value: PropTypes.any,
  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  onValueChange: PropTypes.func,
  onMouseEnter: PropTypes.func,
  onMouseLeave: PropTypes.func,
  onMouseOver: PropTypes.func,
  onKeyDown: PropTypes.func
}, _class2.defaultProps = {
  renderValue: renderValue,
  renderItem: renderItem,
  areValuesEqual: areValuesEqual,
  filterItem: filterItem,
  use: 'default'
}, _class2.Item = Item, _class2.SEP = function () {
  return React.createElement(MenuSeparator, null);
}, _class2["static"] = function (element) {
  invariant(React.isValidElement(element) || typeof element === 'function', 'Select.static(element) expects element to be a valid react element.');
  return element;
}, _temp)) || _class);

function renderValue(value, item) {
  return item;
}

function renderItem(value, item) {
  return item;
}

function areValuesEqual(value1, value2) {
  return value1 === value2;
}

function normalizeEntry(entry) {
  if (Array.isArray(entry)) {
    return entry;
  } else {
    return [entry, entry, undefined];
  }
}

function filterItem(value, item, pattern) {
  if (item === Select.SEP) {
    return false;
  }

  if (React.isValidElement(item) || isFunction(item) && React.isValidElement(item = item())) {
    item = reactGetTextContent(item);
  }

  if (typeof item === 'number') {
    item = item.toString(10);
  }

  if (typeof item !== 'string') {
    return false;
  }

  return item.toLowerCase().indexOf(pattern) !== -1;
}