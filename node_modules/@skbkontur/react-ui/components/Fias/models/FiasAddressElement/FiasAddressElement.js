import _createClass from "@babel/runtime/helpers/esm/createClass";
import { FiasEstateStatuses, FiasFields, FiasStructureStatuses } from "../../types";
import { abbreviations } from "../../constants/abbreviations";
export var FiasAddressElement =
/*#__PURE__*/
function () {
  // Types (abbrevs) that match fields labels
  function FiasAddressElement(type, name, data) {
    var _this = this;

    this.type = type;
    this.name = name;
    this.data = data;

    this.isTypeMatchField = function (field) {
      var data = _this.data;

      if (data && data.abbreviation) {
        return FiasAddressElement.MATCHING_TYPES[data.abbreviation] === field;
      }

      return false;
    };

    this.removeData = function () {
      delete _this.data;
    };

    this.isEqualTo = function (element) {
      if (element && element.fiasId) {
        return _this.fiasId === element.fiasId;
      }

      return false;
    };
  }

  var _proto = FiasAddressElement.prototype;

  _proto.getText = function getText(withoutType) {
    if (withoutType === void 0) {
      withoutType = false;
    }

    var name = this.name,
        data = this.data;
    var result = '';

    if (!name) {
      return '';
    }

    if (data) {
      var abbreviation = data.abbreviation;

      if (abbreviation) {
        var _type = !withoutType ? abbreviations[abbreviation] || abbreviation : '';

        switch (abbreviation) {
          case 'Чувашия':
            result = _type + " \u0427\u0443\u0432\u0430\u0448\u0438\u044F";
            break;

          case 'АО':
            {
              var text = name;

              if (name !== 'Ханты-Мансийский Автономный округ - Югра') {
                text += " " + _type;
              }

              result = text;
              break;
            }

          case 'Аобл':
          case 'край':
          case 'обл':
            result = name + " " + _type;
            break;

          case 'п':
            result = !withoutType ? (this.type === FiasFields.district ? 'поселение' : 'поселок') + " " + name : "" + name;
            break;

          default:
            result = _type + " " + name;
        }
      }

      if (this.type === FiasFields.stead) {
        result = ' ' + data.number;
      }

      if (this.type === FiasFields.house) {
        if (data.estateStatus !== FiasEstateStatuses.None) {
          switch (data.estateStatus) {
            case FiasEstateStatuses.Hold:
              result = result + " \u0432\u043B\u0430\u0434\u0435\u043D\u0438\u0435";
              break;

            case FiasEstateStatuses.House:
              result = result + " \u0434\u043E\u043C";
              break;

            case FiasEstateStatuses.HouseHold:
              result = result + " \u0434\u043E\u043C\u043E\u0432\u043B\u0430\u0434\u0435\u043D\u0438\u0435";
              break;
          }
        }

        if (data.number) {
          result = result + " " + data.number;
        }

        if (data.structureStatus && data.structureStatus !== FiasStructureStatuses.None && data.structureNumber) {
          switch (data.structureStatus) {
            case FiasStructureStatuses.Structure:
              result = result + " \u0441\u0442\u0440\u043E\u0435\u043D\u0438\u0435 " + data.structureNumber;
              break;

            case FiasStructureStatuses.Construction:
              result = result + " c\u043E\u043E\u0440\u0443\u0436\u0435\u043D\u0438\u0435 " + data.structureNumber;
              break;

            case FiasStructureStatuses.Liter:
              result = result + " \u043B\u0438\u0442\u0435\u0440\u0430 " + data.structureNumber;
              break;
          }
        }

        if (data.buildingNumber) {
          result = result + " \u043A\u043E\u0440\u043F\u0443\u0441 " + data.buildingNumber;
        }
      }

      if (this.type === FiasFields.room) {
        if (data) {
          result = "\u043A\u0432\u0430\u0440\u0442\u0438\u0440\u0430 " + name;
        } else {
          result = name;
        }
      }
    }

    return result.trim() || name;
  };

  _createClass(FiasAddressElement, [{
    key: "isFederalCity",
    get: function get() {
      if (!this.fiasId) {
        return false;
      }

      return FiasAddressElement.FEDERAL_CITIES.includes(this.fiasId);
    }
  }, {
    key: "fiasData",
    get: function get() {
      if (this.data && this.data.data) {
        return this.data.data;
      }
    }
  }, {
    key: "fiasId",
    get: function get() {
      if (this.data) {
        return this.data.fiasId;
      }
    }
  }, {
    key: "verifiableData",
    get: function get() {
      var type = this.type,
          data = this.data;

      if (data) {
        var _name = data.name,
            abbreviation = data.abbreviation,
            number = data.number,
            structureNumber = data.structureNumber,
            buildingNumber = data.buildingNumber,
            structureStatus = data.structureStatus;

        switch (type) {
          case FiasFields.house:
            return {
              number: number,
              structureNumber: structureNumber,
              structureStatus: structureStatus,
              buildingNumber: buildingNumber
            };

          default:
            return {
              name: _name,
              abbreviation: abbreviation
            };
        }
      }

      return {
        name: this.name
      };
    }
  }]);

  return FiasAddressElement;
}();
FiasAddressElement.MATCHING_TYPES = {
  'р-н': FiasFields.district,
  г: FiasFields.city,
  нп: FiasFields.settlement,
  ул: FiasFields.street
};
FiasAddressElement.FEDERAL_CITIES = ['0c5b2444-70a0-4932-980c-b4dc0d3f02b5', // Москва
'c2deb16a-0330-4f05-821f-1d09c93331e6', // Санкт-Петербург
'6fdecb78-893a-4e3f-a5ba-aa062459463b', // Севастополь
'63ed1a35-4be6-4564-a1ec-0c51f7383314' // Байконур
];