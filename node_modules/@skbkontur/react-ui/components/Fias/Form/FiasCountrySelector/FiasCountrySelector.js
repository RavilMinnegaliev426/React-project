import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";

var _dec, _class, _temp;

import React from 'react';
import { FiasLocaleHelper } from "../../locale";
import { FiasAddress } from "../../models/FiasAddress";
import { locale } from "../../../../lib/locale/decorators";
import { FiasComboBox } from "../FiasComboBox";
export var FiasCountrySelector = (_dec = locale('Fias', FiasLocaleHelper), _dec(_class = (_temp =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(FiasCountrySelector, _React$Component);

  function FiasCountrySelector() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.locale = void 0;

    _this.createItemsSource =
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(
      /*#__PURE__*/
      _regeneratorRuntime.mark(function _callee(prefix) {
        var _this$props, api, limit;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$props = _this.props, api = _this$props.api, limit = _this$props.limit;
                return _context.abrupt("return", api.searchCountry({
                  prefix: prefix,
                  limit: limit
                }).then(function (result) {
                  var success = result.success,
                      data = result.data,
                      error = result.error;
                  return success && data ? Promise.resolve(data.map(function (country) {
                    return new FiasAddress({
                      country: country
                    });
                  })) : Promise.reject(error);
                }));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();

    _this.renderItem = function (address) {
      var country = address.country;
      return country && country.fullName || '';
    };

    _this.renderValue = function (address) {
      var country = address.country;
      return country && country.fullName || '';
    };

    _this.renderNotFound = function () {
      return _this.locale.searchNotFound;
    };

    _this.valueToString = function (address) {
      var country = address.country;
      return country && country.fullName || '';
    };

    _this.handleValueChange = function (value) {
      var onValueChange = _this.props.onValueChange;

      if (onValueChange) {
        onValueChange(value.country);
      }
    };

    _this.onUnexpectedInput = function (query) {
      if (!query) {
        return new FiasAddress();
      }
    };

    return _this;
  }

  var _proto = FiasCountrySelector.prototype;

  _proto.render = function render() {
    var _this$props2 = this.props,
        country = _this$props2.country,
        limit = _this$props2.limit;
    var address = new FiasAddress({
      country: country
    });
    return React.createElement(FiasComboBox, {
      getItems: this.createItemsSource,
      value: address,
      renderItem: this.renderItem,
      renderValue: this.renderValue,
      valueToString: this.valueToString,
      onValueChange: this.handleValueChange,
      onUnexpectedInput: this.onUnexpectedInput,
      renderNotFound: this.renderNotFound,
      placeholder: this.locale.countryPlaceholder,
      width: '100%',
      drawArrow: false,
      searchOnFocus: false,
      limit: limit
    });
  };

  return FiasCountrySelector;
}(React.Component), _temp)) || _class);