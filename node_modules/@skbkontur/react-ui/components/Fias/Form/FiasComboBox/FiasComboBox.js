import _extends from "@babel/runtime/helpers/esm/extends";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import { ComboBox } from "../../../ComboBox";
import { reactGetTextContent } from "../../../../lib/reactGetTextContent";
import { escapeRegExpSpecChars } from "../../../../lib/utils";

var HighlightedText = function HighlightedText(_ref) {
  var children = _ref.children;
  var style = {
    backgroundColor: 'transparent',
    fontWeight: 'bold',
    color: 'inherit'
  };
  return React.createElement("mark", {
    style: style
  }, children);
};

export var FiasComboBox =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(FiasComboBox, _React$Component);

  function FiasComboBox() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      searchText: '',
      totalCount: 0
    };
    _this.combobox = null;

    _this.createRef = function (el) {
      _this.combobox = el;
    };

    _this.getItems = function (searchText) {
      var _this$props = _this.props,
          getItems = _this$props.getItems,
          limit = _this$props.limit;
      var promise = getItems ? getItems(searchText) : Promise.resolve([]);
      return promise.then(function (items) {
        _this.setState({
          totalCount: items.length
        });

        return items.slice(0, limit);
      });
    };

    _this.renderItem = function (item) {
      var node = _this.props.renderItem ? _this.props.renderItem(item) : item.label || '';
      return _this.highlight(reactGetTextContent(node));
    };

    _this.renderTotalCount = function (found, total) {
      return React.createElement("div", null, React.createElement("div", null, "\u041F\u043E\u043A\u0430\u0437\u0430\u043D\u043E ", found, " \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u043E\u0432."), React.createElement("div", null, "\u0423\u0442\u043E\u0447\u043D\u0438\u0442\u0435 \u0437\u0430\u043F\u0440\u043E\u0441, \u0447\u0442\u043E\u0431\u044B \u0443\u0432\u0438\u0434\u0435\u0442\u044C \u043E\u0441\u0442\u0430\u043B\u044C\u043D\u044B\u0435"));
    };

    _this.handleChange = function (item) {
      var _this$props2 = _this.props,
          onValueChange = _this$props2.onValueChange,
          valueToString = _this$props2.valueToString;

      if (onValueChange) {
        onValueChange(item);
      }

      _this.setState({
        searchText: valueToString ? valueToString(item) : ''
      });
    };

    _this.handleInputChange = function (query) {
      if (_this.props.onInputValueChange) {
        _this.props.onInputValueChange(query);
      }

      _this.setState({
        searchText: query
      });
    };

    _this.handleFocus = function () {
      if (_this.props.onFocus) {
        _this.props.onFocus();
      }

      var _this$props3 = _this.props,
          error = _this$props3.error,
          warning = _this$props3.warning;

      if ((error || warning) && _this.hasItems) {
        if (_this.combobox) {
          _this.combobox.search();
        }
      }
    };

    return _this;
  }

  var _proto = FiasComboBox.prototype;

  _proto.render = function render() {
    return React.createElement(ComboBox, _extends({}, this.props, {
      getItems: this.getItems,
      renderItem: this.renderItem,
      onValueChange: this.handleChange,
      onInputValueChange: this.handleInputChange,
      onFocus: this.handleFocus,
      totalCount: this.state.totalCount,
      renderTotalCount: this.renderTotalCount,
      ref: this.createRef
    }));
  };

  _proto.highlight = function highlight(str, lastMatchOnly) {
    if (lastMatchOnly === void 0) {
      lastMatchOnly = true;
    }

    var searchText = this.state.searchText;
    var regex = new RegExp(escapeRegExpSpecChars(searchText), 'ig'); // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec

    var matches = str.match(regex);

    if (!searchText || !matches || str === searchText) {
      return str;
    }

    var mismatches = str.split(regex);
    var result = mismatches.reduce(function (elements, text, i) {
      elements.push(React.createElement("span", null, text));
      var match = matches[i];

      if (match) {
        var isHighlighted = lastMatchOnly && !matches[i + 1];
        elements.push(isHighlighted ? React.createElement(HighlightedText, null, match) : React.createElement("span", null, match));
      }

      return elements;
    }, []);
    return React.createElement("div", null, result.map(function (element, i) {
      return React.cloneElement(element, {
        key: i
      });
    }));
  };

  _createClass(FiasComboBox, [{
    key: "hasItems",
    get: function get() {
      return this.state.totalCount > 0;
    }
  }]);

  return FiasComboBox;
}(React.Component);
FiasComboBox.defaultProps = ComboBox.defaultProps;