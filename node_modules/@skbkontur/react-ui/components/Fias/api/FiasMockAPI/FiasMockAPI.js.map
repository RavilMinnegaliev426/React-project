{"version":3,"sources":["FiasMockAPI.ts"],"names":["FiasAPIResultFactory","addresses","require","FiasMockAPI","verify","address","Promise","resolve","success","isValid","search","fiasId","searchText","field","parentFiasId","limit","fullAddress","data","getAddresses","searchCountry","options","filter","map"],"mappings":";;;;;;;;;;;;AAYA,SAASA,oBAAT,QAAqC,wBAArC;;AAEA,IAAMC,SAA6B,GAAGC,OAAO,CAAC,aAAD,CAA7C;;AAEA,WAAaC,WAAb;AACSC,EAAAA,MADT,iGACkB,iBAAOC,OAAP;AACPC,cAAAA,OAAO,CAACC,OAAR;AACLP,cAAAA,oBAAoB,CAACQ,OAArB,CAA6B;AAC3BH,gBAAAA,OAAO,EAAE,EADkB;AAE3BI,gBAAAA,OAAO,EAAE,IAFkB,EAA7B,CADK,CADO,0DADlB;;;;;AAUSC,EAAAA,MAVT,kGAUkB;AACdC,cAAAA,MADc,SACdA,MADc;AAEdC,cAAAA,UAFc,SAEdA,UAFc;AAGdC,cAAAA,KAHc,SAGdA,KAHc;AAIdC,cAAAA,YAJc,SAIdA,YAJc;AAKdC,cAAAA,KALc,SAKdA,KALc;AAMdC,cAAAA,WANc,SAMdA,WANc;;AAQVC,cAAAA,IARU,GAQiB,EARjB;;AAUd,kBAAIN,MAAJ,EAAY;AACVM,gBAAAA,IAAI,GAAG,CAAChB,SAAS,CAAC,CAAD,CAAV,CAAP;AACD;;AAED,kBAAIW,UAAJ,EAAgB;AACd,oBAAIC,KAAJ,EAAW;AACTI,kBAAAA,IAAI,GAAG,KAAI,CAACC,YAAL,CAAkBL,KAAlB,EAAyBG,WAAzB,CAAP;AACD,iBAFD,MAEO;AACLC,kBAAAA,IAAI,GAAGhB,SAAP;AACD;AACF,eApBa;;AAsBPK,cAAAA,OAAO,CAACC,OAAR,CAAgBP,oBAAoB,CAACQ,OAArB,CAA6BS,IAA7B,CAAhB,CAtBO,4DAVlB;;;AAmCSE,EAAAA,aAnCT,kGAmCyB,kBAAOC,OAAP;AACdd,cAAAA,OAAO,CAACC,OAAR,CAAgBP,oBAAoB,CAACQ,OAArB,CAA6B,EAA7B,CAAhB,CADc,4DAnCzB;;;AAuCUU,EAAAA,YAvCV,GAuCyB,UAACL,KAAD,EAAoBG,WAApB,EAAqE;AAC1F,WAAOf,SAAS;AACboB,IAAAA,MADI,CACG,UAAChB,OAAD,UAAkCA,OAAO,CAACQ,KAAD,CAAzC,EADH;AAEJS,IAAAA,GAFI,CAEA,UAACjB,OAAD;AACHW,QAAAA,WAAW;AACPX,QAAAA,OADO;;AAGJQ,QAAAA,KAHI,IAGIR,OAAO,CAACQ,KAAD,CAHX,QADR,GAFA,CAAP;;;AASD,GAjDH","sourcesContent":["import {\r\n  FiasAPIProvider,\r\n  FiasFields,\r\n  FiasAddressResponse,\r\n  FiasSearchOptions,\r\n  FiasSearchResponse,\r\n  FiasVerifyResponse,\r\n  FiasAPIResult,\r\n  FiasCountry,\r\n} from '../types';\r\nimport { FiasAddress } from '../models/FiasAddress';\r\n\r\nimport { FiasAPIResultFactory } from './FiasAPIResultFactory';\r\n\r\nconst addresses: FiasSearchResponse = require('./data.json');\r\n\r\nexport class FiasMockAPI implements FiasAPIProvider {\r\n  public verify = async (address: FiasAddress): Promise<FiasAPIResult<FiasVerifyResponse>> => {\r\n    return Promise.resolve(\r\n      FiasAPIResultFactory.success({\r\n        address: {},\r\n        isValid: true,\r\n      }),\r\n    );\r\n  };\r\n\r\n  public search = async ({\r\n    fiasId,\r\n    searchText,\r\n    field,\r\n    parentFiasId,\r\n    limit,\r\n    fullAddress,\r\n  }: FiasSearchOptions): Promise<FiasAPIResult<FiasSearchResponse>> => {\r\n    let data: FiasSearchResponse = [];\r\n\r\n    if (fiasId) {\r\n      data = [addresses[0]];\r\n    }\r\n\r\n    if (searchText) {\r\n      if (field) {\r\n        data = this.getAddresses(field, fullAddress);\r\n      } else {\r\n        data = addresses;\r\n      }\r\n    }\r\n\r\n    return Promise.resolve(FiasAPIResultFactory.success(data));\r\n  };\r\n\r\n  public searchCountry = async (options: FiasSearchOptions): Promise<FiasAPIResult<FiasCountry[]>> => {\r\n    return Promise.resolve(FiasAPIResultFactory.success([]));\r\n  };\r\n\r\n  private getAddresses = (field: FiasFields, fullAddress?: boolean): FiasAddressResponse[] => {\r\n    return addresses\r\n      .filter((address: FiasAddressResponse) => address[field])\r\n      .map((address: FiasAddressResponse) =>\r\n        fullAddress\r\n          ? address\r\n          : {\r\n              [field]: address[field],\r\n            },\r\n      );\r\n  };\r\n}\r\n"]}