{"version":3,"sources":["FiasAPI.ts"],"names":["FiasFields","abbreviations","FiasLogger","fetch","FiasAPIResultFactory","FiasAPI","baseUrl","version","fetchFn","regionsPromise","verify","address","query","directParent","search","send","createQuery","method","headers","Accept","body","JSON","stringify","convertForVerification","then","success","data","error","verifiedAddress","isValid","invalidLevel","toLowerCase","fail","message","fiasId","searchText","field","parentFiasId","limit","fullAddress","prefix","actual","emptyResult","status","resolveFiasId","text","trimSearchText","resolveAddress","region","searchRegions","house","searchHouse","stead","searchStead","room","searchRoom","searchAddressObject","levels","Promise","resolve","searchCountry","path","params","resultPromise","result","ok","json","reject","Error","warnings","fetchError","noBaseUrl","log","level","map","isStartsWithSearchText","str","includes","filter","name","code","searchStopWords","Object","keys","reduce","words","abbr","split","abbrWords","word","key","prototype","hasOwnProperty","call","param","undefined","Array","isArray","push","encodeURIComponent","join","replace","slice"],"mappings":"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","sourcesContent":["import {\r\n  FiasAddressObject,\r\n  FiasAddressResponse,\r\n  FiasAPIProvider,\r\n  FiasAPIResult,\r\n  FiasFetchFn,\r\n  FiasFetchResponse,\r\n  FiasCountry,\r\n  FiasId,\r\n  FiasFields,\r\n  FiasHouse,\r\n  FiasRoom,\r\n  FiasSearchOptions,\r\n  FiasSearchResponse,\r\n  FiasStead,\r\n  FiasVerifyResponse,\r\n} from '../types';\r\nimport { abbreviations } from '../constants/abbreviations';\r\nimport { FiasLogger } from '../logger/FiasLogger';\r\nimport { fetch } from '../../../lib/net/fetch';\r\nimport { FiasAddress } from '../models/FiasAddress';\r\n\r\nimport { FiasAPIResultFactory } from './FiasAPIResultFactory';\r\n\r\ninterface FiasSearchQuery {\r\n  [key: string]: string | number | boolean | FiasId | FiasFields[] | undefined;\r\n  address?: string;\r\n  prefix?: string;\r\n  parentFiasId?: FiasId;\r\n  levels?: FiasFields[];\r\n  fullAddress?: boolean;\r\n  directParent?: boolean;\r\n  limit?: number;\r\n  actual?: boolean;\r\n  version?: string;\r\n}\r\n\r\nexport class FiasAPI implements FiasAPIProvider {\r\n  private static searchStopWords: { [key: string]: boolean } = Object.keys(abbreviations).reduce((words, abbr) => {\r\n    return {\r\n      ...words,\r\n      ...abbreviations[abbr].split(' ').reduce((abbrWords, word) => ({ ...abbrWords, [word.toLowerCase()]: true }), {}),\r\n    };\r\n  }, {});\r\n\r\n  private static createQuery = (query: FiasSearchQuery): string => {\r\n    const params = [];\r\n    for (const key in query) {\r\n      if (Object.prototype.hasOwnProperty.call(query, key)) {\r\n        const param = query[key];\r\n        if (param !== undefined) {\r\n          if (key === 'levels' && Array.isArray(param)) {\r\n            for (const level of param) {\r\n              params.push(`level[]=${encodeURIComponent(level)}`);\r\n            }\r\n          } else {\r\n            params.push(`${key}=${encodeURIComponent(`${param}`)}`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return params.join('&');\r\n  };\r\n\r\n  private static trimSearchText = (searchText: string): string => {\r\n    return searchText\r\n      .toLowerCase()\r\n      .replace(/югра/g, '')\r\n      .replace(/(строение|сооружение|литера)\\s[а-я\\w]+/g, '')\r\n      .replace(/\\s-\\s/g, ' ')\r\n      .replace(/[,]/g, '')\r\n      .replace(/\\s[\\s]*/g, ' ')\r\n      .split(' ')\r\n      .filter(word => !FiasAPI.searchStopWords[word])\r\n      .slice(0, 6)\r\n      .join(' ');\r\n  };\r\n\r\n  private regionsPromise: Promise<FiasAPIResult<FiasSearchResponse>> | null = null;\r\n\r\n  constructor(private baseUrl: string = '', private version?: string, private fetchFn: FiasFetchFn = fetch) {}\r\n\r\n  public verify = (address: FiasAddress): Promise<FiasAPIResult<FiasVerifyResponse>> => {\r\n    const query = {\r\n      directParent: true,\r\n      search: false,\r\n    };\r\n    return this.send<FiasVerifyResponse[]>(`verify?${FiasAPI.createQuery(query)}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify([address.convertForVerification()]),\r\n    }).then(({ success, data, error }: FiasAPIResult<FiasVerifyResponse[]>) => {\r\n      if (success && data) {\r\n        const { address: verifiedAddress = {}, isValid = false, invalidLevel }: FiasVerifyResponse = data[0] || {};\r\n        return FiasAPIResultFactory.success<FiasVerifyResponse>({\r\n          address: verifiedAddress,\r\n          isValid,\r\n          ...(invalidLevel ? { invalidLevel: invalidLevel.toLowerCase() as FiasFields } : {}),\r\n        });\r\n      } else {\r\n        return FiasAPIResultFactory.fail<FiasVerifyResponse>(error && error.message);\r\n      }\r\n    });\r\n  };\r\n\r\n  public search = ({\r\n    fiasId,\r\n    searchText,\r\n    field,\r\n    parentFiasId,\r\n    limit,\r\n    fullAddress,\r\n    directParent,\r\n  }: FiasSearchOptions): Promise<FiasAPIResult<FiasSearchResponse>> => {\r\n    const query: FiasSearchQuery = {\r\n      prefix: searchText,\r\n      actual: true,\r\n      parentFiasId,\r\n      limit,\r\n      fullAddress,\r\n      directParent,\r\n      version: this.version,\r\n    };\r\n    const emptyResult = {\r\n      success: true,\r\n      status: 200,\r\n      data: [],\r\n    };\r\n\r\n    if (fiasId) {\r\n      return this.resolveFiasId(fiasId);\r\n    }\r\n\r\n    if (searchText) {\r\n      if (!field) {\r\n        const text = FiasAPI.trimSearchText(searchText);\r\n        if (text) {\r\n          return this.resolveAddress(text, limit);\r\n        }\r\n      } else {\r\n        switch (field) {\r\n          case FiasFields.region:\r\n            return this.searchRegions(searchText);\r\n          case FiasFields.house:\r\n            return this.searchHouse(query);\r\n          case FiasFields.stead:\r\n            return this.searchStead(query);\r\n          case FiasFields.room:\r\n            return this.searchRoom(query);\r\n          default:\r\n            return this.searchAddressObject({ ...query, levels: [field] });\r\n        }\r\n      }\r\n    }\r\n\r\n    return Promise.resolve(emptyResult);\r\n  };\r\n\r\n  public searchCountry = (query: { prefix: string; limit?: number }): Promise<FiasAPIResult<FiasCountry[]>> => {\r\n    return this.send(`countries?${FiasAPI.createQuery(query)}`);\r\n  };\r\n\r\n  private send = <Data>(path: string, params = {}): Promise<FiasAPIResult<Data>> => {\r\n    const resultPromise = this.baseUrl\r\n      ? this.fetchFn(`${this.baseUrl}${path}`, {\r\n          method: 'GET',\r\n          ...params,\r\n        }).then((result: FiasFetchResponse) => {\r\n          return result.ok\r\n            ? result.json().then((data: Data) => FiasAPIResultFactory.success<Data>(data))\r\n            : Promise.reject(new Error(FiasLogger.warnings.fetchError));\r\n        })\r\n      : Promise.reject(new Error(FiasLogger.warnings.noBaseUrl));\r\n\r\n    return resultPromise.catch(({ message }) => {\r\n      FiasLogger.log(message);\r\n      return FiasAPIResultFactory.fail<Data>(message);\r\n    });\r\n  };\r\n\r\n  private resolveFiasId = (fiasId: FiasId): Promise<FiasAPIResult<FiasSearchResponse>> => {\r\n    return this.send<FiasAddressResponse>(`addresses/structural/${fiasId}`).then(result => {\r\n      const { success, data, error } = result;\r\n      if (success && data) {\r\n        return FiasAPIResultFactory.success<FiasSearchResponse>([data]);\r\n      } else {\r\n        return FiasAPIResultFactory.fail<FiasSearchResponse>(error && error.message);\r\n      }\r\n    });\r\n  };\r\n\r\n  private searchAddressObject = (query: FiasSearchQuery): Promise<FiasAPIResult<FiasSearchResponse>> => {\r\n    return this.send<FiasSearchResponse>(`addresses?${FiasAPI.createQuery(query)}`);\r\n  };\r\n\r\n  private resolveAddress = (\r\n    address: string,\r\n    limit?: number,\r\n    level: FiasFields = FiasFields.house,\r\n  ): Promise<FiasAPIResult<FiasSearchResponse>> => {\r\n    return this.send<FiasSearchResponse>(\r\n      `addresses/resolve?${FiasAPI.createQuery({\r\n        address,\r\n        limit,\r\n        level,\r\n      })}`,\r\n    );\r\n  };\r\n\r\n  private searchStead = (query: FiasSearchQuery): Promise<FiasAPIResult<FiasSearchResponse>> => {\r\n    return this.send<FiasStead[]>(`steads?${FiasAPI.createQuery(query)}`).then(result => {\r\n      const { success, data, error } = result;\r\n      if (success && data) {\r\n        return FiasAPIResultFactory.success<FiasSearchResponse>(\r\n          data.map((stead: FiasStead) => {\r\n            return {\r\n              stead,\r\n            };\r\n          }),\r\n        );\r\n      } else {\r\n        return FiasAPIResultFactory.fail<FiasSearchResponse>(error && error.message);\r\n      }\r\n    });\r\n  };\r\n\r\n  private searchHouse = (query: FiasSearchQuery): Promise<FiasAPIResult<FiasSearchResponse>> => {\r\n    return this.send<FiasHouse[]>(`houses?${FiasAPI.createQuery(query)}`).then(result => {\r\n      const { success, data, error } = result;\r\n      if (success && data) {\r\n        return FiasAPIResultFactory.success<FiasSearchResponse>(\r\n          data.map((house: FiasHouse) => {\r\n            return {\r\n              house,\r\n            };\r\n          }),\r\n        );\r\n      } else {\r\n        return FiasAPIResultFactory.fail<FiasSearchResponse>(error && error.message);\r\n      }\r\n    });\r\n  };\r\n\r\n  private searchRoom = (query: FiasSearchQuery): Promise<FiasAPIResult<FiasSearchResponse>> => {\r\n    return this.send<FiasRoom[]>(`rooms?${FiasAPI.createQuery(query)}`).then(result => {\r\n      const { success, data, error } = result;\r\n      if (success && data) {\r\n        return FiasAPIResultFactory.success<FiasSearchResponse>(\r\n          data.map((room: FiasRoom) => {\r\n            return {\r\n              room,\r\n            };\r\n          }),\r\n        );\r\n      } else {\r\n        return FiasAPIResultFactory.fail<FiasSearchResponse>(error && error.message);\r\n      }\r\n    });\r\n  };\r\n\r\n  private searchRegions = (searchText: string): Promise<FiasAPIResult<FiasSearchResponse>> => {\r\n    if (!this.regionsPromise) {\r\n      this.regionsPromise = this.send<FiasSearchResponse>('addresses/regions');\r\n    }\r\n    if (!searchText) {\r\n      return this.regionsPromise;\r\n    }\r\n\r\n    const isStartsWithSearchText = (str: string) => {\r\n      return str && str.toLowerCase().includes(searchText.toLowerCase());\r\n    };\r\n\r\n    return this.regionsPromise.then(result => {\r\n      const { success, data } = result;\r\n      if (success && data) {\r\n        return FiasAPIResultFactory.success<FiasSearchResponse>(\r\n          data.filter((address: FiasAddressResponse) => {\r\n            const { name, code = '' } = address.region as FiasAddressObject;\r\n            return isStartsWithSearchText(name) || isStartsWithSearchText(code);\r\n          }),\r\n        );\r\n      }\r\n      return result;\r\n    });\r\n  };\r\n}\r\n"]}