import _extends from "@babel/runtime/helpers/esm/extends";
import { FiasFields } from "../../types";
import { abbreviations } from "../../constants/abbreviations";
import { FiasLogger } from "../../logger/FiasLogger";
import { fetch } from "../../../../lib/net/fetch";
import { FiasAPIResultFactory } from "../FiasAPIResultFactory";
export var FiasAPI = function FiasAPI(baseUrl, version, fetchFn) {
  var _this = this;

  if (baseUrl === void 0) {
    baseUrl = '';
  }

  if (fetchFn === void 0) {
    fetchFn = fetch;
  }

  this.baseUrl = baseUrl;
  this.version = version;
  this.fetchFn = fetchFn;
  this.regionsPromise = null;

  this.verify = function (address) {
    var query = {
      directParent: true,
      search: false
    };
    return _this.send("verify?" + FiasAPI.createQuery(query), {
      method: 'POST',
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify([address.convertForVerification()])
    }).then(function (_ref) {
      var success = _ref.success,
          data = _ref.data,
          error = _ref.error;

      if (success && data) {
        var _ref2 = data[0] || {},
            _ref2$address = _ref2.address,
            verifiedAddress = _ref2$address === void 0 ? {} : _ref2$address,
            _ref2$isValid = _ref2.isValid,
            isValid = _ref2$isValid === void 0 ? false : _ref2$isValid,
            invalidLevel = _ref2.invalidLevel;

        return FiasAPIResultFactory.success(_extends({
          address: verifiedAddress,
          isValid: isValid
        }, invalidLevel ? {
          invalidLevel: invalidLevel.toLowerCase()
        } : {}));
      } else {
        return FiasAPIResultFactory.fail(error && error.message);
      }
    });
  };

  this.search = function (_ref3) {
    var fiasId = _ref3.fiasId,
        searchText = _ref3.searchText,
        field = _ref3.field,
        parentFiasId = _ref3.parentFiasId,
        limit = _ref3.limit,
        fullAddress = _ref3.fullAddress,
        directParent = _ref3.directParent;
    var query = {
      prefix: searchText,
      actual: true,
      parentFiasId: parentFiasId,
      limit: limit,
      fullAddress: fullAddress,
      directParent: directParent,
      version: _this.version
    };
    var emptyResult = {
      success: true,
      status: 200,
      data: []
    };

    if (fiasId) {
      return _this.resolveFiasId(fiasId);
    }

    if (searchText) {
      if (!field) {
        var text = FiasAPI.trimSearchText(searchText);

        if (text) {
          return _this.resolveAddress(text, limit);
        }
      } else {
        switch (field) {
          case FiasFields.region:
            return _this.searchRegions(searchText);

          case FiasFields.house:
            return _this.searchHouse(query);

          case FiasFields.stead:
            return _this.searchStead(query);

          case FiasFields.room:
            return _this.searchRoom(query);

          default:
            return _this.searchAddressObject(_extends({}, query, {
              levels: [field]
            }));
        }
      }
    }

    return Promise.resolve(emptyResult);
  };

  this.searchCountry = function (query) {
    return _this.send("countries?" + FiasAPI.createQuery(query));
  };

  this.send = function (path, params) {
    if (params === void 0) {
      params = {};
    }

    var resultPromise = _this.baseUrl ? _this.fetchFn("" + _this.baseUrl + path, _extends({
      method: 'GET'
    }, params)).then(function (result) {
      return result.ok ? result.json().then(function (data) {
        return FiasAPIResultFactory.success(data);
      }) : Promise.reject(new Error(FiasLogger.warnings.fetchError));
    }) : Promise.reject(new Error(FiasLogger.warnings.noBaseUrl));
    return resultPromise["catch"](function (_ref4) {
      var message = _ref4.message;
      FiasLogger.log(message);
      return FiasAPIResultFactory.fail(message);
    });
  };

  this.resolveFiasId = function (fiasId) {
    return _this.send("addresses/structural/" + fiasId).then(function (result) {
      var success = result.success,
          data = result.data,
          error = result.error;

      if (success && data) {
        return FiasAPIResultFactory.success([data]);
      } else {
        return FiasAPIResultFactory.fail(error && error.message);
      }
    });
  };

  this.searchAddressObject = function (query) {
    return _this.send("addresses?" + FiasAPI.createQuery(query));
  };

  this.resolveAddress = function (address, limit, level) {
    if (level === void 0) {
      level = FiasFields.house;
    }

    return _this.send("addresses/resolve?" + FiasAPI.createQuery({
      address: address,
      limit: limit,
      level: level
    }));
  };

  this.searchStead = function (query) {
    return _this.send("steads?" + FiasAPI.createQuery(query)).then(function (result) {
      var success = result.success,
          data = result.data,
          error = result.error;

      if (success && data) {
        return FiasAPIResultFactory.success(data.map(function (stead) {
          return {
            stead: stead
          };
        }));
      } else {
        return FiasAPIResultFactory.fail(error && error.message);
      }
    });
  };

  this.searchHouse = function (query) {
    return _this.send("houses?" + FiasAPI.createQuery(query)).then(function (result) {
      var success = result.success,
          data = result.data,
          error = result.error;

      if (success && data) {
        return FiasAPIResultFactory.success(data.map(function (house) {
          return {
            house: house
          };
        }));
      } else {
        return FiasAPIResultFactory.fail(error && error.message);
      }
    });
  };

  this.searchRoom = function (query) {
    return _this.send("rooms?" + FiasAPI.createQuery(query)).then(function (result) {
      var success = result.success,
          data = result.data,
          error = result.error;

      if (success && data) {
        return FiasAPIResultFactory.success(data.map(function (room) {
          return {
            room: room
          };
        }));
      } else {
        return FiasAPIResultFactory.fail(error && error.message);
      }
    });
  };

  this.searchRegions = function (searchText) {
    if (!_this.regionsPromise) {
      _this.regionsPromise = _this.send('addresses/regions');
    }

    if (!searchText) {
      return _this.regionsPromise;
    }

    var isStartsWithSearchText = function isStartsWithSearchText(str) {
      return str && str.toLowerCase().includes(searchText.toLowerCase());
    };

    return _this.regionsPromise.then(function (result) {
      var success = result.success,
          data = result.data;

      if (success && data) {
        return FiasAPIResultFactory.success(data.filter(function (address) {
          var _ref5 = address.region,
              name = _ref5.name,
              _ref5$code = _ref5.code,
              code = _ref5$code === void 0 ? '' : _ref5$code;
          return isStartsWithSearchText(name) || isStartsWithSearchText(code);
        }));
      }

      return result;
    });
  };
};
FiasAPI.searchStopWords = Object.keys(abbreviations).reduce(function (words, abbr) {
  return _extends({}, words, {}, abbreviations[abbr].split(' ').reduce(function (abbrWords, word) {
    var _extends2;

    return _extends({}, abbrWords, (_extends2 = {}, _extends2[word.toLowerCase()] = true, _extends2));
  }, {}));
}, {});

FiasAPI.createQuery = function (query) {
  var params = [];

  for (var _key in query) {
    if (Object.prototype.hasOwnProperty.call(query, _key)) {
      var param = query[_key];

      if (param !== undefined) {
        if (_key === 'levels' && Array.isArray(param)) {
          for (var _iterator = param, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref6;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref6 = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref6 = _i.value;
            }

            var level = _ref6;
            params.push("level[]=" + encodeURIComponent(level));
          }
        } else {
          params.push(_key + "=" + encodeURIComponent("" + param));
        }
      }
    }
  }

  return params.join('&');
};

FiasAPI.trimSearchText = function (searchText) {
  return searchText.toLowerCase().replace(/югра/g, '').replace(/(строение|сооружение|литера)\s[а-я\w]+/g, '').replace(/\s-\s/g, ' ').replace(/[,]/g, '').replace(/\s[\s]*/g, ' ').split(' ').filter(function (word) {
    return !FiasAPI.searchStopWords[word];
  }).slice(0, 6).join(' ');
};