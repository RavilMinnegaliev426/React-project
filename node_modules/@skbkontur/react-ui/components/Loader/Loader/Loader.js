import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import PropTypes from 'prop-types';
import warning from 'warning';
import cn from 'classnames';
import * as LayoutEvents from "../../../lib/LayoutEvents";
import { Spinner } from "../../Spinner";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { ZIndex } from "../../../internal/ZIndex";
import { jsStyles } from "../Loader.styles";
/**
                                             * DRAFT - лоадер-контейнер
                                             */

export var Loader =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Loader, _React$Component);

  function Loader(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.theme = void 0;
    _this.containerNode = void 0;
    _this.spinnerNode = void 0;
    _this.spinnerHeight = void 0;
    _this.layoutEvents = void 0;

    _this.wrapperRef = function (element) {
      _this.containerNode = element;
    };

    _this.checkSpinnerPosition = function () {
      if (!_this.containerNode) {
        return;
      }

      var _this$containerNode$g = _this.containerNode.getBoundingClientRect(),
          containerTop = _this$containerNode$g.top,
          containerRight = _this$containerNode$g.right,
          containerBottom = _this$containerNode$g.bottom,
          containerLeft = _this$containerNode$g.left,
          containerHeight = _this$containerNode$g.height,
          containerWidth = _this$containerNode$g.width;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth; // Если контейнер не больше высоты и не шире окна,
      // то просто выравниваем по центру

      if (windowHeight >= containerHeight && windowWidth >= containerWidth) {
        _this.setState({
          isStickySpinner: false,
          spinnerStyle: {}
        });

        return;
      }

      var spinnerStyle = {
        top: 30,
        right: 0,
        bottom: 30,
        left: 0
      }; // ПО ВЕРТИКАЛИ
      // Если верхний край контейнера ниже верхнего края окна,
      // то сдвигаем и лоадер

      if (containerTop > 0) {
        spinnerStyle.top = containerTop + 30;
      } // Если нижний край контейнера выше нижнего края окна,
      // то сдвигаем и лоадер


      if (containerBottom < windowHeight) {
        spinnerStyle.bottom = Math.abs(windowHeight - containerBottom) + 30;
      } // Если знаем высоту спиннера и нижний край контейнера поднимается
      // выше отступа на высоту спиннера, то убираем верхнюю позицию лоадера


      if (_this.spinnerHeight && spinnerStyle.bottom >= windowHeight - _this.spinnerHeight) {
        delete spinnerStyle.top;
      } // ПО ГОРИЗОНТАЛИ
      // Если левый край контейнера правее левого края окна,
      // то сдвигаем и лоадер


      if (containerLeft > 0) {
        spinnerStyle.left = containerLeft;
      } // Если правый край контейнера левее правого края окна,
      // то сдвигаем и лоадер


      if (containerRight < windowWidth) {
        spinnerStyle.right = windowWidth - containerRight;
      }

      _this.setState({
        isStickySpinner: true,
        spinnerStyle: spinnerStyle
      });
    };

    _this.containerNode = null;
    _this.spinnerNode = null;
    warning(!_this.props.cloud, 'cloud is deprecated, will removed in 3.0, if you want cloud use prop component instead. ');
    _this.state = {
      isStickySpinner: false
    };
    return _this;
  }

  var _proto = Loader.prototype;

  _proto.componentDidMount = function componentDidMount() {
    if (this.spinnerNode) {
      this.spinnerHeight = this.spinnerNode.children[0].getBoundingClientRect().height;
    }

    this.checkSpinnerPosition();
    this.layoutEvents = LayoutEvents.addListener(this.checkSpinnerPosition);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.layoutEvents) {
      this.layoutEvents.remove();
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return _this2.renderMain();
    });
  };

  _proto.renderMain = function renderMain() {
    var _cn;

    var _this$props = this.props,
        active = _this$props.active,
        type = _this$props.type,
        caption = _this$props.caption,
        className = _this$props.className;
    return React.createElement("div", {
      style: {
        position: 'relative'
      },
      className: cn(jsStyles.loader(), className)
    }, React.createElement(ZIndex, {
      priority: 'Loader',
      applyZIndex: this.props.active,
      coverChildren: this.props.active,
      style: {
        height: '100%'
      }
    }, this.props.children), active && React.createElement(ZIndex, {
      wrapperRef: this.wrapperRef,
      priority: 'Loader',
      className: cn((_cn = {}, _cn[jsStyles.active(this.theme)] = active, _cn))
    }, this.renderSpinner(type, caption)));
  };

  _proto.renderSpinner = function renderSpinner(type, caption) {
    var _this3 = this;

    return React.createElement("span", {
      className: this.state.isStickySpinner ? jsStyles.spinnerContainerSticky() : jsStyles.spinnerContainerCenter(),
      style: this.state.spinnerStyle,
      ref: function ref(element) {
        _this3.spinnerNode = element;
      }
    }, React.createElement(Spinner, {
      type: type,
      caption: caption,
      cloud: this.props.cloud
    }));
  };

  return Loader;
}(React.Component);
Loader.__KONTUR_REACT_UI__ = 'Loader';
Loader.defaultProps = {
  type: Spinner.Types.normal,
  active: false
};
Loader.propTypes = {
  /**
   * показываем лоадер или нет
   */
  active: PropTypes.bool,

  /**
   * Текст рядом с лоадером.
   *
   * @default  "Загрузка"
   */
  caption: Spinner.propTypes.caption,

  /**
   * Класс для обертки
   */
  className: PropTypes.string,

  /**
   * Тип спиннера: mini, normal, big
   *
   * @default  normal
   *
   * Spinner.types - все доступные типы
   */
  type: PropTypes.oneOf(Object.keys(Spinner.Types)),

  /**
   * @deprecated Старое поведение спиннера - облачко при среднем и большом размере
   *
   * @default false - исчезнет в 3.0
   */
  cloud: PropTypes.bool
};