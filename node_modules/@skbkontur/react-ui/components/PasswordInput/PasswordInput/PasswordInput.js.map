{"version":3,"sources":["PasswordInput.tsx"],"names":["React","PropTypes","isKeyCapsLock","KeyboardEventCodes","Codes","Input","EyeClosedIcon","EyeOpenedIcon","isIE11","jsStyles","PasswordInput","state","visible","capsLockEnabled","input","focus","blur","handleBlur","handleKeyPress","e","props","onKeyPress","detectCapsLock","getModifierState","CapsLock","setState","handleKeydown","onKeyDown","handleToggleVisibility","prevState","handleFocus","renderEye","iconWrapper","capsLockDetector","toggleVisibility","refInput","element","UNSAFE_componentWillMount","window","document","msCapsLockWarningOff","render","root","renderInput","inputProps","rightIcon","Component","__KONTUR_REACT_UI__","propTypes","bool","defaultProps","size"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { isKeyCapsLock } from '../../lib/events/keyboard/identifiers';\r\nimport { KeyboardEventCodes as Codes } from '../../lib/events/keyboard/KeyboardEventCodes';\r\nimport { Input, InputProps } from '../Input';\r\nimport { Nullable } from '../../typings/utility-types';\r\nimport { EyeClosedIcon, EyeOpenedIcon } from '../../internal/icons/16px';\r\nimport { isIE11 } from '../../lib/utils';\r\n\r\nimport { jsStyles } from './PasswordInput.styles';\r\n\r\nexport type PasswordInputProps = {\r\n  detectCapsLock?: boolean;\r\n} & InputProps;\r\n\r\nexport interface PasswordInputState {\r\n  visible: boolean;\r\n  capsLockEnabled?: boolean | null;\r\n}\r\n\r\n/**\r\n * Компонент для ввода пароля\r\n */\r\nexport class PasswordInput extends React.Component<PasswordInputProps, PasswordInputState> {\r\n  public static __KONTUR_REACT_UI__ = 'PasswordInput';\r\n\r\n  public static propTypes = {\r\n    /**\r\n     * Включает CapsLock детектор\r\n     */\r\n    detectCapsLock: PropTypes.bool,\r\n  };\r\n\r\n  public static defaultProps = {\r\n    size: 'small',\r\n  };\r\n\r\n  public state: PasswordInputState = {\r\n    visible: false,\r\n    capsLockEnabled: false,\r\n  };\r\n\r\n  private input: Nullable<Input>;\r\n\r\n  public UNSAFE_componentWillMount() {\r\n    if (this.props.detectCapsLock) {\r\n      this.setState({ capsLockEnabled: null });\r\n    }\r\n\r\n    // @ts-ignore\r\n    if (isIE11 && !window.document.msCapsLockWarningOff) {\r\n      // turns off default ie capslock warning\r\n      // @ts-ignore\r\n      window.document.msCapsLockWarningOff = true;\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return <div className={jsStyles.root()}>{this.renderInput()}</div>;\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   */\r\n  public focus = () => {\r\n    if (this.input) {\r\n      this.input.focus();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @public\r\n   */\r\n  public blur = () => {\r\n    this.handleBlur();\r\n  };\r\n\r\n  private handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    const { onKeyPress, detectCapsLock } = this.props;\r\n\r\n    if (onKeyPress) {\r\n      onKeyPress(e);\r\n    }\r\n\r\n    if (!detectCapsLock) {\r\n      return;\r\n    }\r\n\r\n    const capsLockEnabled = e.getModifierState(Codes.CapsLock);\r\n\r\n    this.setState({ capsLockEnabled });\r\n  };\r\n\r\n  private handleKeydown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    const {\r\n      props: { detectCapsLock, onKeyDown },\r\n      state: { capsLockEnabled },\r\n    } = this;\r\n\r\n    if (onKeyDown) {\r\n      onKeyDown(e);\r\n    }\r\n\r\n    if (!detectCapsLock) {\r\n      return;\r\n    }\r\n\r\n    if (isKeyCapsLock(e) && capsLockEnabled != null) {\r\n      this.setState({ capsLockEnabled: !capsLockEnabled });\r\n    }\r\n  };\r\n\r\n  private handleToggleVisibility = () => {\r\n    this.setState(prevState => ({ visible: !prevState.visible }), this.handleFocus);\r\n  };\r\n\r\n  private handleFocus = () => {\r\n    if (this.input) {\r\n      this.input.focus();\r\n    }\r\n  };\r\n\r\n  private handleBlur = () => {\r\n    if (this.input) {\r\n      this.input.blur();\r\n    }\r\n  };\r\n\r\n  private renderEye = () => {\r\n    const { capsLockEnabled } = this.state;\r\n\r\n    return (\r\n      <span className={jsStyles.iconWrapper()}>\r\n        {capsLockEnabled && <span className={jsStyles.capsLockDetector()} />}\r\n        <span data-tid=\"PasswordInputEyeIcon\" className={jsStyles.toggleVisibility()} onClick={this.handleToggleVisibility}>\r\n          {this.state.visible ? <EyeOpenedIcon size={14} /> : <EyeClosedIcon size={14} />}\r\n        </span>\r\n      </span>\r\n    );\r\n  };\r\n\r\n  private refInput = (element: Input) => {\r\n    this.input = element;\r\n  };\r\n\r\n  private renderInput() {\r\n    const { detectCapsLock, ...props } = this.props;\r\n    const inputProps = {\r\n      ...props,\r\n      onKeyDown: this.handleKeydown,\r\n      onKeyPress: this.handleKeyPress,\r\n      rightIcon: this.renderEye(),\r\n    };\r\n    return <Input ref={this.refInput} type={this.state.visible ? 'text' : 'password'} {...inputProps} />;\r\n  }\r\n}\r\n"]}