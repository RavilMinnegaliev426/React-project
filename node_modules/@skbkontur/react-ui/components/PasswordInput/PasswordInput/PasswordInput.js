import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import PropTypes from 'prop-types';
import { isKeyCapsLock } from "../../../lib/events/keyboard/identifiers";
import { KeyboardEventCodes as Codes } from "../../../lib/events/keyboard/KeyboardEventCodes";
import { Input } from "../../Input";
import { EyeClosedIcon, EyeOpenedIcon } from "../../../internal/icons/16px";
import { isIE11 } from "../../../lib/utils";
import { jsStyles } from "../PasswordInput.styles";
/**
                                                    * Компонент для ввода пароля
                                                    */

export var PasswordInput =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(PasswordInput, _React$Component);

  function PasswordInput() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      visible: false,
      capsLockEnabled: false
    };
    _this.input = void 0;

    _this.focus = function () {
      if (_this.input) {
        _this.input.focus();
      }
    };

    _this.blur = function () {
      _this.handleBlur();
    };

    _this.handleKeyPress = function (e) {
      var _this$props = _this.props,
          onKeyPress = _this$props.onKeyPress,
          detectCapsLock = _this$props.detectCapsLock;

      if (onKeyPress) {
        onKeyPress(e);
      }

      if (!detectCapsLock) {
        return;
      }

      var capsLockEnabled = e.getModifierState(Codes.CapsLock);

      _this.setState({
        capsLockEnabled: capsLockEnabled
      });
    };

    _this.handleKeydown = function (e) {
      var _assertThisInitialize = _assertThisInitialized(_this),
          _assertThisInitialize2 = _assertThisInitialize.props,
          detectCapsLock = _assertThisInitialize2.detectCapsLock,
          onKeyDown = _assertThisInitialize2.onKeyDown,
          capsLockEnabled = _assertThisInitialize.state.capsLockEnabled;

      if (onKeyDown) {
        onKeyDown(e);
      }

      if (!detectCapsLock) {
        return;
      }

      if (isKeyCapsLock(e) && capsLockEnabled != null) {
        _this.setState({
          capsLockEnabled: !capsLockEnabled
        });
      }
    };

    _this.handleToggleVisibility = function () {
      _this.setState(function (prevState) {
        return {
          visible: !prevState.visible
        };
      }, _this.handleFocus);
    };

    _this.handleFocus = function () {
      if (_this.input) {
        _this.input.focus();
      }
    };

    _this.handleBlur = function () {
      if (_this.input) {
        _this.input.blur();
      }
    };

    _this.renderEye = function () {
      var capsLockEnabled = _this.state.capsLockEnabled;
      return React.createElement("span", {
        className: jsStyles.iconWrapper()
      }, capsLockEnabled && React.createElement("span", {
        className: jsStyles.capsLockDetector()
      }), React.createElement("span", {
        "data-tid": "PasswordInputEyeIcon",
        className: jsStyles.toggleVisibility(),
        onClick: _this.handleToggleVisibility
      }, _this.state.visible ? React.createElement(EyeOpenedIcon, {
        size: 14
      }) : React.createElement(EyeClosedIcon, {
        size: 14
      })));
    };

    _this.refInput = function (element) {
      _this.input = element;
    };

    return _this;
  }

  var _proto = PasswordInput.prototype;

  _proto.UNSAFE_componentWillMount = function UNSAFE_componentWillMount() {
    if (this.props.detectCapsLock) {
      this.setState({
        capsLockEnabled: null
      });
    } // @ts-ignore


    if (isIE11 && !window.document.msCapsLockWarningOff) {
      // turns off default ie capslock warning
      // @ts-ignore
      window.document.msCapsLockWarningOff = true;
    }
  };

  _proto.render = function render() {
    return React.createElement("div", {
      className: jsStyles.root()
    }, this.renderInput());
  }
  /**
   * @public
   */
  ;

  _proto.renderInput = function renderInput() {
    var _this$props2 = this.props,
        detectCapsLock = _this$props2.detectCapsLock,
        props = _objectWithoutPropertiesLoose(_this$props2, ["detectCapsLock"]);

    var inputProps = _extends({}, props, {
      onKeyDown: this.handleKeydown,
      onKeyPress: this.handleKeyPress,
      rightIcon: this.renderEye()
    });

    return React.createElement(Input, _extends({
      ref: this.refInput,
      type: this.state.visible ? 'text' : 'password'
    }, inputProps));
  };

  return PasswordInput;
}(React.Component);
PasswordInput.__KONTUR_REACT_UI__ = 'PasswordInput';
PasswordInput.propTypes = {
  /**
   * Включает CapsLock детектор
   */
  detectCapsLock: PropTypes.bool
};
PasswordInput.defaultProps = {
  size: 'small'
};