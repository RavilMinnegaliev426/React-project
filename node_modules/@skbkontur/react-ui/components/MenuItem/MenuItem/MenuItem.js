import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import PropTypes from 'prop-types';
import warning from 'warning';
import cn from 'classnames';
import { isFunction } from "../../../lib/utils";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { jsStyles } from "../MenuItem.styles";
/**
                                               * Элемент меню.
                                               */

export var MenuItem =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(MenuItem, _React$Component);

  function MenuItem() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.theme = void 0;
    _this.mouseEntered = false;

    _this.handleMouseEnterFix = function (e) {
      if (!_this.mouseEntered && _this.props.onMouseEnter) {
        _this.mouseEntered = true;

        _this.props.onMouseEnter(e);
      }
    };

    _this.handleMouseLeave = function (e) {
      _this.mouseEntered = false;

      if (_this.props.onMouseLeave) {
        _this.props.onMouseLeave(e);
      }
    };

    _this.getComponent = function () {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          component = _this$props.component,
          href = _this$props.href;

      if (disabled) {
        return 'button';
      }

      if (component) {
        return component;
      }

      if (href) {
        return 'a';
      }

      return 'button';
    };

    return _this;
  }

  var _proto = MenuItem.prototype;

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return _this2.renderMain();
    });
  };

  _proto.renderMain = function renderMain() {
    var _cn, _cn2;

    var _this$props2 = this.props,
        alkoLink = _this$props2.alkoLink,
        link = _this$props2.link,
        comment = _this$props2.comment,
        icon = _this$props2.icon,
        loose = _this$props2.loose,
        state = _this$props2.state,
        children = _this$props2.children,
        _enableIconPadding = _this$props2._enableIconPadding,
        component = _this$props2.component,
        onMouseEnter = _this$props2.onMouseEnter,
        onMouseLeave = _this$props2.onMouseLeave,
        rest = _objectWithoutPropertiesLoose(_this$props2, ["alkoLink", "link", "comment", "icon", "loose", "state", "children", "_enableIconPadding", "component", "onMouseEnter", "onMouseLeave"]);

    warning(alkoLink === undefined, "[MenuItem]: Prop 'alkoLink' was deprecated please use 'link' instead");
    var hover = state === 'hover' && !this.props.disabled;
    var iconElement = null;

    if (icon) {
      iconElement = React.createElement("div", {
        className: jsStyles.icon()
      }, icon);
    }

    var className = cn((_cn = {}, _cn[jsStyles.root()] = true, _cn[jsStyles.loose()] = !!loose, _cn[jsStyles.hover(this.theme)] = hover, _cn[jsStyles.selected(this.theme)] = state === 'selected', _cn[jsStyles.link(this.theme)] = !!link || !!alkoLink, _cn[jsStyles.withIcon(this.theme)] = Boolean(iconElement) || !!_enableIconPadding, _cn[jsStyles.disabled(this.theme)] = !!this.props.disabled, _cn));
    var content = children;

    if (isFunction(children)) {
      content = children(this.props.state);
    }

    var Component = this.getComponent();
    return React.createElement(Component, _extends({}, rest, {
      onMouseOver: this.handleMouseEnterFix,
      onMouseLeave: this.handleMouseLeave,
      className: className,
      tabIndex: -1
    }), iconElement, content, this.props.comment && React.createElement("div", {
      "data-tid": "MenuItem__comment",
      className: cn((_cn2 = {}, _cn2[jsStyles.comment()] = true, _cn2[jsStyles.commentHover()] = hover, _cn2))
    }, comment));
  } // https://github.com/facebook/react/issues/10109
  // Mouseenter event not triggered when cursor moves from disabled button
  ;

  return MenuItem;
}(React.Component);
MenuItem.__KONTUR_REACT_UI__ = 'MenuItem';
MenuItem.__MENU_ITEM__ = true;
MenuItem.propTypes = {
  alkoLink: PropTypes.bool,
  comment: PropTypes.node,
  disabled: PropTypes.bool,
  href: PropTypes.string,
  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  loose: PropTypes.bool,
  state: PropTypes.string,
  target: PropTypes.string,
  onClick: PropTypes.func
};
export var isMenuItem = function isMenuItem(child) {
  return React.isValidElement(child) ? Object.prototype.hasOwnProperty.call(child.type, '__MENU_ITEM__') : false;
};