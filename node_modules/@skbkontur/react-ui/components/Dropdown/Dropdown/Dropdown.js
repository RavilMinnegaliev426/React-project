import _extends from "@babel/runtime/helpers/esm/extends";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import PropTypes from 'prop-types';
import { filterProps } from "../../../lib/filterProps";
import { MenuHeader } from "../../MenuHeader";
import { MenuItem } from "../../MenuItem";
import { MenuSeparator } from "../../MenuSeparator";
import { Select } from "../../Select";
var PASS_PROPS = {
  _renderButton: true,
  error: true,
  disabled: true,
  disablePortal: true,
  menuAlign: true,
  menuWidth: true,
  maxMenuHeight: true,
  use: true,
  size: true,
  warning: true,
  width: true,
  onOpen: true,
  onClose: true,
  onMouseEnter: true,
  onMouseLeave: true,
  onMouseOver: true,
  diadocLinkIcon: true // @deprecated TODO remove in 3.0.

};
/**
    * Выпадающее меню.
    */

export var Dropdown =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Dropdown, _React$Component);

  function Dropdown() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this._select = void 0;

    _this._refSelect = function (element) {
      _this._select = element;
    };

    return _this;
  }

  var _proto = Dropdown.prototype;

  _proto.render = function render() {
    var items = React.Children.map(this.props.children, function (item) {
      return item;
    });
    return React.createElement(Select, _extends({
      ref: this._refSelect
    }, filterProps(this.props, PASS_PROPS), {
      value: this.props.caption,
      items: items,
      _icon: this.props.icon,
      renderValue: renderValue
    }));
  }
  /**
   * @public
   */
  ;

  _proto.open = function open() {
    if (this._select) {
      this._select.open();
    }
  }
  /**
   * @public
   */
  ;

  _proto.close = function close() {
    if (this._select) {
      this._select.close();
    }
  };

  return Dropdown;
}(React.Component);
Dropdown.__KONTUR_REACT_UI__ = 'Dropdown';
Dropdown.Header = MenuHeader;
Dropdown.MenuItem = MenuItem;
Dropdown.Separator = MenuSeparator;
Dropdown.propTypes = {
  /**
   * Подпись на кнопке.
   */
  caption: PropTypes.node.isRequired,

  /**
   * Отключает использование портала
   */
  disablePortal: PropTypes.bool,

  /**
   * Визуально отключает Dropdown
   */
  disabled: PropTypes.bool,

  /**
   * Визуально показать наличие ошибки.
   */
  error: PropTypes.bool,

  /**
   * Иконка слева от текста кнопки
   */
  icon: PropTypes.node,
  maxMenuHeight: PropTypes.number,
  menuAlign: PropTypes.oneOf(['left', 'right']),
  menuWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  size: PropTypes.oneOf(['small', 'medium', 'large']),

  /**
   * Смотри Button.
   */
  use: PropTypes.any,

  /**
   * Визуально показать наличие предупреждения.
   */
  warning: PropTypes.bool,
  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /**
   * Вызывается при закрытии меню.
   */
  onClose: PropTypes.func,
  onMouseEnter: PropTypes.func,
  onMouseLeave: PropTypes.func,
  onMouseOver: PropTypes.func,

  /**
   * Вызывается при открытии меню.
   */
  onOpen: PropTypes.func
};

function renderValue(value) {
  return value;
}