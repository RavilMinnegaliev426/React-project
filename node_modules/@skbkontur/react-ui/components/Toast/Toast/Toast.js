import _extends from "@babel/runtime/helpers/esm/extends";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import { CSSTransition, TransitionGroup } from 'react-transition-group';
import { RenderContainer } from "../../../internal/RenderContainer";
import { jsStyles } from "../Toast.styles";
import { ToastView } from "../ToastView";
import { ToastStatic } from "../ToastStatic";
/**
                                              * Toast manages notifications
                                              * method `push` is sending notification,
                                              * then automatically hides it after 3 or 7 seconds,
                                              * depending on if this notification contains action or not.
                                              *
                                              * Can be used like `Toast.push('message')` or
                                              * `Toast.push('message', {label: 'Cancel', handler: cancelHandler})`
                                              */

export var Toast =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Toast, _React$Component);

  Toast.push = function push(notification, action) {
    ToastStatic.push(notification, action);
  };

  Toast.close = function close() {
    ToastStatic.close();
  };

  function Toast(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this._toast = void 0;
    _this._timeout = null;

    _this.close = function () {
      safelyCall(_this.props.onClose, _this.state.notification, _this.state.action);

      _this.setState({
        notification: null,
        action: null
      });
    };

    _this._clearTimer = function () {
      if (_this._timeout) {
        clearTimeout(_this._timeout);
        _this._timeout = null;
      }
    };

    _this._setTimer = function () {
      _this._clearTimer();

      var timeOut = _this.state.action ? 7 : 3;
      _this._timeout = window.setTimeout(_this.close, timeOut * 1000);
    };

    _this._refToast = function (element) {
      _this._toast = element;
    };

    _this.state = {
      notification: null,
      action: null,
      id: 0
    };
    return _this;
  }

  var _proto = Toast.prototype;

  _proto.componentWillUnmount = function componentWillUnmount() {
    this._clearTimer();
  };

  _proto.render = function render() {
    return React.createElement(RenderContainer, null, React.createElement(TransitionGroup, null, this._renderToast()));
  }
  /**
   * Показывает тост с `notification` в качестве сообщения.
   *
   * `action` опциональный параметр формата `{ label: string, handler: function }` добавляет кнопку в виде ссылки при клике на которую вызывается переданный handler
   * @public
   * @param notification
   * @param action
   */
  ;

  _proto.push = function push(notification, action) {
    if (this.state.notification) {
      this.close();
    }

    safelyCall(this.props.onPush, notification, action);
    this.setState(function (_ref) {
      var id = _ref.id;
      return {
        notification: notification,
        action: action,
        id: id + 1
      };
    }, this._setTimer);
  }
  /**
   * @public
   */
  ;

  _proto._renderToast = function _renderToast() {
    var _this$state = this.state,
        notification = _this$state.notification,
        action = _this$state.action,
        id = _this$state.id;

    if (!notification) {
      return null;
    }

    var toastProps = {
      onMouseEnter: this._clearTimer,
      onMouseLeave: this._setTimer,
      onClose: this.close,
      children: notification,
      action: action
    };
    return React.createElement(CSSTransition, {
      key: id,
      classNames: {
        enter: jsStyles.enter(),
        enterActive: jsStyles.enterActive(),
        exit: jsStyles.exit(),
        exitActive: jsStyles.exitActive()
      },
      timeout: {
        enter: 200,
        exit: 150
      }
    }, React.createElement(ToastView, _extends({
      ref: this._refToast
    }, toastProps)));
  };

  return Toast;
}(React.Component);
Toast.__KONTUR_REACT_UI__ = 'Toast';

function safelyCall(fn) {
  if (fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    fn.apply(void 0, args);
  }
}