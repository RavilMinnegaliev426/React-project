import React from 'react';
import PropTypes from 'prop-types';
import { Nullable } from '../../typings/utility-types';
import { TabsContextType } from './TabsContext';
export interface TabIndicators {
    error: boolean;
    warning: boolean;
    success: boolean;
    primary: boolean;
    disabled: boolean;
}
export interface TabProps {
    /**
     * Tab content
     */
    children?: React.ReactNode;
    /**
     * Component to use as a tab
     */
    component?: React.ComponentType<any> | string;
    /**
     * Link href
     */
    href?: string;
    /**
     * Tab identifier
     */
    id?: string;
    /**
     * Click event
     */
    onClick?: (event: React.MouseEvent<HTMLElement>) => void;
    /**
     * Click event
     */
    onKeyDown?: (event: React.KeyboardEvent<HTMLElement>) => void;
    /**
     * Disabled indicator
     */
    disabled?: boolean;
    /**
     * Error indicator
     */
    error?: boolean;
    /**
     * Warning indicator
     */
    warning?: boolean;
    /**
     * Success indicator
     */
    success?: boolean;
    /**
     * Primary indicator
     */
    primary?: boolean;
    /**
     * Style property
     */
    style?: React.CSSProperties;
}
export interface TabState {
    focusedByKeyboard: boolean;
}
/**
 * Tab element of Tabs component
 *
 * Can be used for creating custom tabs
 * ```js
 *
 * const RouteTab = (props) => (
 *   <Tab id={props.to} component={RouteLink} {...props}/>
 * )
 *
 * const MyAwesomeTab = (props) => <Tab id={props.id}>8) {props.children}</Tab>
 * ```
 *
 * Works only inside Tabs component, otherwise throws
 */
export declare class Tab extends React.Component<TabProps, TabState> {
    static __KONTUR_REACT_UI__: string;
    static contextType: React.Context<TabsContextType>;
    context: TabsContextType;
    static propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        component: PropTypes.Requireable<any>;
        disabled: PropTypes.Requireable<boolean>;
        href: PropTypes.Validator<string>;
        id: PropTypes.Validator<string>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        onKeyDown: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: {
        component: string;
        href: string;
    };
    state: TabState;
    private theme;
    private tabComponent;
    private isArrowKeyPressed;
    UNSAFE_componentWillMount(): void;
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    getIndicators(): {
        error: boolean;
        warning: boolean;
        success: boolean;
        primary: boolean;
        disabled: boolean;
    };
    getUnderlyingNode: () => Nullable<React.ReactElement<Tab, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>>;
    private renderMain;
    private getId;
    private refTabComponent;
    private handleKeyDownGlobal;
    private getTabInstance;
    private switchTab;
    private handleMouseDown;
    private handleKeyDown;
    private handleFocus;
    private handleBlur;
}
