import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import PropTypes from 'prop-types';
import invariant from 'invariant';
import cn from 'classnames';
import { isKeyArrow, isKeyArrowLeft, isKeyArrowUp } from "../../../lib/events/keyboard/identifiers";
import { tabListener } from "../../../lib/events/tabListener";
import { isFunctionalComponent } from "../../../lib/utils";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { TabsContext, TabsContextDefaultValue } from "../TabsContext";
import { jsStyles } from "../Tab.styles";
/**
                                          * Tab element of Tabs component
                                          *
                                          * Can be used for creating custom tabs
                                          * ```js
                                          *
                                          * const RouteTab = (props) => (
                                          *   <Tab id={props.to} component={RouteLink} {...props}/>
                                          * )
                                          *
                                          * const MyAwesomeTab = (props) => <Tab id={props.id}>8) {props.children}</Tab>
                                          * ```
                                          *
                                          * Works only inside Tabs component, otherwise throws
                                          */

export var Tab =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Tab, _React$Component);

  function Tab() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.context = _this.context;
    _this.state = {
      focusedByKeyboard: false
    };
    _this.theme = void 0;
    _this.tabComponent = null;
    _this.isArrowKeyPressed = false;

    _this.getUnderlyingNode = function () {
      return _this.tabComponent;
    };

    _this.getId = function () {
      return _this.props.id || _this.props.href;
    };

    _this.refTabComponent = function (instance) {
      _this.tabComponent = instance;
    };

    _this.handleKeyDownGlobal = function (e) {
      _this.isArrowKeyPressed = isKeyArrow(e);
    };

    _this.getTabInstance = function () {
      return _assertThisInitialized(_this);
    };

    _this.switchTab = function (event) {
      if (_this.props.disabled) {
        event.preventDefault();
        return;
      }

      var id = _this.props.id || _this.props.href;

      if (_this.props.onClick) {
        _this.props.onClick(event);

        if (event.defaultPrevented) {
          return;
        }
      }

      if (typeof id === 'string') {
        _this.context.switchTab(id);
      }

      if (!_this.props.href) {
        event.preventDefault();
      }
    };

    _this.handleMouseDown = function () {
      return _this.isArrowKeyPressed = false;
    };

    _this.handleKeyDown = function (e) {
      if (_this.props.disabled) {
        return;
      }

      if (_this.props.onKeyDown) {
        _this.props.onKeyDown(e);

        if (e.defaultPrevented) {
          return;
        }
      }

      var id = _this.getId();

      if (typeof id !== 'string') {
        return;
      }

      if (!isKeyArrow(e)) {
        return;
      }

      e.preventDefault();
      var delta = isKeyArrowLeft(e) || isKeyArrowUp(e) ? -1 : 1;

      _this.context.shiftFocus(id, delta);
    };

    _this.handleFocus = function () {
      if (_this.props.disabled) {
        return;
      } // focus event fires before keyDown eventlistener
      // so we should check focusKeyPressed in async way


      process.nextTick(function () {
        if (tabListener.isTabPressed || _this.isArrowKeyPressed) {
          _this.setState({
            focusedByKeyboard: true
          });
        }
      });
    };

    _this.handleBlur = function () {
      if (_this.props.disabled) {
        return;
      }

      _this.setState({
        focusedByKeyboard: false
      });
    };

    return _this;
  }

  var _proto = Tab.prototype;

  _proto.UNSAFE_componentWillMount = function UNSAFE_componentWillMount() {
    invariant(this.context !== TabsContextDefaultValue, 'Tab should be placed inside Tabs component');
  };

  _proto.componentDidMount = function componentDidMount() {
    var id = this.getId();

    if (typeof id === 'string') {
      this.context.addTab(id, this.getTabInstance);
    }

    window.addEventListener('keydown', this.handleKeyDownGlobal);
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    if (this.context.activeTab === this.props.id) {
      this.context.notifyUpdate();
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var id = this.getId();

    if (typeof id === 'string') {
      this.context.removeTab(id);
    }

    window.removeEventListener('keydown', this.handleKeyDownGlobal);
  };

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return _this2.renderMain();
    });
  };

  _proto.getIndicators = function getIndicators() {
    return {
      error: Boolean(this.props.error),
      warning: Boolean(this.props.warning),
      success: Boolean(this.props.success),
      primary: Boolean(this.props.primary),
      disabled: Boolean(this.props.disabled)
    };
  };

  _proto.renderMain = function renderMain() {
    var _cn;

    var _this$props = this.props,
        children = _this$props.children,
        disabled = _this$props.disabled,
        error = _this$props.error,
        warning = _this$props.warning,
        success = _this$props.success,
        primary = _this$props.primary,
        _this$props$component = _this$props.component,
        Component = _this$props$component === void 0 ? Tab.defaultProps.component : _this$props$component,
        href = _this$props.href,
        style = _this$props.style;
    var isActive = false;
    var isVertical = false;
    var id = this.getId();

    if (typeof id === 'string') {
      isActive = this.context.activeTab === this.getId();
      isVertical = this.context.vertical;
    }

    return React.createElement(Component, {
      className: cn((_cn = {}, _cn[jsStyles.root(this.theme)] = true, _cn[jsStyles.vertical(this.theme)] = !!isVertical, _cn[jsStyles.primary(this.theme)] = !!primary, _cn[jsStyles.success(this.theme)] = !!success, _cn[jsStyles.warning(this.theme)] = !!warning, _cn[jsStyles.error(this.theme)] = !!error, _cn[jsStyles.active(this.theme)] = !!isActive, _cn[jsStyles.disabled(this.theme)] = !!disabled, _cn)),
      onBlur: this.handleBlur,
      onClick: this.switchTab,
      onMouseDown: this.handleMouseDown,
      onFocus: this.handleFocus,
      onKeyDown: this.handleKeyDown,
      tabIndex: disabled ? -1 : 0,
      ref: isFunctionalComponent(Component) ? null : this.refTabComponent,
      href: href,
      style: style
    }, children, this.state.focusedByKeyboard && React.createElement("div", {
      className: jsStyles.focus(this.theme)
    }));
  };

  return Tab;
}(React.Component);
Tab.__KONTUR_REACT_UI__ = 'Tab';
Tab.contextType = TabsContext;
Tab.propTypes = {
  children: PropTypes.node,
  component: PropTypes.any,
  disabled: PropTypes.bool,
  href: PropTypes.string.isRequired,
  id: PropTypes.string.isRequired,
  onClick: PropTypes.func,
  onKeyDown: PropTypes.func
};
Tab.defaultProps = {
  component: 'a',
  href: ''
};