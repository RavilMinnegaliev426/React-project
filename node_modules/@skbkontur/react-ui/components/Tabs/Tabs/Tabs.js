import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import { findDOMNode } from 'react-dom';
import PropTypes from 'prop-types';
import cn from 'classnames';
import { Indicator } from "../Indicator";
import { jsStyles } from "../Tabs.styles";
import { TabsContext } from "../TabsContext";
import { Tab } from "../Tab";
/**
                              * Tabs wrapper
                              *
                              * contains static property `Tab`
                              */

export var Tabs =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Tabs, _React$Component);

  function Tabs() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.tabs = [];
    _this.tabUpdates = {
      on: function on(cb) {
        var index = _this.listeners.push(cb);

        return function () {
          _this.listeners.splice(index, 1);
        };
      }
    };
    _this.listeners = [];

    _this.shiftFocus = function (fromTab, delta) {
      var _assertThisInitialize = _assertThisInitialized(_this),
          tabs = _assertThisInitialize.tabs;

      var index = tabs.findIndex(function (x) {
        return x.id === fromTab;
      });
      var newIndex = Math.max(0, Math.min(index + delta, tabs.length - 1));
      var tab = tabs[newIndex];
      var tabNode = tab.getNode();
      var htmlNode = null;

      if (tabNode instanceof React.Component) {
        htmlNode = findDOMNode(tabNode);
      }

      if (htmlNode && htmlNode instanceof HTMLElement && typeof htmlNode.focus === 'function') {
        htmlNode.focus();
      }
    };

    _this.notifyUpdate = function () {
      _this.listeners.forEach(function (cb) {
        return cb();
      });
    };

    _this.switchTab = function (id) {
      var _this$props = _this.props,
          onValueChange = _this$props.onValueChange,
          value = _this$props.value;

      if (id !== value && onValueChange) {
        onValueChange(id);
      }
    };

    _this.getTab = function (id) {
      var _ref = _this.tabs.find(function (x) {
        return x.id === id;
      }) || {},
          _ref$getNode = _ref.getNode,
          getNode = _ref$getNode === void 0 ? null : _ref$getNode;

      return getNode && getNode();
    };

    _this.addTab = function (id, getNode) {
      _this.tabs = _this.tabs.concat({
        id: id,
        getNode: getNode
      });
    };

    _this.removeTab = function (id) {
      _this.tabs = _this.tabs.filter(function (tab) {
        return tab.id !== id;
      });
    };

    return _this;
  }

  var _proto = Tabs.prototype;

  _proto.render = function render() {
    var _this$props2 = this.props,
        vertical = _this$props2.vertical,
        value = _this$props2.value,
        width = _this$props2.width,
        children = _this$props2.children,
        indicatorClassName = _this$props2.indicatorClassName;
    return React.createElement("div", {
      className: cn(jsStyles.root(), vertical && jsStyles.vertical()),
      style: {
        width: width
      }
    }, React.createElement(TabsContext.Provider, {
      value: {
        vertical: vertical,
        activeTab: value,
        getTab: this.getTab,
        addTab: this.addTab,
        removeTab: this.removeTab,
        notifyUpdate: this.notifyUpdate,
        shiftFocus: this.shiftFocus,
        switchTab: this.switchTab
      }
    }, children, React.createElement(Indicator, {
      className: indicatorClassName,
      tabUpdates: this.tabUpdates,
      vertical: vertical
    })));
  };

  return Tabs;
}(React.Component);
Tabs.__KONTUR_REACT_UI__ = 'Tabs';
Tabs.propTypes = {
  children: PropTypes.node,
  indicatorClassName: PropTypes.string,
  value: PropTypes.string.isRequired,
  vertical: PropTypes.bool,
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  onValueChange: PropTypes.func
};
Tabs.defaultProps = {
  vertical: false
};
Tabs.Tab = Tab;