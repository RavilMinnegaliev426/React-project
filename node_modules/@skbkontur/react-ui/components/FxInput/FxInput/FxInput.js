import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import PropTypes from 'prop-types';
import { Button } from "../../Button";
import { Group } from "../../Group";
import { Input } from "../../Input";
import { CurrencyInput } from "../../CurrencyInput";
import { createPropsGetter } from "../../../lib/createPropsGetter";
import { FunctionIcon, UndoIcon } from "../../../internal/icons/16px";
/** Принимает все свойства `Input`'a */

export var FxInput =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(FxInput, _React$Component);

  function FxInput() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.input = null;
    _this.getProps = createPropsGetter(FxInput.defaultProps);

    _this.focus = function () {
      if (_this.input) {
        _this.input.focus();
      }
    };

    _this.blur = function () {
      if (_this.input) {
        _this.input.blur();
      }
    };

    _this.refInput = function (element) {
      _this.input = element;

      if (_this.props.refInput) {
        _this.props.refInput(_this.input);
      }
    };

    return _this;
  }

  var _proto = FxInput.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        type = _this$props.type,
        onRestore = _this$props.onRestore,
        auto = _this$props.auto,
        rest = _objectWithoutPropertiesLoose(_this$props, ["type", "onRestore", "auto"]);

    var inputProps = {
      align: 'right'
    };
    var button = null;

    if (auto) {
      inputProps.leftIcon = React.createElement(FunctionIcon, null);
    } else {
      button = React.createElement(Button, {
        narrow: true,
        onClick: this.props.onRestore,
        borderless: this.props.borderless
      }, React.createElement(UndoIcon, null));
    }

    return React.createElement(Group, {
      width: this.props.width
    }, button, this.getProps().type === 'currency' ? React.createElement(CurrencyInput, _extends({}, inputProps, rest, {
      width: '100%',
      ref: this.refInput,
      value: this.props.value,
      onValueChange: this.props.onValueChange
    })) : React.createElement(Input, _extends({}, inputProps, rest, {
      width: '100%',
      ref: this.refInput,
      type: this.props.type,
      value: this.props.value,
      onValueChange: this.props.onValueChange
    })));
  }
  /**
   * @public
   */
  ;

  return FxInput;
}(React.Component);
FxInput.__KONTUR_REACT_UI__ = 'FxInput';
FxInput.propTypes = {
  auto: PropTypes.bool,
  type: PropTypes.string
};
FxInput.defaultProps = {
  width: 250,
  type: 'text',
  value: ''
};