import React, { useContext, useEffect, useState } from 'react';
import cn from 'classnames';
import { getScrollWidth } from "../../../lib/dom/getScrollWidth";
import { Sticky } from "../../Sticky";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { ZIndex } from "../../../internal/ZIndex";
import { jsStyles } from "../Modal.styles";
import { ModalContext } from "../ModalContext";
/**
                                                * Футер модального окна.
                                                *
                                                * @visibleName Modal.Footer
                                                */

function ModalFooter(props) {
  var _props$sticky = props.sticky,
      sticky = _props$sticky === void 0 ? true : _props$sticky,
      panel = props.panel,
      children = props.children;
  var theme = useContext(ThemeContext);

  var _useState = useState(0),
      scrollbarWidth = _useState[0],
      setScrollBarWidth = _useState[1];

  useEffect(function () {
    setScrollBarWidth(getScrollWidth());
  }, []);

  var renderContent = function renderContent(fixed) {
    var _cn;

    if (fixed === void 0) {
      fixed = false;
    }

    return React.createElement("div", {
      className: cn((_cn = {}, _cn[jsStyles.footer()] = true, _cn[jsStyles.panel(theme)] = Boolean(panel), _cn[jsStyles.fixedFooter(theme)] = fixed, _cn))
    }, children);
  };

  return React.createElement(ZIndex, {
    style: {
      position: 'relative'
    },
    priority: 'ModalFooter'
  }, React.createElement(ModalContext.Consumer, null, function (_ref) {
    var horizontalScroll = _ref.horizontalScroll;

    if (sticky) {
      return React.createElement(Sticky, {
        side: "bottom",
        offset: horizontalScroll ? scrollbarWidth : 0
      }, renderContent);
    }

    return renderContent();
  }));
}

ModalFooter.__KONTUR_REACT_UI__ = 'ModalFooter';
ModalFooter.__MODAL_FOOTER__ = true;
export { ModalFooter };