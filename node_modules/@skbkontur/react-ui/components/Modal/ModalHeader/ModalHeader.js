import React, { useContext } from 'react';
import cn from 'classnames';
import { Sticky } from "../../Sticky";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { ZIndex } from "../../../internal/ZIndex";
import { jsStyles } from "../Modal.styles";
import { ModalClose } from "../ModalClose";
import { ModalContext } from "../ModalContext";
/**
                                                * Шапка модального окна
                                                *
                                                * @visibleName Modal.Header
                                                */

function ModalHeader(_ref) {
  var _ref$sticky = _ref.sticky,
      sticky = _ref$sticky === void 0 ? true : _ref$sticky,
      children = _ref.children;
  var theme = useContext(ThemeContext);

  var renderContent = function renderContent(close, additionalPadding) {
    return function (fixed) {
      var _cn;

      if (fixed === void 0) {
        fixed = false;
      }

      return React.createElement("div", {
        className: cn((_cn = {}, _cn[jsStyles.header()] = true, _cn[jsStyles.fixedHeader(theme)] = fixed, _cn[jsStyles.headerAddPadding()] = Boolean(additionalPadding), _cn))
      }, close && React.createElement("div", {
        className: jsStyles.absoluteClose()
      }, React.createElement(ModalClose, {
        requestClose: close.requestClose,
        disableClose: close.disableClose
      })), children);
    };
  };

  return React.createElement(ZIndex, {
    style: {
      position: 'relative'
    },
    priority: 'ModalHeader'
  }, React.createElement(ModalContext.Consumer, null, function (_ref2) {
    var close = _ref2.close,
        additionalPadding = _ref2.additionalPadding;

    if (sticky) {
      return React.createElement(Sticky, {
        side: "top"
      }, renderContent(close, additionalPadding));
    }

    return renderContent(close, additionalPadding)();
  }));
}

ModalHeader.__KONTUR_REACT_UI__ = 'ModalHeader';
ModalHeader.__MODAL_HEADER__ = true;
export { ModalHeader };