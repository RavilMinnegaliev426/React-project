{"version":3,"sources":["CurrencyLabel.tsx"],"names":["React","MAX_SAFE_DIGITS","CurrencyHelper","defaultProps","fractionDigits","CurrencyLabel","value","currencySymbol","format","String","fromCharCode","__KONTUR_REACT_UI__","propTypes","props","Error","destructString","fraction","length","Number","isInteger"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,cAAT,QAA+B,iCAA/B;;;;;;;;;;;;AAYA,OAAO,IAAMC,YAAY,GAAG;AAC1BC,EAAAA,cAAc,EAAE,CADU,EAArB;;;AAIP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,YAAGC,KAAH,QAAGA,KAAH,CAAUF,cAAV,QAAUA,cAAV,CAA0BG,cAA1B,QAA0BA,cAA1B;AAC3B;AACGL,IAAAA,cAAc,CAACM,MAAf,CAAsBF,KAAtB,EAA6B,EAAEF,cAAc,EAAdA,cAAF,EAA7B,CADH;AAEGG,IAAAA,cAAc,IAAIE,MAAM,CAACC,YAAP,CAAoB,IAApB,CAFrB,CAE+C,YAF/C;AAGGH,IAAAA,cAHH,CAD2B,GAAtB;;;;AAQPF,aAAa,CAACM,mBAAd,GAAoC,eAApC;;AAEAN,aAAa,CAACF,YAAd,GAA6BA,YAA7B;;AAEAE,aAAa,CAACO,SAAd,GAA0B;AACxBR,EAAAA,cAAc,EAAE,wBAACS,KAAD,EAA+B;AAC7C,QAAIA,KAAK,CAACT,cAAN,GAAuBH,eAA3B,EAA4C;AAC1C,aAAO,IAAIa,KAAJ;AACL,0DAAkDb,eAAlD,4EADK,CAAP;;;AAID,KAN4C;;AAQxBC,IAAAA,cAAc,CAACa,cAAf,CAA8BN,MAAM,CAACI,KAAK,CAACP,KAAP,CAApC,KAAsD,EAAEU,QAAQ,EAAE,EAAZ,EAR9B,CAQrCA,QARqC,SAQrCA,QARqC;AAS7C,QAAIA,QAAQ,CAACC,MAAT,GAAkBJ,KAAK,CAACT,cAA5B,EAA4C;AAC1C,aAAO,IAAIU,KAAJ;AACL,gIADK,CAAP;;;AAID;;AAED,QAAI,CAACI,MAAM,CAACC,SAAP,CAAiBN,KAAK,CAACT,cAAvB,CAAL,EAA6C;AAC3C,aAAO,IAAIU,KAAJ,2GAAP;;;AAGD;;AAED,WAAO,IAAP;AACD,GAxBuB,EAA1B","sourcesContent":["import React from 'react';\r\n\r\nimport { MAX_SAFE_DIGITS } from '../CurrencyInput/constants';\r\nimport { CurrencyHelper } from '../CurrencyInput/CurrencyHelper';\r\n\r\nexport type CurrencyLabelProps = {\r\n  /**\r\n   * Количество отображаемых знаков после запятой\r\n   * @default 2\r\n   */\r\n  fractionDigits: number;\r\n  value: number;\r\n  currencySymbol?: React.ReactNode;\r\n} & typeof defaultProps;\r\n\r\nexport const defaultProps = {\r\n  fractionDigits: 2,\r\n};\r\n\r\nexport const CurrencyLabel = ({ value, fractionDigits, currencySymbol }: CurrencyLabelProps): JSX.Element => (\r\n  <span>\r\n    {CurrencyHelper.format(value, { fractionDigits })}\r\n    {currencySymbol && String.fromCharCode(0xa0) /* &nbsp; */}\r\n    {currencySymbol}\r\n  </span>\r\n);\r\n\r\nCurrencyLabel.__KONTUR_REACT_UI__ = 'CurrencyLabel';\r\n\r\nCurrencyLabel.defaultProps = defaultProps;\r\n\r\nCurrencyLabel.propTypes = {\r\n  fractionDigits: (props: CurrencyLabelProps) => {\r\n    if (props.fractionDigits > MAX_SAFE_DIGITS) {\r\n      return new Error(\r\n        `[CurrencyLabel]: Prop 'fractionDigits' exceeds ${MAX_SAFE_DIGITS}.` +\r\n          `\\nSee https://tech.skbkontur.ru/react-ui/#/CurrencyInput?id=why15`,\r\n      );\r\n    }\r\n\r\n    const { fraction } = CurrencyHelper.destructString(String(props.value)) || { fraction: '' };\r\n    if (fraction.length > props.fractionDigits) {\r\n      return new Error(\r\n        `[CurrencyLabel]: Prop 'fractionDigits' less than fractional part of the 'value' property,` +\r\n          `'value' will not be cutted`,\r\n      );\r\n    }\r\n\r\n    if (!Number.isInteger(props.fractionDigits)) {\r\n      return new Error(\r\n        `[CurrencyLabel]: Prop 'fractionDigits' is not integer, fraction part of these property will not be used`,\r\n      );\r\n    }\r\n\r\n    return null;\r\n  },\r\n};\r\n"]}