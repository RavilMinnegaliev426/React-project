import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import isEqual from 'lodash.isequal';
import warning from 'warning';
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { ThemeFactory } from "../../../lib/theming/ThemeFactory";
import { isDevelopmentEnv } from "../../../lib/currentEnvironment";
export var ThemeProvider =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(ThemeProvider, _React$Component);

  function ThemeProvider(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.theme = void 0;
    _this.theme = _this.makeFullTheme(props.value);
    return _this;
  }

  var _proto = ThemeProvider.prototype;

  _proto.componentDidMount = function componentDidMount() {
    warning(true, "ThemeProvider was deprecated please use 'ThemeContext' instead. \nSee https://tech.skbkontur.ru/react-ui/#/Customization/ThemeContext");
  };

  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
    if (nextProps.value !== this.props.value) {
      if (isDevelopmentEnv) {
        var hasSameShape = isEqual(nextProps.value, this.props.value);
        warning(!hasSameShape, "ThemeProvider received next value with the same shape as the previous one." + '\n' + "Consider using the same object reference for performance reasons." + '\n' + ("Shape: " + JSON.stringify(nextProps.value)));
      }

      this.theme = this.makeFullTheme(nextProps.value);
    }
  };

  _proto.render = function render() {
    return React.createElement(ThemeContext.Provider, {
      value: this.theme
    }, this.props.children);
  };

  _proto.makeFullTheme = function makeFullTheme(theme) {
    return ThemeFactory.isFullTheme(theme) ? theme : ThemeFactory.create(theme);
  };

  return ThemeProvider;
}(React.Component);
ThemeProvider.__KONTUR_REACT_UI__ = 'ThemeProvider';