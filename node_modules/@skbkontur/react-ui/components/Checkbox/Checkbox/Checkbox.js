import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import { tabListener } from "../../../lib/events/tabListener";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { OkIcon, SquareIcon } from "../../../internal/icons/16px";
import { isEdge, isFirefox, isIE11 } from "../../../lib/utils";
import { jsStyles } from "../Checkbox.styles";
/**
                                               * Все свойства, кроме перечисленных, `className` и `style` передаются в `input`.
                                               */

export var Checkbox =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Checkbox, _React$Component);

  function Checkbox() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      focusedByTab: false,
      indeterminate: _this.props.initialIndeterminate || false
    };
    _this.theme = void 0;
    _this.input = void 0;

    _this.componentDidMount = function () {
      if (_this.state.indeterminate && _this.input) {
        _this.input.indeterminate = true;
      }
    };

    _this.setIndeterminate = function () {
      _this.setState({
        indeterminate: true
      });

      if (_this.input) {
        _this.input.indeterminate = true;
      }
    };

    _this.resetIndeterminate = function () {
      _this.setState({
        indeterminate: false
      });

      if (_this.input) {
        _this.input.indeterminate = false;
      }
    };

    _this.handleFocus = function (e) {
      if (!_this.props.disabled) {
        // focus event fires before keyDown eventlistener
        // so we should check tabPressed in async way
        process.nextTick(function () {
          if (tabListener.isTabPressed) {
            _this.setState({
              focusedByTab: true
            });
          }
        });
      }
    };

    _this.handleBlur = function (e) {
      _this.props.onBlur == null ? void 0 : _this.props.onBlur(e);

      _this.setState({
        focusedByTab: false
      });
    };

    _this.inputRef = function (ref) {
      _this.input = ref;
    };

    _this.handleChange = function (event) {
      var checked = event.currentTarget.checked;
      _this.props.onValueChange == null ? void 0 : _this.props.onValueChange(checked);

      _this.resetIndeterminate();

      _this.props.onChange == null ? void 0 : _this.props.onChange(event);
    };

    return _this;
  }

  var _proto = Checkbox.prototype;

  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
    if (nextProps.checked !== this.props.checked) {
      this.resetIndeterminate();
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return _this2.renderMain();
    });
  }
  /**
   * @public
   */
  ;

  _proto.focus = function focus() {
    var _this$input;

    tabListener.isTabPressed = true;
    (_this$input = this.input) == null ? void 0 : _this$input.focus();
  }
  /**
   * @public
   */
  ;

  _proto.blur = function blur() {
    var _this$input2;

    (_this$input2 = this.input) == null ? void 0 : _this$input2.blur();
  }
  /**
   * Установить промежуточное значение
   * @public
   */
  ;

  _proto.renderMain = function renderMain() {
    var _cn, _cn3;

    var props = this.props;

    var children = props.children,
        error = props.error,
        warning = props.warning,
        onMouseEnter = props.onMouseEnter,
        onMouseLeave = props.onMouseLeave,
        onMouseOver = props.onMouseOver,
        onValueChange = props.onValueChange,
        style = props.style,
        className = props.className,
        type = props.type,
        initialIndeterminate = props.initialIndeterminate,
        rest = _objectWithoutPropertiesLoose(props, ["children", "error", "warning", "onMouseEnter", "onMouseLeave", "onMouseOver", "onValueChange", "style", "className", "type", "initialIndeterminate"]);

    var isIndeterminate = this.state.indeterminate;
    var rootClass = cn((_cn = {}, _cn[jsStyles.root(this.theme)] = true, _cn[jsStyles.rootFallback()] = isIE11 || isEdge, _cn[jsStyles.disabled(this.theme)] = Boolean(props.disabled), _cn[jsStyles.checked(this.theme)] = Boolean(props.checked), _cn[jsStyles.indeterminate(this.theme)] = isIndeterminate, _cn[jsStyles.focus(this.theme)] = this.state.focusedByTab, _cn[jsStyles.warning(this.theme)] = Boolean(props.warning), _cn[jsStyles.error(this.theme)] = Boolean(props.error), _cn));

    var inputProps = _extends({}, rest, {
      type: 'checkbox',
      className: jsStyles.input(),
      onChange: this.handleChange,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      ref: this.inputRef
    });

    var caption = null;

    if (children) {
      var _cn2;

      var captionClass = cn((_cn2 = {}, _cn2[jsStyles.caption()] = true, _cn2[jsStyles.captionIE11()] = isIE11 || isEdge, _cn2));
      caption = React.createElement("span", {
        className: captionClass
      }, children);
    }

    var iconClass = cn((_cn3 = {}, _cn3[jsStyles.iconUnchecked()] = !props.checked && !isIndeterminate, _cn3[jsStyles.iconFixBaseline()] = isFirefox || isIE11 || isEdge, _cn3));
    var box = React.createElement("span", {
      className: jsStyles.box(this.theme)
    }, isIndeterminate && React.createElement(SquareIcon, {
      className: iconClass
    }) || React.createElement(OkIcon, {
      className: iconClass
    }));
    return React.createElement("label", {
      className: rootClass,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      onMouseOver: onMouseOver
    }, React.createElement("input", inputProps), box, caption);
  };

  return Checkbox;
}(React.Component);
Checkbox.__KONTUR_REACT_UI__ = 'Checkbox';
Checkbox.propTypes = {
  checked: PropTypes.bool,
  disabled: PropTypes.bool,
  error: PropTypes.bool,
  warning: PropTypes.bool,
  onValueChange: PropTypes.func,
  onBlur: PropTypes.func,
  onMouseEnter: PropTypes.func,
  onMouseLeave: PropTypes.func,
  onMouseOver: PropTypes.func
};