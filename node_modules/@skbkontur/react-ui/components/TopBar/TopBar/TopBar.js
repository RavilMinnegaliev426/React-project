import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import PropTypes from 'prop-types';
import warning from 'warning';
import cn from 'classnames';
import { Logotype } from "../../Logotype";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { TopBarButtonItem } from "../TopBarButtonItem";
import { TopBarDivider } from "../TopBarDivider";
import { TopBarItem } from "../TopBarItem";
import { TopBarOrganizations } from "../TopBarOrganizations";
import { TopBarDropdown } from "../TopBarDropdown";
import { TopBarUser } from "../TopBarUser";
import { TopBarEnd } from "../TopBarEnd";
import { TopBarStart } from "../TopBarStart";
import { TopBarLogout } from "../TopBarLogout";
import { jsStyles } from "../TopBar.styles";
/**
                                             * __DRAFT__
                                             *
                                             * Шапка
                                             *
                                             * `Item({children: node, iconOnly: bool, onClick: func})` – кликабельный элемент шапки
                                             *
                                             * `Divider()` – разделитель
                                             *
                                             * `TopBarStart({children: node})` – контейнер для элементов в начале шапки
                                             *
                                             * `TopBarEnd({children: node})` – контейнер для элементов в конце шапки
                                             *
                                             * `Logout({children?: node})` – обёртка над `Item`. По умолчанию выводит локализованный текст
                                             *
                                             */

/**
                                                 * @deprecated Контур-специфичный компонент, будет удален в 3.0.0, перенесен в `@skbkontur/react-ui-addons` смотри [миграцию](https://github.com/skbkontur/retail-ui/blob/master/packages/react-ui/MIGRATION.md)
                                                 */

export var TopBar =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(TopBar, _React$Component);

  function TopBar(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.theme = void 0;
    warning(false, "TopBar has been deprecated, use TopBar from @skbkontur/react-ui-addons instead, see [migration](https://github.com/skbkontur/retail-ui/blob/master/packages/react-ui/MIGRATION.md)");
    return _this;
  }

  var _proto = TopBar.prototype;

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return _this2.renderMain();
    });
  };

  _proto.renderMain = function renderMain() {
    var _cn;

    var _this$props = this.props,
        children = _this$props.children,
        leftItems = _this$props.leftItems,
        cabinetUrl = _this$props.cabinetUrl,
        maxWidth = _this$props.maxWidth,
        noShadow = _this$props.noShadow,
        noMargin = _this$props.noMargin,
        userName = _this$props.userName,
        onLogout = _this$props.onLogout,
        _this$props$rightItem = _this$props.rightItems,
        rightItems = _this$props$rightItem === void 0 ? TopBar.defaultProps.rightItems : _this$props$rightItem;

    var _rightItems = [].concat(rightItems);

    if (userName) {
      _rightItems.push(React.createElement(TopBarUser, {
        userName: userName,
        cabinetUrl: cabinetUrl
      }), React.createElement(TopBarDivider, null));
    }

    if (onLogout) {
      _rightItems.push(React.createElement(TopBarLogout, {
        onClick: onLogout
      }));
    }

    var logoProps = {
      suffix: this.props.suffix,
      color: this.props.color,
      href: this.props.logoHref,
      logoComponent: this.props.logoComponent,
      withWidget: !this.props.noWidget
    };
    return React.createElement("div", {
      className: cn((_cn = {}, _cn[jsStyles.root(this.theme)] = true, _cn[jsStyles.noShadow()] = !!noShadow, _cn[jsStyles.noMargin()] = !!noMargin, _cn))
    }, React.createElement("div", {
      className: jsStyles.center(),
      style: {
        maxWidth: maxWidth
      }
    }, React.createElement("div", {
      className: jsStyles.containerWrap()
    }, children ? React.createElement("div", {
      className: jsStyles.container()
    }, children) : React.createElement("div", {
      className: jsStyles.container()
    }, React.createElement("div", {
      className: jsStyles.startItems()
    }, React.createElement(TopBarItem, null, React.createElement(Logotype, logoProps)), this._renderItems(leftItems)), React.createElement("div", {
      className: jsStyles.endItems()
    }, this._renderItems(_rightItems))))));
  };

  _proto._renderItems = function _renderItems(items) {
    if (!items) {
      return null;
    }

    return items.map(function (item, i) {
      if (item && !item.key) {
        return React.cloneElement(item, {
          key: '$topbar_' + i
        });
      }

      return item;
    });
  };

  return TopBar;
}(React.Component);
TopBar.__KONTUR_REACT_UI__ = 'TopBar';
TopBar.Divider = TopBarDivider;
TopBar.Item = TopBarButtonItem;
TopBar.Dropdown = TopBarDropdown;
TopBar.OrganizationsDropdown = TopBarOrganizations;
TopBar.Start = TopBarStart;
TopBar.End = TopBarEnd;
TopBar.ItemStatic = TopBarItem;
TopBar.User = TopBarUser;
TopBar.Logout = TopBarLogout;
TopBar.defaultProps = {
  maxWidth: 1166,
  rightItems: []
};
TopBar.propTypes = {
  /**
   * URL для кастомизации ссылок в меню пользователя
   */
  cabinetUrl: PropTypes.string,
  children: PropTypes.node,

  /**
   * Цвет логотипа
   */
  color: PropTypes.string,
  leftItems: PropTypes.arrayOf(PropTypes.element),

  /**
   * Компонент используемый для рендеринга ссылки.
   * Нужно переопределить если вы хотите подставить ссылку для роутера
   */
  logoComponent: PropTypes.any,
  logoHref: PropTypes.string,

  /**
   * Максимальная ширина контейнера в шапке
   */
  maxWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /**
   * Отключает отступ снизу
   */
  noMargin: PropTypes.bool,

  /**
   * Отключает тень
   */
  noShadow: PropTypes.bool,

  /**
   * Отключает виджет
   */
  noWidget: PropTypes.bool,
  rightItems: PropTypes.arrayOf(PropTypes.element),

  /**
   * Суффикс логотипа
   */
  suffix: PropTypes.string,

  /**
   * Имя пользователя
   */
  userName: PropTypes.node,

  /**
   * Функция выхода
   */
  onLogout: PropTypes.func
};