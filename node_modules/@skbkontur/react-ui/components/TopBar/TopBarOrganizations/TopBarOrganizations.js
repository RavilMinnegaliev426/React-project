import _extends from "@babel/runtime/helpers/esm/extends";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import { ArrowChevronDownIcon } from "../../../internal/icons/16px";
import { TopBarDropdown } from "../TopBarDropdown";
import { jsStyles } from "../TopBar.styles";
/**
                                             * Дропдаун с организациями
                                             *
                                             * @visibleName TopBar.OrganizationsDropdown
                                             */

export var TopBarOrganizations =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(TopBarOrganizations, _React$Component);

  function TopBarOrganizations() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      captionWhiteSpace: 'normal',
      minWidth: null
    };
    _this._caption = void 0;
    _this._comment = void 0;

    _this._getCaptionRef = function (element) {
      _this._caption = element;
    };

    _this._getCommentRef = function (element) {
      _this._comment = element;
    };

    return _this;
  }

  var _proto = TopBarOrganizations.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this._recalculateWidth();
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (prevProps.caption !== this.props.caption) {
      this._recalculateWidth();
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        caption = _this$props.caption,
        comment = _this$props.comment;
    var title = React.createElement("div", null, React.createElement("span", {
      className: jsStyles.organizationsTitle(),
      style: {
        paddingRight: this._comment ? this._comment.offsetWidth + 30 : undefined
      }
    }, React.createElement("span", {
      ref: this._getCaptionRef
    }, caption), comment && React.createElement("span", {
      className: jsStyles.organizationsComment(),
      ref: this._getCommentRef
    }, comment), React.createElement("span", {
      className: jsStyles.organizationsArrow()
    }, React.createElement(ArrowChevronDownIcon, {
      color: "#aaa",
      size: 14
    }))), React.createElement("div", {
      className: jsStyles.organizationsTitleDummy(),
      style: {
        whiteSpace: this.state.captionWhiteSpace
      }
    }, React.createElement("span", null, caption), comment && React.createElement("span", {
      className: jsStyles.organizationsCommentDummy()
    }, comment)));
    return React.createElement(TopBarDropdown, _extends({}, this.props, {
      label: title,
      minWidth: this.state.minWidth
    }), this.props.children);
  };

  _proto._recalculateWidth = function _recalculateWidth() {
    var commentWidth = this._comment ? this._comment.offsetWidth : 0;

    if (!this._caption) {
      return;
    } // 360 is minWidth from guides. Apply it when content is bigger.
    // 315 is because of 15px left padding and 30px arrow.


    if (this._caption.offsetWidth + commentWidth > 315) {
      this.setState({
        captionWhiteSpace: 'normal',
        minWidth: 360
      });
    } else {
      this.setState({
        captionWhiteSpace: 'nowrap',
        minWidth: null
      });
    }
  };

  return TopBarOrganizations;
}(React.Component);
TopBarOrganizations.__KONTUR_REACT_UI__ = 'TopBarOrganizations';