import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import { tabListener } from "../../../lib/events/tabListener";
import { ThemeContext } from "../../../lib/theming/ThemeContext";
import { jsStyles } from "../Toggle.styles";
export var Toggle =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Toggle, _React$Component);

  function Toggle(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.theme = void 0;
    _this.input = null;

    _this.focus = function () {
      if (_this.input) {
        tabListener.isTabPressed = true;

        _this.input.focus();
      }
    };

    _this.inputRef = function (element) {
      _this.input = element;
    };

    _this.handleChange = function (event) {
      if (_this.props.onValueChange) {
        _this.props.onValueChange(event.target.checked);
      }

      if (_this.isUncontrolled()) {
        _this.setState({
          checked: event.target.checked
        });
      }

      if (_this.props.onChange) {
        _this.props.onChange(event);
      }
    };

    _this.handleFocus = function (event) {
      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }

      if (tabListener.isTabPressed) {
        _this.setState({
          focusByTab: true
        });
      }
    };

    _this.handleBlur = function (event) {
      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }

      _this.setState({
        focusByTab: false
      });
    };

    _this.state = {
      focusByTab: false,
      checked: props.defaultChecked
    };
    return _this;
  }

  var _proto = Toggle.prototype;

  _proto.componentDidMount = function componentDidMount() {
    if (this.props.autoFocus) {
      tabListener.isTabPressed = true;
      this.focus();
    }
  }
  /**
   * @public
   */
  ;

  _proto.render = function render() {
    var _this2 = this;

    return React.createElement(ThemeContext.Consumer, null, function (theme) {
      _this2.theme = theme;
      return _this2.renderMain();
    });
  };

  _proto.renderMain = function renderMain() {
    var _cn, _cn2;

    var _this$props = this.props,
        warning = _this$props.warning,
        error = _this$props.error,
        loading = _this$props.loading,
        color = _this$props.color;
    var disabled = this.props.disabled || loading;
    var checked = this.isUncontrolled() ? this.state.checked : this.props.checked;
    var containerClassNames = cn(jsStyles.container(this.theme), (_cn = {}, _cn[jsStyles.focused(this.theme)] = !disabled && !!this.state.focusByTab, _cn[jsStyles.isLoading(this.theme)] = !!loading, _cn[jsStyles.isWarning(this.theme)] = !color && !!warning, _cn[jsStyles.isError(this.theme)] = !color && !!error, _cn));
    return React.createElement("label", {
      className: cn(jsStyles.wrapper(this.theme), (_cn2 = {}, _cn2[jsStyles.wrapperDisabled(this.theme)] = !!disabled, _cn2))
    }, React.createElement("input", {
      type: "checkbox",
      checked: checked,
      onChange: this.handleChange,
      className: jsStyles.input(this.theme),
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      ref: this.inputRef,
      disabled: disabled
    }), React.createElement("div", {
      className: containerClassNames,
      style: checked && color ? {
        backgroundColor: color,
        borderColor: color,
        boxShadow: "inset 0 0 0 1px " + color
      } : undefined
    }, React.createElement("div", {
      className: jsStyles.activeBackground(),
      style: checked && color ? {
        backgroundColor: color
      } : undefined
    })), React.createElement("div", {
      className: jsStyles.handle(this.theme)
    }));
  };

  _proto.isUncontrolled = function isUncontrolled() {
    return this.props.checked === undefined;
  };

  return Toggle;
}(React.Component);
Toggle.__KONTUR_REACT_UI__ = 'Toggle';
Toggle.propTypes = {
  checked: PropTypes.bool,
  defaultChecked: PropTypes.bool,
  disabled: PropTypes.bool,
  error: PropTypes.bool,
  loading: PropTypes.bool,
  warning: PropTypes.bool,
  onValueChange: PropTypes.func
};
Toggle.defaultProps = {
  disabled: false,
  loading: false
};