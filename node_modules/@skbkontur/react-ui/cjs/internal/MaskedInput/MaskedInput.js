"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.MaskedInput = void 0;var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));
var _reactInputMask = _interopRequireDefault(require("react-input-mask"));

var _ThemeContext = require("../../lib/theming/ThemeContext");


var _MaskedInput = require("./MaskedInput.styles");var


















MaskedInput = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(MaskedInput, _React$Component);






  function MaskedInput(_props) {var _this;
    _this = _React$Component.call(this, _props) || this;_this.input = null;_this.theme = void 0;_this.reactInputMask = null;_this.







































































    getValue = function (props) {var
      value = props.value,defaultValue = props.defaultValue;

      return value !== undefined ? value.toString() : defaultValue !== undefined ? defaultValue.toString() : '';
    };_this.

    refInput = function (input) {
      _this.input = input;
    };_this.

    refMaskedInput = function (reactInputMask) {
      _this.reactInputMask = reactInputMask;
    };_this.

    handleChange = function (event) {
      if (event.target.value === _this.state.value) {
        _this.handleUnexpectedInput();
      } else {
        _this.setState({ value: event.target.value });
        if (_this.props.onValueChange) {
          _this.props.onValueChange(event.target.value);
        }
        if (_this.props.onChange) {
          _this.props.onChange(event);
        }
      }
    };_this.

    handleFocus = function (event) {
      _this.setState({ focused: true });

      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }
    };_this.

    handleBlur = function (event) {
      _this.setState({ focused: false });

      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }
    };_this.

    preprocess = function (
    newState,
    oldState,
    userInput,
    options)
    {
      var visibleMaskChars = new Array(options.mask.length).fill(_this.props.maskChar);

      if (newState.value !== oldState.value && userInput === null) {
        _this.setState({
          value: newState.value });

      }

      options.mask.split('').forEach(function (char, index) {
        if (options.permanents.includes(index)) {
          visibleMaskChars[index] = char;
        }

        if (newState.value[index]) {
          visibleMaskChars[index] = newState.value[index];
        }
      });

      var emptyValue = visibleMaskChars.join('');

      if (_this.state.emptyValue !== emptyValue) {
        _this.setState({
          emptyValue: emptyValue });

      }

      return newState;
    };_this.

    isMaskVisible = function () {return _this.props.alwaysShowMask || _this.state.focused;};_this.

    handleUnexpectedInput = function () {
      if (_this.props.onUnexpectedInput) {
        _this.props.onUnexpectedInput(_this.state.value);
      }
    };_this.state = { value: _this.getValue(_props), emptyValue: '', focused: false };return _this;}var _proto = MaskedInput.prototype;_proto.componentDidMount = function componentDidMount() {if (this.reactInputMask) {// FIXME: принудительно вызываем beforeMaskedValueChange, чтобы получить emptyValue
      this.reactInputMask.forceUpdate();}};_proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {if (this.props.value !== nextProps.value) {this.setState({ value: nextProps.value ? nextProps.value.toString() : '' });}};_proto.render = function render() {var _this2 = this;return _react.default.createElement(_ThemeContext.ThemeContext.Consumer, null, function (theme) {_this2.theme = theme;return _this2.renderMain();});};_proto.renderMain = function renderMain() {var _this$props = this.props,maskChar = _this$props.maskChar,alwaysShowMask = _this$props.alwaysShowMask,hasLeftIcon = _this$props.hasLeftIcon,hasRightIcon = _this$props.hasRightIcon,maxLength = _this$props.maxLength,onValueChange = _this$props.onValueChange,onUnexpectedInput = _this$props.onUnexpectedInput,defaultValue = _this$props.defaultValue,inputProps = (0, _objectWithoutPropertiesLoose2.default)(_this$props, ["maskChar", "alwaysShowMask", "hasLeftIcon", "hasRightIcon", "maxLength", "onValueChange", "onUnexpectedInput", "defaultValue"]);return _react.default.createElement("span", { className: _MaskedInput.jsStyles.container(), "x-ms-format-detection": "none" }, _react.default.createElement(_reactInputMask.default, (0, _extends2.default)({}, inputProps, { maskChar: null, beforeMaskedValueChange: this.preprocess, alwaysShowMask: false, onChange: this.handleChange, onFocus: this.handleFocus, onBlur: this.handleBlur, value: this.state.value, inputRef: this.refInput, ref: this.refMaskedInput })), this.isMaskVisible() && _react.default.createElement("span", { className: _MaskedInput.jsStyles.inputMask(this.theme) }, _react.default.createElement("span", { style: { color: 'transparent' } }, this.state.emptyValue.slice(0, this.state.value.length)), this.state.emptyValue.slice(this.state.value.length)));};return MaskedInput;}(_react.default.Component);exports.MaskedInput = MaskedInput;MaskedInput.__KONTUR_REACT_UI__ = 'MaskedInput';