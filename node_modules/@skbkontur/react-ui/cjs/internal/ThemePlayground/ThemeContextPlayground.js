"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.ThemeContextPlayground = void 0;var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));

var _ThemeContext = require("../../lib/theming/ThemeContext");

var _ThemeFactory = require("../../lib/theming/ThemeFactory");
var _FlatTheme = require("../../lib/theming/themes/FlatTheme");
var _DefaultTheme = require("../../lib/theming/themes/DefaultTheme");
var _SidePage = require("../../components/SidePage");
var _Gapped = require("../../components/Gapped");
var _ComboBox = require("../../components/ComboBox");
var _Link = require("../../components/Link");
var ColorFunctions = _interopRequireWildcard(require("../../lib/styles/ColorFunctions"));


var _ThemeEditor = require("./ThemeEditor");
var _Playground = require("./Playground.styles");
var _Playground2 = require("./Playground");
var _darkTheme = require("./darkTheme");
var _constants = require("./constants");var




























ThemeContextPlayground = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(ThemeContextPlayground, _React$Component);






  function ThemeContextPlayground(props) {var _this;
    _this = _React$Component.call(this, props) || this;_this.editableThemesItems = [{ value: _constants.ThemeType.Default, label: 'Дефолтная' }, { value: _constants.ThemeType.Flat, label: 'Плоская' }, { value: _constants.ThemeType.Dark, label: 'Темная' }];_this.

































    renderSidePage = function () {var _this$state =
      _this.state,currentTheme = _this$state.currentTheme,themesErrors = _this$state.themesErrors,editingThemeItem = _this$state.editingThemeItem,themes = _this$state.themes;
      var themeErrors = themesErrors[editingThemeItem ? editingThemeItem.value : 'default'];
      return (
        _react.default.createElement(_SidePage.SidePage, { disableAnimations: true, ignoreBackgroundClick: true, blockBackground: true, width: 600, onClose: _this.handleClose },
        _react.default.createElement(_SidePage.SidePage.Header, null,
        _react.default.createElement("div", { className: _Playground.jsStyles.editorHeaderWrapper(currentTheme) },
        _react.default.createElement(_Gapped.Gapped, { wrap: true, verticalAlign: "middle" },
        _react.default.createElement("span", null, "\u0422\u0435\u043C\u0430 \u0434\u043B\u044F \u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F:"),
        _react.default.createElement(_ComboBox.ComboBox, {
          getItems: _this.getEditableThemesItems,
          value: editingThemeItem,
          onValueChange: _this.handleEditingThemeSwitch }))),



        _react.default.createElement("div", { style: { fontSize: 14, marginTop: 8 } },
        _react.default.createElement(_Link.Link, { onClick: _this.handelGetTheme }, "\u0412\u044B\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043C\u0443 \u0432 \u043A\u043E\u043D\u0441\u043E\u043B\u044C"))),


        _react.default.createElement(_SidePage.SidePage.Body, null,
        _react.default.createElement("div", { className: _Playground.jsStyles.sidePageBody() },
        _react.default.createElement(_ThemeEditor.ThemeEditor, {
          editingTheme: themes[editingThemeItem.value],
          currentTheme: currentTheme,
          currentErrors: themeErrors,
          onValueChange: _this.handleThemeVariableChange })))));





    };_this.

    handelGetTheme = function () {
      var currentTheme = _this.state.currentTheme;
      var themeObject = {};
      _ThemeFactory.ThemeFactory.getKeys(currentTheme).forEach(function (key) {
        var descriptor = Object.getOwnPropertyDescriptor(currentTheme, key);
        if (descriptor && !descriptor.get && _DefaultTheme.DEFAULT_THEME[key] && currentTheme[key] !== _DefaultTheme.DEFAULT_THEME[key]) {
          themeObject[key] = currentTheme[key];
        }
      });

      console.log(JSON.stringify(themeObject));
    };_this.

    handleOpen = function () {
      _this.setState(function (state) {return {
          editorOpened: true,
          editingThemeItem: _this.editableThemesItems.find(function (i) {return i.value === state.currentThemeType;}) };});

    };_this.

    handleClose = function () {
      _this.setState({
        editorOpened: false });

    };_this.

    handleThemeChange = function (value) {
      var themeType = value;
      _this.setState({
        currentThemeType: themeType,
        currentTheme: _this.state.themes[themeType] });

    };_this.

    handleThemeVariableChange = function (variable, value) {var _this$state2 =
      _this.state,editingThemeItem = _this$state2.editingThemeItem,currentTheme = _this$state2.currentTheme,themes = _this$state2.themes,themesErrors = _this$state2.themesErrors;
      var editingThemeType = editingThemeItem.value;

      var theme = themes[editingThemeType];
      var currentValue = theme[variable];

      var canSetVariable = true;
      if (ColorFunctions.isValid(currentValue)) {
        canSetVariable = ColorFunctions.isValid(value);
        themesErrors[editingThemeType][variable] = !canSetVariable;
      }

      var nextThemeErrors = (0, _extends2.default)({}, themesErrors);
      nextThemeErrors[editingThemeType][variable] = !canSetVariable;
      var stateUpdate = { themes: themes, currentTheme: currentTheme, themesErrors: nextThemeErrors };

      if (canSetVariable) {
        var result = _this.changeThemeVariable(theme, variable, value);
        stateUpdate.themes[editingThemeType] = result;
        if (_this.state.currentThemeType === editingThemeType) {
          stateUpdate.currentTheme = result;
        }
      }

      _this.setState(stateUpdate);
    };_this.

    getEditableThemesItems = function (query) {
      return Promise.resolve(_this.editableThemesItems.filter(function (i) {return i.label.toLowerCase().includes(query.toLowerCase());}));
    };_this.

    handleEditingThemeSwitch = function (item) {
      _this.setState({ editingThemeItem: item });
    };_this.

    changeThemeVariable = function (theme, variableName, variableValue) {
      var result = {};
      _ThemeFactory.ThemeFactory.getKeys(theme).forEach(function (key) {
        var descriptor = findPropertyDescriptor(theme, key);
        descriptor.enumerable = true;
        descriptor.configurable = true;
        if (key === variableName) {
          delete descriptor.get;
          delete descriptor.set;
          descriptor.value = variableValue;
        }
        Object.defineProperty(result, key, descriptor);
      });

      return _ThemeFactory.ThemeFactory.create(result);
    };_this.state = { currentTheme: _DefaultTheme.DEFAULT_THEME, currentThemeType: _constants.ThemeType.Default, editorOpened: false, themes: { default: _DefaultTheme.DEFAULT_THEME, dark: _darkTheme.darkTheme, flat: _FlatTheme.FLAT_THEME }, themesErrors: { default: {}, dark: {}, flat: {} } };return _this;}var _proto = ThemeContextPlayground.prototype;_proto.render = function render() {var _this$state3 = this.state,currentTheme = _this$state3.currentTheme,editorOpened = _this$state3.editorOpened,currentThemeType = _this$state3.currentThemeType;return _react.default.createElement(_ThemeContext.ThemeContext.Provider, { value: currentTheme }, editorOpened && this.renderSidePage(), _react.default.createElement(_Playground2.Playground, { onThemeChange: this.handleThemeChange, currentThemeType: currentThemeType, onEditLinkClick: this.handleOpen }));};return ThemeContextPlayground;}(_react.default.Component);exports.ThemeContextPlayground = ThemeContextPlayground;


function findPropertyDescriptor(theme, propName) {
  for (; theme != null; theme = Object.getPrototypeOf(theme)) {
    if (Object.prototype.hasOwnProperty.call(theme, propName)) {
      return Object.getOwnPropertyDescriptor(theme, propName) || {};
    }
  }
  return {};
}