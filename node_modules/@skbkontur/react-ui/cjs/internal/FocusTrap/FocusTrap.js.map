{"version":3,"sources":["FocusTrap.tsx"],"names":["FocusTrap","focusOutsideListenerToken","onClickOutside","e","props","onBlur","detachListeners","attachListeners","document","addEventListener","documentElement","handleNativeDocClick","event","target","srcElement","node","Element","componentWillUnmount","render","children","React","cloneElement","Children","only","onFocus","remove","removeEventListener","PureComponent","__KONTUR_REACT_UI__"],"mappings":"mWAAA;AACA;;AAEA,kE;;;;;;;AAOaA,S;;;AAGHC,IAAAA,yB;;AAEG,Q;;;;;;;;;;;;;;;;;;;;;;AAsBHC,IAAAA,c,GAAiB,UAACC,CAAD,EAAc;AACrC,UAAI,MAAKC,KAAL,CAAWC,MAAf,EAAuB;AACrB,cAAKD,KAAL,CAAWC,MAAX,CAAkBF,CAAlB;AACD;AACD,YAAKG,eAAL;AACD,K;;AAEOC,IAAAA,e,GAAkB,YAAM;AAC9B,UAAI,CAAC,MAAKN,yBAAV,EAAqC;AACnC,cAAKA,yBAAL,GAAiC,gCAAmB,CAAC,uEAAD,CAAnB,EAAuD,MAAKC,cAA5D,CAAjC;;AAEAM,QAAAA,QAAQ,CAACC,gBAAT;AACE,0BAAkBD,QAAQ,CAACE,eAA3B,GAA6C,YAA7C,GAA4D,WAD9D;AAEE,cAAKC,oBAFP;;AAID;AACF,K;;;;;;;;;;;;;;AAcOA,IAAAA,oB,GAAuB,UAACC,KAAD,EAAkB;AAC/C,UAAMC,MAAM,GAAGD,KAAK,CAACC,MAAN,IAAgBD,KAAK,CAACE,UAArC;AACA,UAAMC,IAAI,GAAG,uEAAb;;AAEA,UAAIF,MAAM,YAAYG,OAAlB,IAA6B,yDAAgCH,MAAhC,EAAwCE,IAAxC,CAAjC,EAAgF;AAC9E;AACD;;AAED,YAAKb,cAAL,CAAoBU,KAApB;AACD,K,uDA3DMK,oB,GAAP,gCAA8B,CAC5B,IAAI,KAAKhB,yBAAT,EAAoC,CAClC,KAAKK,eAAL,GACD,CACF,C,QAEMY,M,GAAP,kBAAgB,qCACe,KAAKd,KADpB,CACNe,QADM,eACNA,QADM,CACId,MADJ,eACIA,MADJ,CAEd,OAAOe,eAAMC,YAAN,CAAmBD,eAAME,QAAN,CAAeC,IAAf,CAAoBJ,QAApB,CAAnB,EAAkD,EACvDK,OAAO,EAAE,mBAAoB,CAC3B,IAAInB,MAAJ,EAAY,CACV,MAAI,CAACE,eAAL,GACD,CACD,IAAIY,QAAQ,CAACf,KAAT,IAAkBe,QAAQ,CAACf,KAAT,CAAeoB,OAArC,EAA8C,qBAC5C,mBAAAL,QAAQ,CAACf,KAAT,EAAeoB,OAAf,mCACD,CACF,CARsD,EAAlD,CAAP,CAUD,C,QAoBOlB,e,GAAR,2BAA0B,CACxB,IAAI,KAAKL,yBAAT,EAAoC,CAClC,KAAKA,yBAAL,CAA+BwB,MAA/B,GACA,KAAKxB,yBAAL,GAAiC,IAAjC,CAEAO,QAAQ,CAACkB,mBAAT,CACE,kBAAkBlB,QAAQ,CAACE,eAA3B,GAA6C,YAA7C,GAA4D,WAD9D,EAEE,KAAKC,oBAFP,EAID,CACF,C,oBAvD4BS,eAAMO,a,gCAAxB3B,S,CACG4B,mB,GAAsB,W","sourcesContent":["import React from 'react';\r\nimport { findDOMNode } from 'react-dom';\r\n\r\nimport { listen as listenFocusOutside, containsTargetOrRenderContainer } from '../../lib/listenFocusOutside';\r\n\r\nexport interface FocusTrapProps {\r\n  children: React.ReactElement<any>;\r\n  onBlur?: (event: FocusEvent) => void;\r\n}\r\n\r\nexport class FocusTrap extends React.PureComponent<FocusTrapProps> {\r\n  public static __KONTUR_REACT_UI__ = 'FocusTrap';\r\n\r\n  private focusOutsideListenerToken: {\r\n    remove: () => void;\r\n  } | null = null;\r\n\r\n  public componentWillUnmount() {\r\n    if (this.focusOutsideListenerToken) {\r\n      this.detachListeners();\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const { children, onBlur } = this.props;\r\n    return React.cloneElement(React.Children.only(children), {\r\n      onFocus: (...args: any[]) => {\r\n        if (onBlur) {\r\n          this.attachListeners();\r\n        }\r\n        if (children.props && children.props.onFocus) {\r\n          children.props.onFocus(...args);\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  private onClickOutside = (e: Event) => {\r\n    if (this.props.onBlur) {\r\n      this.props.onBlur(e as FocusEvent);\r\n    }\r\n    this.detachListeners();\r\n  };\r\n\r\n  private attachListeners = () => {\r\n    if (!this.focusOutsideListenerToken) {\r\n      this.focusOutsideListenerToken = listenFocusOutside([findDOMNode(this) as HTMLElement], this.onClickOutside);\r\n\r\n      document.addEventListener(\r\n        'ontouchstart' in document.documentElement ? 'touchstart' : 'mousedown',\r\n        this.handleNativeDocClick,\r\n      );\r\n    }\r\n  };\r\n\r\n  private detachListeners() {\r\n    if (this.focusOutsideListenerToken) {\r\n      this.focusOutsideListenerToken.remove();\r\n      this.focusOutsideListenerToken = null;\r\n\r\n      document.removeEventListener(\r\n        'ontouchstart' in document.documentElement ? 'touchstart' : 'mousedown',\r\n        this.handleNativeDocClick,\r\n      );\r\n    }\r\n  }\r\n\r\n  private handleNativeDocClick = (event: Event) => {\r\n    const target = event.target || event.srcElement;\r\n    const node = findDOMNode(this) as HTMLElement;\r\n\r\n    if (target instanceof Element && containsTargetOrRenderContainer(target)(node)) {\r\n      return;\r\n    }\r\n\r\n    this.onClickOutside(event);\r\n  };\r\n}\r\n"]}