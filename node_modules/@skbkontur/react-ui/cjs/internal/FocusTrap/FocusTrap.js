"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.FocusTrap = void 0;var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));
var _reactDom = require("react-dom");

var _listenFocusOutside = require("../../lib/listenFocusOutside");var






FocusTrap = /*#__PURE__*/function (_React$PureComponent) {(0, _inheritsLoose2.default)(FocusTrap, _React$PureComponent);function FocusTrap() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;_this.


    focusOutsideListenerToken =

    null;_this.





















    onClickOutside = function (e) {
      if (_this.props.onBlur) {
        _this.props.onBlur(e);
      }
      _this.detachListeners();
    };_this.

    attachListeners = function () {
      if (!_this.focusOutsideListenerToken) {
        _this.focusOutsideListenerToken = (0, _listenFocusOutside.listen)([(0, _reactDom.findDOMNode)((0, _assertThisInitialized2.default)(_this))], _this.onClickOutside);

        document.addEventListener(
        'ontouchstart' in document.documentElement ? 'touchstart' : 'mousedown',
        _this.handleNativeDocClick);

      }
    };_this.













    handleNativeDocClick = function (event) {
      var target = event.target || event.srcElement;
      var node = (0, _reactDom.findDOMNode)((0, _assertThisInitialized2.default)(_this));

      if (target instanceof Element && (0, _listenFocusOutside.containsTargetOrRenderContainer)(target)(node)) {
        return;
      }

      _this.onClickOutside(event);
    };return _this;}var _proto = FocusTrap.prototype;_proto.componentWillUnmount = function componentWillUnmount() {if (this.focusOutsideListenerToken) {this.detachListeners();}};_proto.render = function render() {var _this2 = this;var _this$props = this.props,children = _this$props.children,onBlur = _this$props.onBlur;return _react.default.cloneElement(_react.default.Children.only(children), { onFocus: function onFocus() {if (onBlur) {_this2.attachListeners();}if (children.props && children.props.onFocus) {var _children$props;(_children$props = children.props).onFocus.apply(_children$props, arguments);}} });};_proto.detachListeners = function detachListeners() {if (this.focusOutsideListenerToken) {this.focusOutsideListenerToken.remove();this.focusOutsideListenerToken = null;document.removeEventListener('ontouchstart' in document.documentElement ? 'touchstart' : 'mousedown', this.handleNativeDocClick);}};return FocusTrap;}(_react.default.PureComponent);exports.FocusTrap = FocusTrap;FocusTrap.__KONTUR_REACT_UI__ = 'FocusTrap';