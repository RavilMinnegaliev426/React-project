"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.HideBodyVerticalScroll = void 0;var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));

var _getScrollWidth = require("../../lib/dom/getScrollWidth");var

HideBodyVerticalScroll = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(HideBodyVerticalScroll, _React$Component);function HideBodyVerticalScroll() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;_this.





    disposeDocumentStyle = null;_this.
    initialScroll = 0;_this.
    master = false;_this.































    updateScrollVisibility = function () {var _document =
      document,documentElement = _document.documentElement;

      _this.restoreStyles();

      if (!documentElement) {
        return;
      }var

      clientHeight = documentElement.clientHeight,scrollHeight = documentElement.scrollHeight;
      var shouldRestore = VerticalScrollCounter.get() === 0;
      var shouldHide = !shouldRestore && clientHeight < scrollHeight;

      if (shouldHide) {
        _this.makeSomeMagicWithScroll(documentElement);
      }

      if (shouldRestore) {
        documentElement.scrollTop = _this.initialScroll;
      }
    };_this.

    makeSomeMagicWithScroll = function (document) {
      var documentComputedStyle = getComputedStyle(document);
      var scrollWidth = (0, _getScrollWidth.getScrollWidth)();
      var documentMargin = parseFloat(documentComputedStyle.marginRight || '');
      var documentStyle = generateDocumentStyle(documentMargin + scrollWidth);

      _this.disposeDocumentStyle = _this.attachStyle(document, documentStyle);
    };_this.

    attachStyle = function (element, style) {
      element.classList.add(style.className);
      var removeStyleNode = attachStylesheet(style.css);
      return function () {
        removeStyleNode();
        element.classList.remove(style.className);
      };
    };_this.

    restoreStyles = function () {
      if (_this.disposeDocumentStyle) {
        _this.disposeDocumentStyle();
        _this.disposeDocumentStyle = null;
      }

      // Forcing reflow for Firefix
      attachStylesheet('html, body { height: auto; }')();
    };return _this;}var _proto = HideBodyVerticalScroll.prototype;_proto.componentDidMount = function componentDidMount() {var counter = VerticalScrollCounter.increment();if (counter === 1) {this.master = true;this.initialScroll = document.documentElement ? document.documentElement.scrollTop : 0;this.updateScrollVisibility();window.addEventListener('resize', this.updateScrollVisibility);}};_proto.componentDidUpdate = function componentDidUpdate() {if (this.master) {this.updateScrollVisibility();}};_proto.componentWillUnmount = function componentWillUnmount() {this.restoreStyles();var counter = VerticalScrollCounter.decrement();if (counter === 0) {this.updateScrollVisibility();window.removeEventListener('resize', this.updateScrollVisibility);}};_proto.render = function render() {return null;};return HideBodyVerticalScroll;}(_react.default.Component);exports.HideBodyVerticalScroll = HideBodyVerticalScroll;HideBodyVerticalScroll.__KONTUR_REACT_UI__ = 'HideBodyVerticalScroll';HideBodyVerticalScroll.hash = Math.random().toString(16).slice(2, 6);var


VerticalScrollCounter = function VerticalScrollCounter() {};VerticalScrollCounter.
increment = function () {
  var counter = window.RetailUIVerticalScrollCounter || 0;
  return window.RetailUIVerticalScrollCounter = counter + 1;
};VerticalScrollCounter.

decrement = function () {
  var counter = window.RetailUIVerticalScrollCounter || 0;
  return window.RetailUIVerticalScrollCounter = counter - 1;
};VerticalScrollCounter.

get = function () {
  return window.RetailUIVerticalScrollCounter || 0;
};


function generateClassName(className) {var
  name = HideBodyVerticalScroll.name,hash = HideBodyVerticalScroll.hash;
  return name + "-" + className + "-" + hash;
}

function generateDocumentStyle(documentMargin) {
  var className = generateClassName('document');
  var css = "." +
  className + " {\n  overflow: hidden !important;\n  margin-right: " +

  documentMargin + "px !important;\n  height: 100%;\n}\n";



  return { className: className, css: css };
}

function attachStylesheet(sheet) {
  var style = document.createElement('style');
  style.setAttribute('type', 'text/css');
  // @ts-ignore IE specific api
  if (style.styleSheet) {
    // @ts-ignore IE specific api
    style.styleSheet.cssText = sheet;
  } else {
    var textnode = document.createTextNode(sheet);
    style.appendChild(textnode);
  }
  var head = document.getElementsByTagName('head')[0];
  head.appendChild(style);
  return function () {
    if (head.contains(style)) {
      head.removeChild(style);
    }
  };
}