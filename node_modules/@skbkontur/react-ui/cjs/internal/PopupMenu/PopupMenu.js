"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.PopupMenu = exports.PopupMenuType = void 0;var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));

var _identifiers = require("../../lib/events/keyboard/identifiers");






var _InternalMenu = require("../InternalMenu");
var _Popup = require("../Popup");
var _RenderLayer = require("../RenderLayer");


var _PopupMenuPositions = require("./PopupMenuPositions");
var _validatePositions = require("./validatePositions");
var _PopupMenu = require("./PopupMenu.styles");











































var PopupMenuType = {
  Dropdown: 'dropdown',
  Tooltip: 'tooltip' };exports.PopupMenuType = PopupMenuType;var


PopupMenu = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(PopupMenu, _React$Component);function PopupMenu() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;_this.












    state = {
      menuVisible: false,
      firstItemShouldBeSelected: false };_this.


    captionWrapper = null;_this.
    savedFocusableElement = null;_this.
    menu = null;_this.











































    open = function () {return _this.showMenu();};_this.
    close = function () {return _this.hideMenu();};_this.

    refInternalMenu = function (element) {return _this.menu = element;};_this.

    handleOpen = function () {
      if (_this.menu) {
        _this.menu.focus();
      }
    };_this.

    renderCaption = function () {
      if (typeof _this.props.caption === 'function') {
        var caption = _this.props.caption({
          opened: _this.state.menuVisible,
          openMenu: _this.showMenu,
          closeMenu: _this.hideMenu,
          toggleMenu: _this.toggleMenu });


        return (
          _react.default.createElement("span", {
            "data-tid": "PopupMenu__caption",
            className: _PopupMenu.jsStyles.caption(),
            ref: function ref(element) {return _this.captionWrapper = element;} },

          caption));


      }

      return (
        _react.default.createElement("span", {
          "data-tid": "PopupMenu__caption",
          onClick: _this.handleCaptionClick,
          onKeyDown: _this.handleCaptionKeyDown,
          ref: function ref(element) {return _this.captionWrapper = element;},
          className: _PopupMenu.jsStyles.caption() },

        _this.props.caption));


    };_this.

    hideMenuWithoutFocusing = function () {return _this.hideMenu();};_this.









    showMenu = function (firstItemShouldBeSelected) {
      _this.saveFocus();
      _this.setState(
      {
        menuVisible: true,
        firstItemShouldBeSelected: firstItemShouldBeSelected },

      function () {
        _this.handleChangeMenuVisible(false);
      });

    };_this.

    hideMenu = function (restoreFocus) {
      _this.setState(
      {
        menuVisible: false,
        firstItemShouldBeSelected: false },

      function () {
        _this.handleChangeMenuVisible(!!restoreFocus);
      });

    };_this.

    toggleMenu = function () {
      _this.state.menuVisible ? _this.hideMenu() : _this.showMenu();
    };_this.

    handleCaptionClick = function () {
      _this.toggleMenu();
    };_this.

    handleCaptionKeyDown = function (e) {
      if ((0, _identifiers.someKeys)(_identifiers.isKeyEnter, _identifiers.isKeySpace, _identifiers.isKeyArrowVertical)(e)) {
        e.preventDefault();
        _this.showMenu(true);
      }
    };_this.

    handleKeyDown = function (e) {
      if ((0, _identifiers.isKeyEscape)(e)) {
        var _restoreFocus = true;
        _this.hideMenu(_restoreFocus);
      }
    };_this.

    saveFocus = function () {
      if (document) {
        _this.savedFocusableElement = document.activeElement;
      }
    };_this.

    restoreFocus = function () {
      if (_this.savedFocusableElement) {
        _this.savedFocusableElement.focus();
        _this.savedFocusableElement = null;
      }
    };_this.

    handleChangeMenuVisible = function (focusShouldBeRestored) {
      if (focusShouldBeRestored) {
        _this.restoreFocus();
      }
      if (typeof _this.props.onChangeMenuState === 'function') {
        _this.props.onChangeMenuState(_this.state.menuVisible, focusShouldBeRestored);
      }
    };_this.

    handleItemSelection = function (event) {
      if (event.isDefaultPrevented()) {
        return;
      }

      if (event.type === 'keydown') {
        event.preventDefault();
      }

      var restoreFocus = event.type === 'keydown';
      _this.hideMenu(restoreFocus);
    };return _this;}var _proto = PopupMenu.prototype;_proto.render = function render() {return _react.default.createElement(_RenderLayer.RenderLayer, { onClickOutside: this.hideMenuWithoutFocusing, onFocusOutside: this.hideMenuWithoutFocusing, active: this.state.menuVisible }, _react.default.createElement("div", { className: _PopupMenu.jsStyles.container() }, this.renderCaption(), this.captionWrapper && this.props.children && _react.default.createElement(_Popup.Popup, { anchorElement: this.captionWrapper, opened: this.state.menuVisible, hasShadow: true, margin: this.props.popupMargin, hasPin: this.props.popupHasPin, pinOffset: this.props.popupPinOffset, positions: this.getPositions(), disableAnimations: this.props.disableAnimations, onOpen: this.handleOpen }, _react.default.createElement(_InternalMenu.InternalMenu, { hasShadow: false, maxHeight: this.props.menuMaxHeight || 'none', onKeyDown: this.handleKeyDown, width: this.props.menuWidth || 'auto', onItemClick: this.handleItemSelection, cyclicSelection: false, ref: this.refInternalMenu, initialSelectedItemIndex: this.state.firstItemShouldBeSelected ? 0 : -1, header: this.props.header, footer: this.props.footer }, this.props.children))));};_proto.getPositions = function getPositions() {if (this.props.positions && (0, _validatePositions.isValidPositions)(this.props.positions)) {return this.props.positions;}return _PopupMenuPositions.PopupMenuPositions;};return PopupMenu;}(_react.default.Component);exports.PopupMenu = PopupMenu;PopupMenu.__KONTUR_REACT_UI__ = 'PopupMenu';PopupMenu.defaultProps = { positions: _PopupMenuPositions.PopupMenuPositions, type: PopupMenuType.Tooltip, popupHasPin: true, popupMargin: 0, disableAnimations: false };PopupMenu.Type = PopupMenuType;