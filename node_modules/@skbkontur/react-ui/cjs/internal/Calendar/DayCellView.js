"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");exports.__esModule = true;exports.DayCellView = DayCellView;var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));


var _ThemeContext = require("../../lib/theming/ThemeContext");

var CDS = _interopRequireWildcard(require("./CalendarDateShape"));
var _config = require("./config");
var _DayCellView = require("./DayCellView.styles");











var size = _config.config.DAY_HEIGHT;

var cellStyle = {
  width: size,
  height: size,
  lineHeight: size - 2 + 'px',
  borderRadius: size / 2 };


function DayCellView(props) {var _cn;var
  date = props.date,minDate = props.minDate,maxDate = props.maxDate,today = props.today,value = props.value,isWeekend = props.isWeekend,onDateClick = props.onDateClick;
  var theme = (0, _react.useContext)(_ThemeContext.ThemeContext);

  var handleClick = function handleClick() {var _props$date =
    props.date,date = _props$date.date,month = _props$date.month,year = _props$date.year;
    onDateClick == null ? void 0 : onDateClick({ date: date, month: month, year: year });
  };

  return (
    _react.default.createElement("button", {
      style: cellStyle,
      tabIndex: -1,
      disabled: !CDS.isBetween(date, minDate, maxDate),
      className: (0, _classnames.default)((_cn = {}, _cn[
      _DayCellView.jsStyles.cell(theme)] = true, _cn[
      _DayCellView.jsStyles.today(theme)] = Boolean(today && CDS.isEqual(date, today)), _cn[
      _DayCellView.jsStyles.selected(theme)] = Boolean(value && CDS.isEqual(date, value)), _cn[
      _DayCellView.jsStyles.weekend(theme)] = Boolean(isWeekend), _cn)),

      onClick: handleClick },

    date.date));


}