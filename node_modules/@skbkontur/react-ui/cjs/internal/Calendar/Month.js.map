{"version":3,"sources":["Month.tsx"],"names":["Month","monthSelect","yearSelect","closeSelects","close","monthRef","yearRef","handleMonthSelect","month","props","onMonthYearChange","year","handleYearSelect","shouldComponentUpdate","nextProps","top","CDS","isEqual","value","today","minDate","maxDate","componentDidMount","CalendarScrollEvents","addListener","render","offset","height","isFirstInYear","isLastInYear","renderCells","days","onDateClick","isHoliday","React","Component","MonthDayGrid","width","config","DAY_HEIGHT","display","map","day","isWeekend","date","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport { DateSelect } from '../DateSelect';\r\nimport { Nullable } from '../../typings/utility-types';\r\n\r\nimport { config } from './config';\r\nimport * as CDS from './CalendarDateShape';\r\nimport { MonthViewModel } from './MonthViewModel';\r\nimport { DayCellViewModel } from './DayCellViewModel';\r\nimport { MonthView } from './MonthView';\r\nimport { DayCellView } from './DayCellView';\r\nimport * as CalendarScrollEvents from './CalendarScrollEvents';\r\n\r\ninterface MonthProps {\r\n  top: number;\r\n  month: MonthViewModel;\r\n  maxDate?: CDS.CalendarDateShape;\r\n  minDate?: CDS.CalendarDateShape;\r\n  today?: CDS.CalendarDateShape;\r\n  value?: Nullable<CDS.CalendarDateShape>;\r\n  onDateClick?: (date: CDS.CalendarDateShape) => void;\r\n  onMonthYearChange: (month: number, year: number) => void;\r\n  isHoliday?: (day: CDS.CalendarDateShape & { isWeekend: boolean }) => boolean;\r\n}\r\n\r\nexport class Month extends React.Component<MonthProps> {\r\n  private monthSelect: DateSelect | null = null;\r\n  private yearSelect: DateSelect | null = null;\r\n\r\n  public shouldComponentUpdate(nextProps: MonthProps) {\r\n    if (this.props.top !== nextProps.top) {\r\n      return true;\r\n    }\r\n    if (!CDS.isEqual(nextProps.value, this.props.value)) {\r\n      return true;\r\n    }\r\n    if (!CDS.isEqual(nextProps.today, this.props.today)) {\r\n      return true;\r\n    }\r\n    if (!CDS.isEqual(nextProps.minDate, this.props.minDate)) {\r\n      return true;\r\n    }\r\n    if (!CDS.isEqual(nextProps.maxDate, this.props.maxDate)) {\r\n      return true;\r\n    }\r\n    return this.props.month !== nextProps.month;\r\n  }\r\n\r\n  public componentDidMount() {\r\n    CalendarScrollEvents.addListener(this.closeSelects);\r\n  }\r\n\r\n  public render() {\r\n    const { month, maxDate, minDate, top } = this.props;\r\n    return (\r\n      <MonthView\r\n        firstDayOffset={month.offset}\r\n        height={month.height}\r\n        isFirstInYear={month.isFirstInYear}\r\n        isLastInYear={month.isLastInYear}\r\n        maxDate={maxDate}\r\n        minDate={minDate}\r\n        month={month.month}\r\n        top={top}\r\n        year={month.year}\r\n        onMonthSelect={this.handleMonthSelect}\r\n        onYearSelect={this.handleYearSelect}\r\n        monthSelectRef={this.monthRef}\r\n        yearSelectRef={this.yearRef}\r\n      >\r\n        {this.renderCells()}\r\n      </MonthView>\r\n    );\r\n  }\r\n\r\n  private renderCells() {\r\n    return (\r\n      <MonthDayGrid\r\n        days={this.props.month.days}\r\n        offset={this.props.month.offset}\r\n        minDate={this.props.minDate}\r\n        maxDate={this.props.maxDate}\r\n        today={this.props.today}\r\n        value={this.props.value}\r\n        onDateClick={this.props.onDateClick}\r\n        isHoliday={this.props.isHoliday}\r\n      />\r\n    );\r\n  }\r\n\r\n  private closeSelects = () => {\r\n    if (this.monthSelect) {\r\n      this.monthSelect.close();\r\n    }\r\n    if (this.yearSelect) {\r\n      this.yearSelect.close();\r\n    }\r\n  };\r\n\r\n  private monthRef = (monthSelect: DateSelect | null) => {\r\n    this.monthSelect = monthSelect;\r\n  };\r\n\r\n  private yearRef = (yearSelect: DateSelect | null) => {\r\n    this.yearSelect = yearSelect;\r\n  };\r\n\r\n  private handleMonthSelect = (month: number) => {\r\n    this.props.onMonthYearChange(month, this.props.month.year);\r\n  };\r\n\r\n  private handleYearSelect = (year: number) => {\r\n    this.props.onMonthYearChange(this.props.month.month, year);\r\n  };\r\n}\r\n\r\ninterface MonthDayGridProps {\r\n  days: DayCellViewModel[];\r\n  offset: number;\r\n  minDate?: CDS.CalendarDateShape;\r\n  maxDate?: CDS.CalendarDateShape;\r\n  today?: CDS.CalendarDateShape;\r\n  value?: Nullable<CDS.CalendarDateShape>;\r\n  onDateClick?: (x0: CDS.CalendarDateShape) => void;\r\n  isHoliday: (day: CDS.CalendarDateShape & { isWeekend: boolean }) => boolean;\r\n}\r\n\r\nclass MonthDayGrid extends React.Component<MonthDayGridProps> {\r\n  public static defaultProps = {\r\n    isHoliday: (day: CDS.CalendarDateShape & { isWeekend: boolean }) => day.isWeekend,\r\n  };\r\n\r\n  public shouldComponentUpdate(nextProps: MonthDayGridProps) {\r\n    if (!CDS.isEqual(nextProps.value, this.props.value)) {\r\n      return true;\r\n    }\r\n    if (!CDS.isEqual(nextProps.today, this.props.today)) {\r\n      return true;\r\n    }\r\n    if (!CDS.isEqual(nextProps.minDate, this.props.minDate)) {\r\n      return true;\r\n    }\r\n    if (!CDS.isEqual(nextProps.maxDate, this.props.maxDate)) {\r\n      return true;\r\n    }\r\n    return this.props.days !== nextProps.days;\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <div\r\n          style={{\r\n            width: this.props.offset * config.DAY_HEIGHT,\r\n            display: 'inline-block',\r\n          }}\r\n        />\r\n        {this.props.days.map(day => {\r\n          const isWeekend = this.props.isHoliday(day);\r\n\r\n          return (\r\n            <DayCellView\r\n              date={day}\r\n              key={`${day.date}.${day.month}.${day.year}`}\r\n              minDate={this.props.minDate}\r\n              maxDate={this.props.maxDate}\r\n              today={this.props.today}\r\n              value={this.props.value}\r\n              isWeekend={isWeekend}\r\n              onDateClick={this.props.onDateClick}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}