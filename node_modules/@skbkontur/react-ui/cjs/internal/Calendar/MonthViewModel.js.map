{"version":3,"sources":["MonthViewModel.ts"],"names":["MonthViewModel","month","year","daysCount","offset","height","days","isLastInYear","isFirstInYear","Math","ceil","floor","getMonthsDays","getMonthOffset","getMonthHeight","Array","from","length","_","i","isWeekend","DayCellViewModel","create","config","DAY_HEIGHT","MONTH_TITLE_OFFSET_HEIGHT","MONTH_BOTTOM_MARGIN","Date","getDate","day","getDay"],"mappings":"uEAAA;;AAEA;AACA,sD;;AAEaA,c;;;;;;;;;;;;;;;AAeX;;;AAGA;;;AAGA,wBAAoBC,KAApB,EAAmCC,IAAnC,EAAiD,MAlBjCC,SAkBiC,eAhBjCC,MAgBiC,eAdjCH,KAciC,eAZjCC,IAYiC,eAVjCG,MAUiC,eARjCC,IAQiC,eAL1CC,YAK0C,eAF1CC,aAE0C;AAC/C,MAAIP,KAAK,GAAG,CAAZ,EAAe;AACbC,IAAAA,IAAI,IAAIO,IAAI,CAACC,IAAL,CAAU,CAACT,KAAD,GAAS,EAAnB,CAAR;AACAA,IAAAA,KAAK,GAAG,KAAMA,KAAK,GAAG,EAAtB;AACD;AACD,MAAIA,KAAK,GAAG,EAAZ,EAAgB;AACdC,IAAAA,IAAI,IAAIO,IAAI,CAACE,KAAL,CAAWV,KAAK,GAAG,EAAnB,CAAR;AACAA,IAAAA,KAAK,IAAI,EAAT;AACD;AACD,MAAME,SAAS,GAAGS,aAAa,CAACX,KAAD,EAAQC,IAAR,CAA/B;AACA,MAAME,MAAM,GAAGS,cAAc,CAACZ,KAAD,EAAQC,IAAR,CAA7B;AACA,OAAKC,SAAL,GAAiBA,SAAjB;AACA,OAAKC,MAAL,GAAcA,MAAd;AACA,OAAKH,KAAL,GAAaA,KAAb;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACA,OAAKG,MAAL,GAAcS,cAAc,CAACX,SAAD,EAAYC,MAAZ,CAA5B;AACA,OAAKG,YAAL,GAAoBN,KAAK,KAAK,EAA9B;AACA,OAAKO,aAAL,GAAqBP,KAAK,KAAK,CAA/B;AACA,OAAKK,IAAL,GAAYS,KAAK,CAACC,IAAN,CAAW,EAAEC,MAAM,EAAEd,SAAV,EAAX,EAAkC,UAACe,CAAD,EAAIC,CAAJ,EAAU;AACtD,QAAMC,SAAS,GAAG,CAACD,CAAC,GAAGN,cAAc,CAACZ,KAAD,EAAQC,IAAR,CAAnB,IAAoC,CAApC,IAAyC,CAA3D;AACA,WAAOmB,mCAAiBC,MAAjB,CAAwBH,CAAC,GAAG,CAA5B,EAA+BlB,KAA/B,EAAsCC,IAAtC,EAA4CkB,SAA5C,CAAP;AACD,GAHW,CAAZ;AAID,C,yCA3CUpB,c,CACGsB,M,GAAS,gBAAK,UAACrB,KAAD,EAAgBC,IAAhB,UAAiD,IAAIF,cAAJ,CAAmBC,KAAnB,EAA0BC,IAA1B,CAAjD,EAAL,C;;;AA6CzB,IAAMY,cAAc,GAAG;AACrB,UAACX,SAAD,EAAoBC,MAApB;AACEK,IAAAA,IAAI,CAACC,IAAL,CAAU,CAACP,SAAS,GAAGC,MAAb,IAAuB,CAAjC,IAAsCmB,eAAOC,UAA7C;AACAD,mBAAOE,yBADP;AAEAF,mBAAOG,mBAHT,GADqB,CAAvB;;;AAOA,IAAMd,aAAa,GAAG,gBAAK,UAACX,KAAD,EAAgBC,IAAhB,UAAiC,IAAIyB,IAAJ,CAASzB,IAAT,EAAeD,KAAK,GAAG,CAAvB,EAA0B,CAA1B,EAA6B2B,OAA7B,EAAjC,EAAL,CAAtB;;AAEA,IAAMf,cAAc,GAAG,gBAAK,UAACZ,KAAD,EAAgBC,IAAhB,EAAiC;AAC3D,MAAM2B,GAAG,GAAG,IAAIF,IAAJ,CAASzB,IAAT,EAAeD,KAAf,EAAsB,CAAtB,EAAyB6B,MAAzB,KAAoC,CAAhD;AACA,MAAID,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,WAAO,CAAP;AACD;AACD,SAAOA,GAAP;AACD,CANsB,CAAvB","sourcesContent":["import { memo } from '../../lib/memo';\r\n\r\nimport { config } from './config';\r\nimport { DayCellViewModel } from './DayCellViewModel';\r\n\r\nexport class MonthViewModel {\r\n  public static create = memo((month: number, year: number): MonthViewModel => new MonthViewModel(month, year));\r\n\r\n  public readonly daysCount: number;\r\n\r\n  public readonly offset: number;\r\n\r\n  public readonly month: number;\r\n\r\n  public readonly year: number;\r\n\r\n  public readonly height: number;\r\n\r\n  public readonly days: DayCellViewModel[];\r\n\r\n  // FIXME: shouldbe readonly\r\n  public isLastInYear: boolean;\r\n\r\n  // FIXME: shouldbe readonly\r\n  public isFirstInYear: boolean;\r\n\r\n  private constructor(month: number, year: number) {\r\n    if (month < 0) {\r\n      year -= Math.ceil(-month / 12);\r\n      month = 12 + (month % 12);\r\n    }\r\n    if (month > 11) {\r\n      year += Math.floor(month / 12);\r\n      month %= 12;\r\n    }\r\n    const daysCount = getMonthsDays(month, year);\r\n    const offset = getMonthOffset(month, year);\r\n    this.daysCount = daysCount;\r\n    this.offset = offset;\r\n    this.month = month;\r\n    this.year = year;\r\n    this.height = getMonthHeight(daysCount, offset);\r\n    this.isLastInYear = month === 11;\r\n    this.isFirstInYear = month === 0;\r\n    this.days = Array.from({ length: daysCount }, (_, i) => {\r\n      const isWeekend = (i + getMonthOffset(month, year)) % 7 >= 5;\r\n      return DayCellViewModel.create(i + 1, month, year, isWeekend);\r\n    });\r\n  }\r\n}\r\n\r\nconst getMonthHeight = memo(\r\n  (daysCount: number, offset: number) =>\r\n    Math.ceil((daysCount + offset) / 7) * config.DAY_HEIGHT +\r\n    config.MONTH_TITLE_OFFSET_HEIGHT +\r\n    config.MONTH_BOTTOM_MARGIN,\r\n);\r\n\r\nconst getMonthsDays = memo((month: number, year: number) => new Date(year, month + 1, 0).getDate());\r\n\r\nconst getMonthOffset = memo((month: number, year: number) => {\r\n  const day = new Date(year, month, 1).getDay() - 1;\r\n  if (day === -1) {\r\n    return 6;\r\n  }\r\n  return day;\r\n});\r\n"]}