"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.RenderLayer = void 0;var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));
var _reactDom = require("react-dom");

var _listenFocusOutside = require("../../lib/listenFocusOutside");var








RenderLayer = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(RenderLayer, _React$Component);function RenderLayer() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;_this.

















    focusOutsideListenerToken =

    null;_this.




















































    handleFocusOutside = function (event) {
      if (_this.props.onFocusOutside) {
        _this.props.onFocusOutside(event);
      }
    };_this.

    handleNativeDocClick = function (event) {
      var target = event.target || event.srcElement;
      var node = _this.getDomNode();

      if (target instanceof Element && (0, _listenFocusOutside.containsTargetOrRenderContainer)(target)(node)) {
        return;
      }

      if (_this.props.onClickOutside) {
        _this.props.onClickOutside(event);
      }
    };return _this;}var _proto = RenderLayer.prototype;_proto.componentDidMount = function componentDidMount() {if (this.props.active) {this.attachListeners();}};_proto.componentDidUpdate = function componentDidUpdate(prevProps) {if (!prevProps.active && this.props.active) {this.attachListeners();}if (prevProps.active && !this.props.active) {this.detachListeners();}};_proto.componentWillUnmount = function componentWillUnmount() {if (this.props.active) {this.detachListeners();}};_proto.render = function render() {return _react.default.Children.only(this.props.children);};_proto.attachListeners = function attachListeners() {var _this2 = this;this.focusOutsideListenerToken = (0, _listenFocusOutside.listen)(function () {return [_this2.getDomNode()];}, this.handleFocusOutside);window.addEventListener('blur', this.handleFocusOutside);document.addEventListener('ontouchstart' in document.documentElement ? 'touchstart' : 'mousedown', this.handleNativeDocClick);};_proto.detachListeners = function detachListeners() {if (this.focusOutsideListenerToken) {this.focusOutsideListenerToken.remove();this.focusOutsideListenerToken = null;}window.removeEventListener('blur', this.handleFocusOutside);document.removeEventListener('ontouchstart' in document.documentElement ? 'touchstart' : 'mousedown', this.handleNativeDocClick);};_proto.getDomNode = function getDomNode() {return (0, _reactDom.findDOMNode)(this);};return RenderLayer;}(_react.default.Component);exports.RenderLayer = RenderLayer;RenderLayer.__KONTUR_REACT_UI__ = 'RenderLayer';RenderLayer.propTypes = { active: function active(props, propName, componentName) {var active = props.active,onClickOutside = props.onClickOutside,onFocusOutside = props.onFocusOutside;if (active && !(onClickOutside || onFocusOutside)) {return new Error("[" + componentName + "]: using the component without either 'onClickOutside' or 'onFocusOutside' callback is pointless.");}} };RenderLayer.defaultProps = { active: true };