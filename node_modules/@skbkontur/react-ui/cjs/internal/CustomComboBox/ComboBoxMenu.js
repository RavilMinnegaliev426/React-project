"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");exports.__esModule = true;exports.ComboBoxMenu = void 0;var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireWildcard(require("react"));

var _decorators = require("../../lib/locale/decorators");
var _Menu = require("../Menu");
var _MenuItem = require("../../components/MenuItem");
var _Spinner = require("../../components/Spinner");

var _MenuSeparator = require("../../components/MenuSeparator");

var _CustomComboBoxTypes = require("./CustomComboBoxTypes");
var _locale = require("./locale");var _dec, _class, _class2, _temp;var



















ComboBoxMenu = (_dec = (0, _decorators.locale)('ComboBox', _locale.CustomComboBoxLocaleHelper), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {(0, _inheritsLoose2.default)(ComboBoxMenu, _Component);function ComboBoxMenu() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _Component.call.apply(_Component, [this].concat(args)) || this;_this.







    locale = void 0;_this.










































































    renderItem = function (item, index) {
      // NOTE this is undesireable feature, better
      // to remove it from further versions
      var _this$props = _this.props,renderItem = _this$props.renderItem,onValueChange = _this$props.onValueChange;
      if (typeof item === 'function' || _react.default.isValidElement(item)) {
        // @ts-ignore
        var element = typeof item === 'function' ? item() : item;
        var props = Object.assign(
        {
          key: index,
          onClick: function onClick() {return onValueChange(element.props);} },

        element.props);

        return _react.default.cloneElement(element, props);
      }

      return (
        _react.default.createElement(_MenuItem.MenuItem, { "data-tid": "ComboBoxMenu__item", onClick: function onClick() {return onValueChange(item);}, key: index },
        function (state) {return renderItem(item, state);}));


    };return _this;}var _proto = ComboBoxMenu.prototype;_proto.render = function render() {var _this$props2 = this.props,opened = _this$props2.opened,items = _this$props2.items,totalCount = _this$props2.totalCount,loading = _this$props2.loading,refMenu = _this$props2.refMenu,_this$props2$renderNo = _this$props2.renderNotFound,renderNotFound = _this$props2$renderNo === void 0 ? function () {return notFound;} : _this$props2$renderNo,renderTotalCount = _this$props2.renderTotalCount,maxMenuHeight = _this$props2.maxMenuHeight,requestStatus = _this$props2.requestStatus;var _this$locale = this.locale,notFound = _this$locale.notFound,errorNetworkButton = _this$locale.errorNetworkButton,errorNetworkMessage = _this$locale.errorNetworkMessage;if (!opened) {return null;}var renderAddButton = null;if (this.props.renderAddButton) {renderAddButton = this.props.renderAddButton();}if (loading && (!items || !items.length)) {return _react.default.createElement(_Menu.Menu, { ref: refMenu }, _react.default.createElement(_MenuItem.MenuItem, { disabled: true }, _react.default.createElement(_Spinner.Spinner, { type: "mini", dimmed: true })));}if (items === null && requestStatus === _CustomComboBoxTypes.ComboBoxRequestStatus.Failed) {return _react.default.createElement(_Menu.Menu, { ref: refMenu, maxHeight: maxMenuHeight }, _react.default.createElement(_MenuItem.MenuItem, { disabled: true, key: "message" }, _react.default.createElement("div", { style: { maxWidth: 300, whiteSpace: 'normal' } }, errorNetworkMessage)), _react.default.createElement(_MenuItem.MenuItem, { link: true, onClick: this.props.repeatRequest, key: "retry" }, errorNetworkButton));}if ((items == null || items.length === 0) && renderNotFound) {return _react.default.createElement(_Menu.Menu, { ref: refMenu }, renderAddButton ? renderAddButton : _react.default.createElement(_MenuItem.MenuItem, { disabled: true }, renderNotFound()));}var total = null;if (items && renderTotalCount && totalCount && items.length < totalCount) {total = _react.default.createElement(_MenuItem.MenuItem, { disabled: true, key: "total" }, _react.default.createElement("div", { style: { fontSize: 12 } }, renderTotalCount(items.length, totalCount)));}return _react.default.createElement(_Menu.Menu, { "data-tid": "ComboBoxMenu__items", ref: refMenu, maxHeight: maxMenuHeight }, items && items.map(this.renderItem), total, renderAddButton && [_react.default.createElement(_MenuSeparator.MenuSeparator, { key: "separator" }), renderAddButton]);};return ComboBoxMenu;}(_react.Component), _class2.__KONTUR_REACT_UI__ = 'ComboBoxMenu', _class2.defaultProps = { repeatRequest: function repeatRequest() {return undefined;}, requestStatus: _CustomComboBoxTypes.ComboBoxRequestStatus.Unknown }, _temp)) || _class);exports.ComboBoxMenu = ComboBoxMenu;