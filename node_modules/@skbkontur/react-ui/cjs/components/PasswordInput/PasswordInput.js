"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.PasswordInput = void 0;var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));

var _identifiers = require("../../lib/events/keyboard/identifiers");
var _KeyboardEventCodes = require("../../lib/events/keyboard/KeyboardEventCodes");
var _Input = require("../Input");

var _px = require("../../internal/icons/16px");
var _utils = require("../../lib/utils");

var _PasswordInput = require("./PasswordInput.styles");










/**
                                                         * Компонент для ввода пароля
                                                         */var
PasswordInput = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(PasswordInput, _React$Component);function PasswordInput() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;_this.













    state = {
      visible: false,
      capsLockEnabled: false };_this.


    input = void 0;_this.





















    focus = function () {
      if (_this.input) {
        _this.input.focus();
      }
    };_this.




    blur = function () {
      _this.handleBlur();
    };_this.

    handleKeyPress = function (e) {var _this$props =
      _this.props,onKeyPress = _this$props.onKeyPress,detectCapsLock = _this$props.detectCapsLock;

      if (onKeyPress) {
        onKeyPress(e);
      }

      if (!detectCapsLock) {
        return;
      }

      var capsLockEnabled = e.getModifierState(_KeyboardEventCodes.KeyboardEventCodes.CapsLock);

      _this.setState({ capsLockEnabled: capsLockEnabled });
    };_this.

    handleKeydown = function (e) {var _assertThisInitialize = (0, _assertThisInitialized2.default)(_this),_assertThisInitialize2 = _assertThisInitialize.

      props,detectCapsLock = _assertThisInitialize2.detectCapsLock,onKeyDown = _assertThisInitialize2.onKeyDown,
      capsLockEnabled = _assertThisInitialize.state.capsLockEnabled;


      if (onKeyDown) {
        onKeyDown(e);
      }

      if (!detectCapsLock) {
        return;
      }

      if ((0, _identifiers.isKeyCapsLock)(e) && capsLockEnabled != null) {
        _this.setState({ capsLockEnabled: !capsLockEnabled });
      }
    };_this.

    handleToggleVisibility = function () {
      _this.setState(function (prevState) {return { visible: !prevState.visible };}, _this.handleFocus);
    };_this.

    handleFocus = function () {
      if (_this.input) {
        _this.input.focus();
      }
    };_this.

    handleBlur = function () {
      if (_this.input) {
        _this.input.blur();
      }
    };_this.

    renderEye = function () {var
      capsLockEnabled = _this.state.capsLockEnabled;

      return (
        _react.default.createElement("span", { className: _PasswordInput.jsStyles.iconWrapper() },
        capsLockEnabled && _react.default.createElement("span", { className: _PasswordInput.jsStyles.capsLockDetector() }),
        _react.default.createElement("span", { "data-tid": "PasswordInputEyeIcon", className: _PasswordInput.jsStyles.toggleVisibility(), onClick: _this.handleToggleVisibility },
        _this.state.visible ? _react.default.createElement(_px.EyeOpenedIcon, { size: 14 }) : _react.default.createElement(_px.EyeClosedIcon, { size: 14 }))));



    };_this.

    refInput = function (element) {
      _this.input = element;
    };return _this;}var _proto = PasswordInput.prototype;_proto.UNSAFE_componentWillMount = function UNSAFE_componentWillMount() {if (this.props.detectCapsLock) {this.setState({ capsLockEnabled: null });} // @ts-ignore
    if (_utils.isIE11 && !window.document.msCapsLockWarningOff) {// turns off default ie capslock warning
      // @ts-ignore
      window.document.msCapsLockWarningOff = true;}};_proto.render = function render() {return _react.default.createElement("div", { className: _PasswordInput.jsStyles.root() }, this.renderInput());} /**
                                                                                                                                                                                                         * @public
                                                                                                                                                                                                         */;_proto.renderInput = function renderInput() {var _this$props2 = this.props,detectCapsLock = _this$props2.detectCapsLock,props = (0, _objectWithoutPropertiesLoose2.default)(_this$props2, ["detectCapsLock"]);var inputProps = (0, _extends2.default)({}, props, {
      onKeyDown: this.handleKeydown,
      onKeyPress: this.handleKeyPress,
      rightIcon: this.renderEye() });

    return _react.default.createElement(_Input.Input, (0, _extends2.default)({ ref: this.refInput, type: this.state.visible ? 'text' : 'password' }, inputProps));
  };return PasswordInput;}(_react.default.Component);exports.PasswordInput = PasswordInput;PasswordInput.__KONTUR_REACT_UI__ = 'PasswordInput';PasswordInput.propTypes = { /**
                                                                                                                                                                            * Включает CapsLock детектор
                                                                                                                                                                            */detectCapsLock: _propTypes.default.bool };PasswordInput.defaultProps = { size: 'small' };