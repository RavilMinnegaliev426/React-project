"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.Checkbox = void 0;var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));


var _tabListener = require("../../lib/events/tabListener");

var _ThemeContext = require("../../lib/theming/ThemeContext");
var _px = require("../../internal/icons/16px");
var _utils = require("../../lib/utils");

var _Checkbox = require("./Checkbox.styles");






























/**
                                               * Все свойства, кроме перечисленных, `className` и `style` передаются в `input`.
                                               */var
Checkbox = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(Checkbox, _React$Component);function Checkbox() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;_this.














    state = {
      focusedByTab: false,
      indeterminate: _this.props.initialIndeterminate || false };_this.


    theme = void 0;_this.
    input = void 0;_this.

    componentDidMount = function () {
      if (_this.state.indeterminate && _this.input) {
        _this.input.indeterminate = true;
      }
    };_this.





































    setIndeterminate = function () {
      _this.setState({
        indeterminate: true });

      if (_this.input) {
        _this.input.indeterminate = true;
      }
    };_this.





    resetIndeterminate = function () {
      _this.setState({
        indeterminate: false });

      if (_this.input) {
        _this.input.indeterminate = false;
      }
    };_this.





































































    handleFocus = function (e) {
      if (!_this.props.disabled) {
        // focus event fires before keyDown eventlistener
        // so we should check tabPressed in async way
        process.nextTick(function () {
          if (_tabListener.tabListener.isTabPressed) {
            _this.setState({ focusedByTab: true });
          }
        });
      }
    };_this.

    handleBlur = function (e) {
      _this.props.onBlur == null ? void 0 : _this.props.onBlur(e);
      _this.setState({ focusedByTab: false });
    };_this.

    inputRef = function (ref) {
      _this.input = ref;
    };_this.

    handleChange = function (event) {
      var checked = event.currentTarget.checked;
      _this.props.onValueChange == null ? void 0 : _this.props.onValueChange(checked);

      _this.resetIndeterminate();

      _this.props.onChange == null ? void 0 : _this.props.onChange(event);
    };return _this;}var _proto = Checkbox.prototype;_proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {if (nextProps.checked !== this.props.checked) {this.resetIndeterminate();}};_proto.render = function render() {var _this2 = this;return _react.default.createElement(_ThemeContext.ThemeContext.Consumer, null, function (theme) {_this2.theme = theme;return _this2.renderMain();});} /**
                                                                                                                                                                                                                                                                                                                                                                                                                                            * @public
                                                                                                                                                                                                                                                                                                                                                                                                                                            */;_proto.focus = function focus() {var _this$input;_tabListener.tabListener.isTabPressed = true;(_this$input = this.input) == null ? void 0 : _this$input.focus();} /**
public
proto.blur = function blur() {var _this$input2;(_this$input2 = this.input) == null ? void 0 : _this$input2.blur();} /**
Установить промежуточное значение
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           * @public
proto.renderMain = function renderMain() {var _cn, _cn3;var props = this.props;var children = props.children,error = props.error,warning = props.warning,onMouseEnter = props.onMouseEnter,onMouseLeave = props.onMouseLeave,onMouseOver = props.onMouseOver,onValueChange = props.onValueChange,style = props.style,className = props.className,type = props.type,initialIndeterminate = props.initialIndeterminate,rest = (0, _objectWithoutPropertiesLoose2.default)(props, ["children", "error", "warning", "onMouseEnter", "onMouseLeave", "onMouseOver", "onValueChange", "style", "className", "type", "initialIndeterminate"]);var isIndeterminate = this.state.indeterminate;var rootClass = (0, _classnames.default)((_cn = {}, _cn[_Checkbox.jsStyles.root(this.theme)] = true, _cn[_Checkbox.jsStyles.rootFallback()] = _utils.isIE11 || _utils.isEdge, _cn[_Checkbox.jsStyles.disabled(this.theme)] = Boolean(props.disabled), _cn[_Checkbox.jsStyles.checked(this.theme)] = Boolean(props.checked), _cn[_Checkbox.jsStyles.indeterminate(this.theme)] = isIndeterminate, _cn[_Checkbox.jsStyles.focus(this.theme)] = this.state.focusedByTab, _cn[_Checkbox.jsStyles.warning(this.theme)] = Boolean(props.warning), _cn[_Checkbox.jsStyles.error(this.theme)] = Boolean(props.error), _cn));var inputProps = (0, _extends2.default)({}, rest, { type: 'checkbox', className: _Checkbox.jsStyles.input(), onChange: this.handleChange, onFocus: this.handleFocus, onBlur: this.handleBlur, ref: this.inputRef });var caption = null;if (children) {var _cn2;var captionClass = (0, _classnames.default)((_cn2 = {}, _cn2[_Checkbox.jsStyles.caption()] = true, _cn2[_Checkbox.jsStyles.captionIE11()] = _utils.isIE11 || _utils.isEdge, _cn2));caption = _react.default.createElement("span", { className: captionClass }, children);}var iconClass = (0, _classnames.default)((_cn3 = {}, _cn3[_Checkbox.jsStyles.iconUnchecked()] = !props.checked && !isIndeterminate, _cn3[_Checkbox.jsStyles.iconFixBaseline()] = _utils.isFirefox || _utils.isIE11 || _utils.isEdge, _cn3));var box = _react.default.createElement("span", { className: _Checkbox.jsStyles.box(this.theme) }, isIndeterminate && _react.default.createElement(_px.SquareIcon, { className: iconClass }) || _react.default.createElement(_px.OkIcon, { className: iconClass }));return _react.default.createElement("label", { className: rootClass, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, onMouseOver: onMouseOver }, _react.default.createElement("input", inputProps), box, caption);};return Checkbox;}(_react.default.Component);exports.Checkbox = Checkbox;Checkbox.__KONTUR_REACT_UI__ = 'Checkbox';Checkbox.propTypes = { checked: _propTypes.default.bool, disabled: _propTypes.default.bool, error: _propTypes.default.bool, warning: _propTypes.default.bool, onValueChange: _propTypes.default.func, onBlur: _propTypes.default.func, onMouseEnter: _propTypes.default.func, onMouseLeave: _propTypes.default.func, onMouseOver: _propTypes.default.func };