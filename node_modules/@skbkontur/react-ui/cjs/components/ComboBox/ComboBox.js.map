{"version":3,"sources":["ComboBox.tsx"],"names":["ComboBox","comboboxElement","focus","blur","search","query","cancelSearch","open","close","selectInputText","reset","render","props","element","React","Component","__KONTUR_REACT_UI__","defaultProps","itemToValue","item","value","valueToString","label","renderValue","renderItem","menuAlign","searchOnFocus","drawArrow"],"mappings":"sUAAA;;AAEA,+D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuJaA,Q;;;;;;;;;;;;;AAaHC,IAAAA,e,GAA+C,I;;AAEvD;;;AAGOC,EAAAA,K,GAAP,iBAAe;AACb,QAAI,KAAKD,eAAT,EAA0B;AACxB,WAAKA,eAAL,CAAqBC,KAArB;AACD;AACF;;AAED;;;AAGOC,EAAAA,I,GAAP,gBAAc;AACZ,QAAI,KAAKF,eAAT,EAA0B;AACxB,WAAKA,eAAL,CAAqBE,IAArB;AACD;AACF;;AAED;;;;;AAKOC,EAAAA,M,GAAP,gBAAcC,KAAd,EAA8B;AAC5B,QAAI,KAAKJ,eAAT,EAA0B;AACxB,WAAKA,eAAL,CAAqBG,MAArB,CAA4BC,KAA5B;AACD;AACF;;AAED;;;AAGOC,EAAAA,Y,GAAP,wBAAsB;AACpB,QAAI,KAAKL,eAAT,EAA0B;AACxB,WAAKA,eAAL,CAAqBK,YAArB;AACD;AACF;;AAED;;;AAGOC,EAAAA,I,GAAP,gBAAc;AACZ,QAAI,KAAKN,eAAT,EAA0B;AACxB,WAAKA,eAAL,CAAqBM,IAArB;AACD;AACF;;AAED;;;AAGOC,EAAAA,K,GAAP,iBAAe;AACb,QAAI,KAAKP,eAAT,EAA0B;AACxB,WAAKA,eAAL,CAAqBO,KAArB;AACD;AACF;;AAED;;;;AAIOC,EAAAA,e,GAAP,2BAAyB;AACvB,QAAI,KAAKR,eAAT,EAA0B;AACxB,WAAKA,eAAL,CAAqBQ,eAArB;AACD;AACF;;AAED;;;;AAIOC,EAAAA,K,GAAP,iBAAe;AACb,QAAI,KAAKT,eAAT,EAA0B;AACxB,WAAKA,eAAL,CAAqBS,KAArB;AACD;AACF,G;;AAEMC,EAAAA,M,GAAP,kBAAgB;AACd,WAAO,6BAAC,8BAAD,6BAAoB,KAAKC,KAAzB,IAAgC,GAAG,EAAE,aAAAC,OAAO,UAAK,MAAI,CAACZ,eAAL,GAAuBY,OAA5B,EAA5C,IAAP;AACD,G,mBA7F6CC,eAAMC,S,8BAAzCf,Q,CACGgB,mB,GAAsB,U,CADzBhB,Q,CAGGiB,Y,GAAe,EAC3BC,WAAW,EAAE,qBAACC,IAAD,UAAwBA,IAAI,CAACC,KAA7B,EADc,EAE3BC,aAAa,EAAE,uBAACF,IAAD,UAAwBA,IAAI,CAACG,KAA7B,EAFY,EAG3BC,WAAW,EAAE,qBAACJ,IAAD,UAAwBA,IAAI,CAACG,KAA7B,EAHc,EAI3BE,UAAU,EAAE,oBAACL,IAAD,UAAwBA,IAAI,CAACG,KAA7B,EAJe,EAK3BG,SAAS,EAAE,MALgB,EAM3BC,aAAa,EAAE,IANY,EAO3BC,SAAS,EAAE,IAPgB,E","sourcesContent":["import React from 'react';\r\n\r\nimport { CustomComboBox } from '../../internal/CustomComboBox';\r\nimport { Nullable } from '../../typings/utility-types';\r\nimport { MenuItemState } from '../MenuItem';\r\n\r\nexport interface ComboBoxProps<T> {\r\n  align?: 'left' | 'center' | 'right';\r\n  /**\r\n   * Вызывает функцию поиска `getItems` при фокусе и очистке поля ввода\r\n   * @default true\r\n   */\r\n  searchOnFocus?: boolean;\r\n  /**\r\n   * Рисует справа иконку в виде стрелки\r\n   * @default true\r\n   */\r\n  drawArrow?: boolean;\r\n\r\n  autoFocus?: boolean;\r\n\r\n  borderless?: boolean;\r\n\r\n  /**\r\n   * Не использовать Portal для рендеринга меню.\r\n   * См. https://github.com/skbkontur/retail-ui/issues/15\r\n   * @default false\r\n   */\r\n  disablePortal?: boolean;\r\n\r\n  disabled?: boolean;\r\n\r\n  error?: boolean;\r\n\r\n  /**\r\n   * Функция поиска элементов, должна возвращать Promise с массивом элементов.\r\n   * По умолчанию ожидаются объекты с типом `{ value: string, label: string }`.\r\n   *\r\n   * Элементы могут быть любого типа. В этом случае необходимо определить\r\n   * свойства `itemToValue`, `renderValue`, `renderItem`, `valueToString`\r\n   */\r\n  getItems: (query: string) => Promise<T[]>;\r\n\r\n  /**\r\n   * Необходим для сравнения полученных результатов с `value`\r\n   * @default item => item.label\r\n   */\r\n  itemToValue: (item: T) => string | number;\r\n\r\n  maxLength?: number;\r\n\r\n  menuAlign?: 'left' | 'right';\r\n\r\n  onBlur?: () => void;\r\n\r\n  /** Вызывается при изменении `value` */\r\n  onValueChange?: (value: T) => void;\r\n\r\n  onFocus?: () => void;\r\n\r\n  /**\r\n   * Вызывается при изменении текста в поле ввода,\r\n   * если результатом функции будет строка,\r\n   * то она станет следующим состояним полем ввода\r\n   */\r\n  onInputValueChange?: (value: string) => Nullable<string> | void;\r\n\r\n  /**\r\n   * Функция для обработки ситуации, когда была введена\r\n   * строка в инпут и был потерян фокус с элемента.\r\n   *\r\n   * Если при потере фокуса в выпадающем списке будет только один\r\n   * элемент и  результат `renderValue` с этим элементом будет\r\n   * совпадать со значение в текстовом поле, то\r\n   * сработает onValueChange со значением данного элемента\r\n   *\r\n   * Сама функция также может вернуть значение,\r\n   * неравное `undefined`,\r\n   * с которым будет вызван onValueChange.\r\n   */\r\n  onUnexpectedInput?: (value: string) => void | null | T;\r\n\r\n  placeholder?: string;\r\n\r\n  /**\r\n   * Функция отрисовки элементов результата поиска.\r\n   * Не применяется если элемент является функцией или React-элементом\r\n   * @default item => item.label\r\n   */\r\n  renderItem: (item: T, state?: MenuItemState) => React.ReactNode;\r\n\r\n  /**\r\n   * Функция для отрисовки сообщения о пустом результате поиска\r\n   */\r\n  renderNotFound?: () => React.ReactNode;\r\n\r\n  /**\r\n   * Функция отображающаяя сообщение об общем количестве элементов\r\n   */\r\n  renderTotalCount?: (found: number, total: number) => React.ReactNode;\r\n\r\n  /**\r\n   * Функция отрисовки выбранного значения\r\n   * @default item => item.label\r\n   */\r\n  renderValue: (item: T) => React.ReactNode;\r\n\r\n  /**\r\n   * Функция отрисовки кнопки добавления в выпадающем списке\r\n   */\r\n  renderAddButton?: (query?: string) => React.ReactNode;\r\n\r\n  /**\r\n   * Общее количество элементов.\r\n   * Необходим для работы `renderTotalCount`\r\n   */\r\n  totalCount?: number;\r\n\r\n  /**\r\n   * Выбранное значение\r\n   * Ожидается, что `value` того же типа что и элементы в массиве,\r\n   * возвращаемом в `getItems`\r\n   */\r\n  value?: Nullable<T>;\r\n\r\n  /**\r\n   * Необходим для преобразования `value` в строку при фокусировке\r\n   * @default item => item.label\r\n   */\r\n  valueToString: (item: T) => string;\r\n\r\n  size?: 'small' | 'medium' | 'large';\r\n\r\n  warning?: boolean;\r\n\r\n  width?: string | number;\r\n\r\n  maxMenuHeight?: number | string;\r\n\r\n  onMouseEnter?: (e: React.MouseEvent) => void;\r\n\r\n  onMouseOver?: (e: React.MouseEvent) => void;\r\n\r\n  onMouseLeave?: (e: React.MouseEvent) => void;\r\n\r\n  onInputKeyDown?: (e: React.KeyboardEvent<HTMLElement>) => void;\r\n}\r\n\r\nexport interface ComboBoxItem {\r\n  value: string;\r\n  label: string;\r\n}\r\n\r\nexport class ComboBox<T = ComboBoxItem> extends React.Component<ComboBoxProps<T>> {\r\n  public static __KONTUR_REACT_UI__ = 'ComboBox';\r\n\r\n  public static defaultProps = {\r\n    itemToValue: (item: ComboBoxItem) => item.value,\r\n    valueToString: (item: ComboBoxItem) => item.label,\r\n    renderValue: (item: ComboBoxItem) => item.label,\r\n    renderItem: (item: ComboBoxItem) => item.label,\r\n    menuAlign: 'left',\r\n    searchOnFocus: true,\r\n    drawArrow: true,\r\n  };\r\n\r\n  private comboboxElement: Nullable<CustomComboBox<T>> = null;\r\n\r\n  /**\r\n   * @public\r\n   */\r\n  public focus() {\r\n    if (this.comboboxElement) {\r\n      this.comboboxElement.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   */\r\n  public blur() {\r\n    if (this.comboboxElement) {\r\n      this.comboboxElement.blur();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @public Открывает выпадающий список и запускает поиск элементов\r\n   * @param {string} [query] - Текст поиска. По умолчанию берется\r\n   * текст из инпута или результат `valueToString(value)`\r\n   */\r\n  public search(query?: string) {\r\n    if (this.comboboxElement) {\r\n      this.comboboxElement.search(query);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   */\r\n  public cancelSearch() {\r\n    if (this.comboboxElement) {\r\n      this.comboboxElement.cancelSearch();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @public Открывает выпадающий список\r\n   */\r\n  public open() {\r\n    if (this.comboboxElement) {\r\n      this.comboboxElement.open();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @public Закрывает выпадающий список\r\n   */\r\n  public close() {\r\n    if (this.comboboxElement) {\r\n      this.comboboxElement.close();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Выделяет текст внутри input\r\n   * @public\r\n   */\r\n  public selectInputText() {\r\n    if (this.comboboxElement) {\r\n      this.comboboxElement.selectInputText();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Сбрасывает введенное пользователем значение\r\n   * @public\r\n   */\r\n  public reset() {\r\n    if (this.comboboxElement) {\r\n      this.comboboxElement.reset();\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return <CustomComboBox {...this.props} ref={element => (this.comboboxElement = element)} />;\r\n  }\r\n}\r\n"]}