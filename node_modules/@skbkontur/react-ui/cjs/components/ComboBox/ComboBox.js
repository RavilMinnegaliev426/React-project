"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.ComboBox = void 0;var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));

var _CustomComboBox = require("../../internal/CustomComboBox");var






















































































































































ComboBox = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(ComboBox, _React$Component);function ComboBox() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;_this.












    comboboxElement = null;return _this;}var _proto = ComboBox.prototype;

  /**
                                                                           * @public
                                                                           */_proto.
  focus = function focus() {
    if (this.comboboxElement) {
      this.comboboxElement.focus();
    }
  }

  /**
     * @public
     */;_proto.
  blur = function blur() {
    if (this.comboboxElement) {
      this.comboboxElement.blur();
    }
  }

  /**
     * @public Открывает выпадающий список и запускает поиск элементов
     * @param {string} [query] - Текст поиска. По умолчанию берется
     * текст из инпута или результат `valueToString(value)`
     */;_proto.
  search = function search(query) {
    if (this.comboboxElement) {
      this.comboboxElement.search(query);
    }
  }

  /**
     * @public
     */;_proto.
  cancelSearch = function cancelSearch() {
    if (this.comboboxElement) {
      this.comboboxElement.cancelSearch();
    }
  }

  /**
     * @public Открывает выпадающий список
     */;_proto.
  open = function open() {
    if (this.comboboxElement) {
      this.comboboxElement.open();
    }
  }

  /**
     * @public Закрывает выпадающий список
     */;_proto.
  close = function close() {
    if (this.comboboxElement) {
      this.comboboxElement.close();
    }
  }

  /**
     * Выделяет текст внутри input
     * @public
     */;_proto.
  selectInputText = function selectInputText() {
    if (this.comboboxElement) {
      this.comboboxElement.selectInputText();
    }
  }

  /**
     * Сбрасывает введенное пользователем значение
     * @public
     */;_proto.
  reset = function reset() {
    if (this.comboboxElement) {
      this.comboboxElement.reset();
    }
  };_proto.

  render = function render() {var _this2 = this;
    return _react.default.createElement(_CustomComboBox.CustomComboBox, (0, _extends2.default)({}, this.props, { ref: function ref(element) {return _this2.comboboxElement = element;} }));
  };return ComboBox;}(_react.default.Component);exports.ComboBox = ComboBox;ComboBox.__KONTUR_REACT_UI__ = 'ComboBox';ComboBox.defaultProps = { itemToValue: function itemToValue(item) {return item.value;}, valueToString: function valueToString(item) {return item.label;}, renderValue: function renderValue(item) {return item.label;}, renderItem: function renderItem(item) {return item.label;}, menuAlign: 'left', searchOnFocus: true, drawArrow: true };