"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.Toast = void 0;var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));
var _reactTransitionGroup = require("react-transition-group");

var _RenderContainer = require("../../internal/RenderContainer");


var _Toast = require("./Toast.styles");
var _ToastView = require("./ToastView");
var _ToastStatic = require("./ToastStatic");

















/**
                                              * Toast manages notifications
                                              * method `push` is sending notification,
                                              * then automatically hides it after 3 or 7 seconds,
                                              * depending on if this notification contains action or not.
                                              *
                                              * Can be used like `Toast.push('message')` or
                                              * `Toast.push('message', {label: 'Cancel', handler: cancelHandler})`
                                              */var
Toast = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(Toast, _React$Component);Toast.


  push = function push(notification, action) {
    _ToastStatic.ToastStatic.push(notification, action);
  };Toast.

  close = function close() {
    _ToastStatic.ToastStatic.close();
  };




  function Toast(props) {var _this;
    _this = _React$Component.call(this, props) || this;_this._toast = void 0;_this._timeout = null;_this.








































    close = function () {
      safelyCall(_this.props.onClose, _this.state.notification, _this.state.action);
      _this.setState({ notification: null, action: null });
    };_this.



































    _clearTimer = function () {
      if (_this._timeout) {
        clearTimeout(_this._timeout);
        _this._timeout = null;
      }
    };_this.

    _setTimer = function () {
      _this._clearTimer();

      var timeOut = _this.state.action ? 7 : 3;

      _this._timeout = window.setTimeout(_this.close, timeOut * 1000);
    };_this.

    _refToast = function (element) {
      _this._toast = element;
    };_this.state = { notification: null, action: null, id: 0 };return _this;}var _proto = Toast.prototype;_proto.componentWillUnmount = function componentWillUnmount() {this._clearTimer();};_proto.render = function render() {return _react.default.createElement(_RenderContainer.RenderContainer, null, _react.default.createElement(_reactTransitionGroup.TransitionGroup, null, this._renderToast()));} /**
                                                                                                                                                                                                                                                                                                                                                                                                                 * Показывает тост с `notification` в качестве сообщения.
                                                                                                                                                                                                                                                                                                                                                                                                                 *
                                                                                                                                                                                                                                                                                                                                                                                                                 * `action` опциональный параметр формата `{ label: string, handler: function }` добавляет кнопку в виде ссылки при клике на которую вызывается переданный handler
                                                                                                                                                                                                                                                                                                                                                                                                                 * @public
                                                                                                                                                                                                                                                                                                                                                                                                                 * @param notification
                                                                                                                                                                                                                                                                                                                                                                                                                 * @param action
                                                                                                                                                                                                                                                                                                                                                                                                                 */;_proto.push = function push(notification, action) {if (this.state.notification) {this.close();}safelyCall(this.props.onPush, notification, action);this.setState(function (_ref) {var id = _ref.id;return { notification: notification, action: action, id: id + 1 };}, this._setTimer);} /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @public
proto._renderToast = function _renderToast() {var _this$state = this.state,notification = _this$state.notification,action = _this$state.action,id = _this$state.id;if (!notification) {return null;}var toastProps = { onMouseEnter: this._clearTimer, onMouseLeave: this._setTimer, onClose: this.close, children: notification, action: action };return _react.default.createElement(_reactTransitionGroup.CSSTransition, { key: id, classNames: { enter: _Toast.jsStyles.enter(), enterActive: _Toast.jsStyles.enterActive(), exit: _Toast.jsStyles.exit(), exitActive: _Toast.jsStyles.exitActive() }, timeout: { enter: 200, exit: 150 } }, _react.default.createElement(_ToastView.ToastView, (0, _extends2.default)({ ref: this._refToast }, toastProps)));};return Toast;}(_react.default.Component);exports.Toast = Toast;Toast.__KONTUR_REACT_UI__ = 'Toast';function safelyCall(fn) {if (fn) {for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {args[_key - 1] = arguments[_key];}fn.apply(void 0, args);}}