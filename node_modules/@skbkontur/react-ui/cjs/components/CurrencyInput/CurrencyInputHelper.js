"use strict";exports.__esModule = true;exports.CurrencyInputHelper = void 0;


var _CurrencyHelper = require("./CurrencyHelper");
var _CursorHelper = require("./CursorHelper");var







CurrencyInputHelper = /*#__PURE__*/function () {function CurrencyInputHelper() {}CurrencyInputHelper.
  moveCursor = function moveCursor(value, selection, step) {
    return selection.start === selection.end ?
    _CursorHelper.CursorHelper.calculatePosition(_CurrencyHelper.CurrencyHelper.getInfo(value).cursorMap, selection.start, step) :
    step < 0 ?
    selection.start :
    selection.end;
  };CurrencyInputHelper.

  extendSelection = function extendSelection(value, selection, step) {
    var info = _CurrencyHelper.CurrencyHelper.getInfo(value);
    return _CursorHelper.CursorHelper.extendSelection(info.cursorMap, selection, step);
  };CurrencyInputHelper.

  normalizeSelection = function normalizeSelection(value, selection) {
    var info = _CurrencyHelper.CurrencyHelper.getInfo(value);
    return _CursorHelper.CursorHelper.normalizeSelection(info.cursorMap, selection);
  };CurrencyInputHelper.

  safeInsert = function safeInsert(value, start, end, input, options) {
    if (input && start === 0 && end === value.length) {
      var extracted = _CurrencyHelper.CurrencyHelper.extractValid(input, options);
      if (!extracted) {
        return null;
      }
      return CurrencyInputHelper.insert(value, start, end, extracted);
    }

    var prefix = value.substring(0, start);
    var suffix = value.substring(end);

    var combined = prefix + input + suffix;
    if (_CurrencyHelper.CurrencyHelper.isValidString(combined, options)) {
      return CurrencyInputHelper.insert(value, start, end, input);
    }
    return null;
  };CurrencyInputHelper.

  insert = function insert(value, start, end, input) {
    var prefix = value.substring(0, start);
    var suffix = value.substring(end);

    var info = _CurrencyHelper.CurrencyHelper.getInfo(value);
    var raw = _CursorHelper.CursorHelper.toRawPosition(info.cursorMap, start);
    var info2 = _CurrencyHelper.CurrencyHelper.getInfo(prefix + input + suffix);
    var formattedPosition = _CursorHelper.CursorHelper.toFormattedPosition(info2.cursorMap, raw + input.length);

    return { value: info2.formatted, position: formattedPosition };
  };return CurrencyInputHelper;}();exports.CurrencyInputHelper = CurrencyInputHelper;