{"version":3,"sources":["CurrencyInputKeyboardActions.tsx"],"names":["CURRENCY_INPUT_ACTIONS","Unknown","Ignore","MoveCursorLeft","MoveCursorRight","Home","End","ExtendSelectionLeft","ExtendSelectionRight","FullSelection","ExtendSelectionToStart","ExtendSelectionToEnd","Backspace","Delete","Submit","extractAction","KeyboardActionExctracterBuilder","add","Keyboard","isKeyEnter","isModShift","isKeyArrowLeft","isKeyArrowRight","isShortcutSelectAll","isKeyHome","isKeyEnd","isUnmodified","isKeyBackspace","isKeyDelete","e","isModified","isKeyTab","build"],"mappings":"8LAAA;AACA;;AAEO,IAAMA,sBAAsB,GAAG;AACpCC,EAAAA,OAAO,EAAE,CAD2B;AAEpCC,EAAAA,MAAM,EAAE,CAF4B;;AAIpCC,EAAAA,cAAc,EAAE,EAJoB;AAKpCC,EAAAA,eAAe,EAAE,EALmB;AAMpCC,EAAAA,IAAI,EAAE,EAN8B;AAOpCC,EAAAA,GAAG,EAAE,EAP+B;;AASpCC,EAAAA,mBAAmB,EAAE,EATe;AAUpCC,EAAAA,oBAAoB,EAAE,EAVc;AAWpCC,EAAAA,aAAa,EAAE,EAXqB;AAYpCC,EAAAA,sBAAsB,EAAE,EAZY;AAapCC,EAAAA,oBAAoB,EAAE,EAbc;;AAepCC,EAAAA,SAAS,EAAE,EAfyB;AAgBpCC,EAAAA,MAAM,EAAE,EAhB4B;AAiBpCC,EAAAA,MAAM,EAAE,EAjB4B,EAA/B,C;;;AAoBA,IAAMC,aAAa,GAAG,IAAIC,sDAAJ;AAC1BC,GAD0B,CACtBjB,sBAAsB,CAACc,MADD,EACSI,QAAQ,CAACC,UADlB;AAE1BF,GAF0B,CAEtBjB,sBAAsB,CAACO,mBAFD,EAEsBW,QAAQ,CAACE,UAAT,CAAoBF,QAAQ,CAACG,cAA7B,CAFtB;AAG1BJ,GAH0B,CAGtBjB,sBAAsB,CAACQ,oBAHD,EAGuBU,QAAQ,CAACE,UAAT,CAAoBF,QAAQ,CAACI,eAA7B,CAHvB;AAI1BL,GAJ0B,CAItBjB,sBAAsB,CAACS,aAJD,EAIgBS,QAAQ,CAACK,mBAJzB;AAK1BN,GAL0B,CAKtBjB,sBAAsB,CAACU,sBALD,EAKyBQ,QAAQ,CAACE,UAAT,CAAoBF,QAAQ,CAACM,SAA7B,CALzB;AAM1BP,GAN0B,CAMtBjB,sBAAsB,CAACW,oBAND,EAMuBO,QAAQ,CAACE,UAAT,CAAoBF,QAAQ,CAACO,QAA7B,CANvB;AAO1BR,GAP0B,CAOtBjB,sBAAsB,CAACG,cAPD,EAOiBe,QAAQ,CAACG,cAP1B;AAQ1BJ,GAR0B,CAQtBjB,sBAAsB,CAACI,eARD,EAQkBc,QAAQ,CAACI,eAR3B;AAS1BL,GAT0B,CAStBjB,sBAAsB,CAACK,IATD,EASOa,QAAQ,CAACQ,YAAT,CAAsBR,QAAQ,CAACM,SAA/B,CATP;AAU1BP,GAV0B,CAUtBjB,sBAAsB,CAACM,GAVD,EAUMY,QAAQ,CAACQ,YAAT,CAAsBR,QAAQ,CAACO,QAA/B,CAVN;AAW1BR,GAX0B,CAWtBjB,sBAAsB,CAACY,SAXD,EAWYM,QAAQ,CAACS,cAXrB;AAY1BV,GAZ0B,CAYtBjB,sBAAsB,CAACa,MAZD,EAYSK,QAAQ,CAACU,WAZlB;AAa1BX,GAb0B,CAatBjB,sBAAsB,CAACE,MAbD,EAaS,UAAA2B,CAAC,UAAIX,QAAQ,CAACY,UAAT,GAAsBD,CAAtB,KAA4BX,QAAQ,CAACa,QAAT,CAAkBF,CAAlB,CAAhC,EAbV;AAc1BG,KAd0B,CAcpBhC,sBAAsB,CAACC,OAdH,CAAtB,C","sourcesContent":["import * as Keyboard from '../../lib/events/keyboard/identifiers';\r\nimport { KeyboardActionExctracterBuilder } from '../../lib/extractKeyboardAction';\r\n\r\nexport const CURRENCY_INPUT_ACTIONS = {\r\n  Unknown: 0,\r\n  Ignore: 1,\r\n\r\n  MoveCursorLeft: 11,\r\n  MoveCursorRight: 12,\r\n  Home: 13,\r\n  End: 14,\r\n\r\n  ExtendSelectionLeft: 21,\r\n  ExtendSelectionRight: 22,\r\n  FullSelection: 23,\r\n  ExtendSelectionToStart: 24,\r\n  ExtendSelectionToEnd: 25,\r\n\r\n  Backspace: 31,\r\n  Delete: 32,\r\n  Submit: 33,\r\n};\r\n\r\nexport const extractAction = new KeyboardActionExctracterBuilder()\r\n  .add(CURRENCY_INPUT_ACTIONS.Submit, Keyboard.isKeyEnter)\r\n  .add(CURRENCY_INPUT_ACTIONS.ExtendSelectionLeft, Keyboard.isModShift(Keyboard.isKeyArrowLeft))\r\n  .add(CURRENCY_INPUT_ACTIONS.ExtendSelectionRight, Keyboard.isModShift(Keyboard.isKeyArrowRight))\r\n  .add(CURRENCY_INPUT_ACTIONS.FullSelection, Keyboard.isShortcutSelectAll)\r\n  .add(CURRENCY_INPUT_ACTIONS.ExtendSelectionToStart, Keyboard.isModShift(Keyboard.isKeyHome))\r\n  .add(CURRENCY_INPUT_ACTIONS.ExtendSelectionToEnd, Keyboard.isModShift(Keyboard.isKeyEnd))\r\n  .add(CURRENCY_INPUT_ACTIONS.MoveCursorLeft, Keyboard.isKeyArrowLeft)\r\n  .add(CURRENCY_INPUT_ACTIONS.MoveCursorRight, Keyboard.isKeyArrowRight)\r\n  .add(CURRENCY_INPUT_ACTIONS.Home, Keyboard.isUnmodified(Keyboard.isKeyHome))\r\n  .add(CURRENCY_INPUT_ACTIONS.End, Keyboard.isUnmodified(Keyboard.isKeyEnd))\r\n  .add(CURRENCY_INPUT_ACTIONS.Backspace, Keyboard.isKeyBackspace)\r\n  .add(CURRENCY_INPUT_ACTIONS.Delete, Keyboard.isKeyDelete)\r\n  .add(CURRENCY_INPUT_ACTIONS.Ignore, e => Keyboard.isModified()(e) || Keyboard.isKeyTab(e))\r\n  .build(CURRENCY_INPUT_ACTIONS.Unknown);\r\n"]}