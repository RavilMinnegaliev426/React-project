"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.CurrencyInput = void 0;var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _warning = _interopRequireDefault(require("warning"));

var _Input = require("../Input");


var _constants = require("./constants");
var _SelectionHelper = require("./SelectionHelper");
var _CurrencyHelper = require("./CurrencyHelper");
var _CurrencyInputHelper = require("./CurrencyInputHelper");
var _CurrencyInputKeyboardActions = require("./CurrencyInputKeyboardActions");






























/**
                                                                                * Поле для денежных сумм (и других числовых значений).
                                                                                * Принимает любые свойства `Input`.
                                                                                *
                                                                                * Максимальная длина числа - **15 цифр** (с десятичным разделителем в любом месте).
                                                                                * <br/>
                                                                                * Если `fractionDigits=15`, то в целой части допускается **0**.
                                                                                */var
CurrencyInput = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(CurrencyInput, _React$Component);function CurrencyInput() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;_this.

































    state = (0, _extends2.default)({},
    _this.getState(_this.props.value, _this.props.fractionDigits, _this.props.hideTrailingZeros), {
      focused: false });_this.


    input = void 0;_this.
    tempSelectionForOnChange = _SelectionHelper.SelectionHelper.fromPosition(0);_this.





























































    focus = function () {
      if (_this.input) {
        _this.input.focus();
      }
    };_this.




    blur = function () {
      if (_this.input) {
        _this.input.blur();
      }
    };_this.








    handleMouseUp = function (event) {
      var selection = getInputSelection(event.target);
      var normilized = _CurrencyInputHelper.CurrencyInputHelper.normalizeSelection(_this.state.formatted, selection);
      _this.setState({ selection: normilized });
    };_this.

    handleKeyDown = function (event) {
      var selection = _this.getSelection(event.target);
      _this.tempSelectionForOnChange = selection;

      if (_this.props.onKeyDown) {
        _this.props.onKeyDown(event);
        if (event.defaultPrevented) {
          return;
        }
      }

      var action = (0, _CurrencyInputKeyboardActions.extractAction)(event);

      if (action === _CurrencyInputKeyboardActions.CURRENCY_INPUT_ACTIONS.Ignore) {
        return;
      }

      if (action !== _CurrencyInputKeyboardActions.CURRENCY_INPUT_ACTIONS.Unknown) {
        event.preventDefault();
      }

      switch (action) {
        case _CurrencyInputKeyboardActions.CURRENCY_INPUT_ACTIONS.Submit:{
            if (_this.props.onSubmit) {
              _this.props.onSubmit();
            }
            return;
          }
        case _CurrencyInputKeyboardActions.CURRENCY_INPUT_ACTIONS.Backspace:{
            _this.inputValue(_CurrencyInputHelper.CurrencyInputHelper.moveCursor(_this.state.formatted, selection, -1), selection.end, '');
            return;
          }
        case _CurrencyInputKeyboardActions.CURRENCY_INPUT_ACTIONS.Delete:{
            _this.inputValue(selection.start, _CurrencyInputHelper.CurrencyInputHelper.moveCursor(_this.state.formatted, selection, +1), '');
            return;
          }
        case _CurrencyInputKeyboardActions.CURRENCY_INPUT_ACTIONS.MoveCursorLeft:{
            _this.moveCursor(selection, -1);
            return;
          }
        case _CurrencyInputKeyboardActions.CURRENCY_INPUT_ACTIONS.MoveCursorRight:{
            _this.moveCursor(selection, +1);
            return;
          }
        case _CurrencyInputKeyboardActions.CURRENCY_INPUT_ACTIONS.Home:{
            _this.setState({ selection: _SelectionHelper.SelectionHelper.fromPosition(0) });
            return;
          }
        case _CurrencyInputKeyboardActions.CURRENCY_INPUT_ACTIONS.End:{
            var end = _this.state.formatted.length;
            _this.setState({ selection: _SelectionHelper.SelectionHelper.fromPosition(end) });
            return;
          }
        case _CurrencyInputKeyboardActions.CURRENCY_INPUT_ACTIONS.ExtendSelectionLeft:{
            _this.extendSelection(selection, -1);
            return;
          }
        case _CurrencyInputKeyboardActions.CURRENCY_INPUT_ACTIONS.ExtendSelectionRight:{
            _this.extendSelection(selection, +1);
            return;
          }
        case _CurrencyInputKeyboardActions.CURRENCY_INPUT_ACTIONS.FullSelection:{
            _this.setState({
              selection: _SelectionHelper.SelectionHelper.forward(0, _this.state.formatted.length) });

            return;
          }
        case _CurrencyInputKeyboardActions.CURRENCY_INPUT_ACTIONS.ExtendSelectionToStart:{
            _this.setState({
              selection: _SelectionHelper.SelectionHelper.backward(0, selection.start) });

            return;
          }
        case _CurrencyInputKeyboardActions.CURRENCY_INPUT_ACTIONS.ExtendSelectionToEnd:{
            var inputEnd = _this.state.formatted.length;
            _this.setState({
              selection: _SelectionHelper.SelectionHelper.forward(selection.start, inputEnd) });

            return;
          }}

    };_this.

    getSelection = function (input) {
      var selection = getInputSelection(input);
      return {
        start: selection.start,
        end: selection.end,
        direction: _this.state.selection.direction };

    };_this.

    moveCursor = function (selection, step) {
      var position = _CurrencyInputHelper.CurrencyInputHelper.moveCursor(_this.state.formatted, selection, step);
      _this.setState({ selection: _SelectionHelper.SelectionHelper.fromPosition(position) });
    };_this.

    extendSelection = function (selection, step) {
      var extended = _CurrencyInputHelper.CurrencyInputHelper.extendSelection(_this.state.formatted, selection, step);
      _this.setState({ selection: extended });
    };_this.

    inputValue = function (start, end, value) {
      var result = _CurrencyInputHelper.CurrencyInputHelper.safeInsert(_this.state.formatted, start, end, value, {
        integerDigits: _this.props.integerDigits,
        fractionDigits: _this.props.fractionDigits,
        unsigned: !_this.props.signed });

      if (result) {
        var formatted = result.value;
        var selection = _SelectionHelper.SelectionHelper.fromPosition(result.position);
        _this.setState({ formatted: formatted, selection: selection }, function () {
          var parsedValue = _CurrencyHelper.CurrencyHelper.parse(formatted);
          if (_this.props.value !== parsedValue) {
            _this.props.onValueChange(parsedValue);
          }
        });
        return true;
      }

      if (_this.input) {
        _this.input.blink();
      }
      return false;
    };_this.

    getOnChangeDelta = function (value) {
      var selection = _this.tempSelectionForOnChange;
      var oldValue = _this.state.formatted;
      if (selection.start !== selection.end) {
        return value.substring(selection.start, value.length - (oldValue.length - selection.end));
      } else if (value.length > oldValue.length) {
        return value.substr(selection.start, value.length - oldValue.length);
      }
      return null;
    };_this.

    handleValueChange = function (value) {
      var selection = _this.tempSelectionForOnChange;
      var delta = _this.getOnChangeDelta(value);
      if (delta != null && !_this.inputValue(selection.start, selection.end, delta)) {
        _this.setState({ selection: selection });
      }
    };_this.

    handlePaste = function (event) {
      var data = event.clipboardData.getData('text');
      var selection = _this.getSelection(event.target);
      _this.inputValue(selection.start, selection.end, data);
      event.preventDefault();
    };_this.

    handleCopy = function (event) {
      var selection = _this.getSelection(event.target);
      if (selection.start !== selection.end) {
        var substring = _this.state.formatted.substring(selection.start, selection.end);
        var data = _CurrencyHelper.CurrencyHelper.formatForClipboard(substring);
        event.clipboardData.setData('text', data);
      }
      event.preventDefault();
    };_this.

    handleCut = function (event) {
      var selection = _this.getSelection(event.target);
      if (selection.start !== selection.end) {
        var substring = _this.state.formatted.substring(selection.start, selection.end);
        var data = _CurrencyHelper.CurrencyHelper.formatForClipboard(substring);
        event.clipboardData.setData('text', data);
        _this.inputValue(selection.start, selection.end, '');
      }
      event.preventDefault();
    };_this.

    handleFocus = function (event) {var _event$target =
      event.target,selectionStart = _event$target.selectionStart,selectionEnd = _event$target.selectionEnd,selectionDirection = _event$target.selectionDirection;
      var valueLenght = event.target.value.length;

      var selection = {
        start: selectionStart !== selectionEnd ? selectionStart || 0 : selectionStart || valueLenght,
        end: selectionEnd !== selectionStart ? selectionEnd || 0 : selectionEnd || valueLenght,
        direction: selectionDirection || 'none' };


      _this.setState({
        focused: true,
        selection: selection });


      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }
    };_this.

    handleBlur = function (event) {
      var value = _CurrencyHelper.CurrencyHelper.parse(_this.state.formatted);

      _this.setState((0, _extends2.default)({},
      _this.getState(value, _this.props.fractionDigits, _this.props.hideTrailingZeros), {
        focused: false }));


      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }
    };_this.

    refInput = function (element) {
      _this.input = element;
    };return _this;}var _proto = CurrencyInput.prototype;_proto.componentDidMount = function componentDidMount() {var _this$props = this.props,maxLength = _this$props.maxLength,integerDigits = _this$props.integerDigits,fractionDigits = _this$props.fractionDigits;(0, _warning.default)(maxLength === undefined, "[CurrencyInput]: Prop 'maxLength' has been deprecated. See 'integerDigits' and 'fractionDigits'");(0, _warning.default)((integerDigits || 0) + (fractionDigits || 0) <= _constants.MAX_SAFE_DIGITS, "[CurrencyInput]: Sum of 'integerDigits' and 'fractionDigits' exceeds " + _constants.MAX_SAFE_DIGITS + "." + "\nSee https://tech.skbkontur.ru/react-ui/#/CurrencyInput?id=why15");};_proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {var value = nextProps.value,fractionDigits = nextProps.fractionDigits,hideTrailingZeros = nextProps.hideTrailingZeros;if (value !== _CurrencyHelper.CurrencyHelper.parse(this.state.formatted) || fractionDigits !== this.props.fractionDigits) {var state = this.getState(value, fractionDigits, hideTrailingZeros);this.setState(state);}};_proto.componentDidUpdate = function componentDidUpdate() {if (this.state.focused && this.input) {var _this$state$selection = this.state.selection,start = _this$state$selection.start,end = _this$state$selection.end;this.input.setSelectionRange(start, end);}};_proto.render = function render() {var _this$props2 = this.props,fractionDigits = _this$props2.fractionDigits,signed = _this$props2.signed,onSubmit = _this$props2.onSubmit,integerDigits = _this$props2.integerDigits,hideTrailingZeros = _this$props2.hideTrailingZeros,rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props2, ["fractionDigits", "signed", "onSubmit", "integerDigits", "hideTrailingZeros"]);var placeholder = this.props.placeholder == null ? _CurrencyHelper.CurrencyHelper.format(0, { fractionDigits: fractionDigits, hideTrailingZeros: hideTrailingZeros }) : this.props.placeholder;return _react.default.createElement(_Input.Input, (0, _extends2.default)({}, rest, { value: this.state.formatted, onBlur: this.handleBlur, onFocus: this.handleFocus, onMouseUp: this.handleMouseUp, onKeyDown: this.handleKeyDown, onValueChange: this.handleValueChange, onPaste: this.handlePaste, onCopy: this.handleCopy, onCut: this.handleCut, onMouseEnter: this.props.onMouseEnter, onMouseLeave: this.props.onMouseLeave, onMouseOver: this.props.onMouseOver, ref: this.refInput, placeholder: this.state.focused ? '' : placeholder }));} /**
public
proto.getState = function getState(value, fractionDigits, hideTrailingZeros) {return { formatted: _CurrencyHelper.CurrencyHelper.format(value, { fractionDigits: fractionDigits, hideTrailingZeros: hideTrailingZeros }), selection: _SelectionHelper.SelectionHelper.fromPosition(0) };};return CurrencyInput;}(_react.default.Component);exports.CurrencyInput = CurrencyInput;CurrencyInput.__KONTUR_REACT_UI__ = 'CurrencyInput';CurrencyInput.propTypes = { align: _propTypes.default.oneOf(['left', 'center', 'right']), autoFocus: _propTypes.default.bool, borderless: _propTypes.default.bool, disabled: _propTypes.default.bool, error: _propTypes.default.bool, fractionDigits: _propTypes.default.number, hideTrailingZeros: _propTypes.default.bool, leftIcon: _propTypes.default.element, placeholder: _propTypes.default.string, signed: _propTypes.default.bool, size: _propTypes.default.oneOf(['small', 'medium', 'large']), value: _propTypes.default.number, warning: _propTypes.default.bool, width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]), onBlur: _propTypes.default.func, onValueChange: _propTypes.default.func.isRequired, onFocus: _propTypes.default.func, onMouseEnter: _propTypes.default.func, onMouseLeave: _propTypes.default.func, onMouseOver: _propTypes.default.func, onSubmit: _propTypes.default.func };CurrencyInput.defaultProps = { align: 'right', fractionDigits: 2, hideTrailingZeros: false, value: null };
function getInputSelection(input) {
  if (!(input instanceof HTMLInputElement)) {
    throw new Error('input is not HTMLInputElement');
  }
  return {
    start: input.selectionStart,
    end: input.selectionEnd,
    direction: input.selectionDirection };

}