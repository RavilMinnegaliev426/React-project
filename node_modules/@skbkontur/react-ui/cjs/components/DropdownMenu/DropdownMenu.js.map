{"version":3,"sources":["DropdownMenu.tsx"],"names":["DropdownMenu","props","popupMenu","open","close","refPopupMenu","ref","handleChangeMenuState","menuVisible","onOpen","onClose","caption","isProductionEnv","Error","render","menuMaxHeight","menuWidth","positions","disableAnimations","header","footer","children","React","Component","__KONTUR_REACT_UI__","defaultProps","Boolean","process","env","enableReactTesting"],"mappings":"wPAAA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;;AAGaA,Y;;;;;;;;;;AAUX,wBAAYC,KAAZ,EAAsC;AACpC,wCAAMA,KAAN,UADoC,MAF9BC,SAE8B,GAFG,IAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+B/BC,IAAAA,IA/B+B,GA+BxB,YAAY;AACxB,UAAI,MAAKD,SAAT,EAAoB;AAClB,cAAKA,SAAL,CAAeC,IAAf;AACD;AACF,KAnCqC;;AAqC/BC,IAAAA,KArC+B,GAqCvB,YAAY;AACzB,UAAI,MAAKF,SAAT,EAAoB;AAClB,cAAKA,SAAL,CAAeE,KAAf;AACD;AACF,KAzCqC;;AA2C9BC,IAAAA,YA3C8B,GA2Cf,UAACC,GAAD,UAA+B,MAAKJ,SAAL,GAAiBI,GAAhD,EA3Ce;;AA6C9BC,IAAAA,qBA7C8B,GA6CN,UAACC,WAAD,EAA0B;AACxD,UAAIA,WAAW,IAAI,MAAKP,KAAL,CAAWQ,MAA9B,EAAsC;AACpC,cAAKR,KAAL,CAAWQ,MAAX;AACA;AACD;;AAED,UAAI,CAACD,WAAD,IAAgB,MAAKP,KAAL,CAAWS,OAA/B,EAAwC;AACtC,cAAKT,KAAL,CAAWS,OAAX;AACA;AACD;AACF,KAvDqC,CAGpC,IAAI,CAACT,KAAK,CAACU,OAAP,IAAkB,CAACC,mCAAvB,EAAwC,CACtC,MAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN,CACD,CALmC,aAMrC,C,2CAEMC,M,GAAP,kBAAgB,CACd,IAAI,CAAC,KAAKb,KAAL,CAAWU,OAAhB,EAAyB,CACvB,OAAO,IAAP,CACD,CACD,OACE,6BAAC,oBAAD,IACE,GAAG,EAAE,KAAKN,YADZ,EAEE,OAAO,EAAE,KAAKJ,KAAL,CAAWU,OAFtB,EAGE,aAAa,EAAE,KAAKV,KAAL,CAAWc,aAH5B,EAIE,SAAS,EAAE,KAAKd,KAAL,CAAWe,SAJxB,EAKE,iBAAiB,EAAE,KAAKT,qBAL1B,EAME,WAAW,EAAE,KANf,EAOE,WAAW,EAAE,CAPf,EAQE,SAAS,EAAE,KAAKN,KAAL,CAAWgB,SARxB,EASE,iBAAiB,EAAE,KAAKhB,KAAL,CAAWiB,iBAThC,EAUE,MAAM,EAAE,KAAKjB,KAAL,CAAWkB,MAVrB,EAWE,MAAM,EAAE,KAAKlB,KAAL,CAAWmB,MAXrB,IAaG,KAAKnB,KAAL,CAAWoB,QAbd,CADF,CAiBD,C,uBAvC+BC,eAAMC,S,sCAA3BvB,Y,CACGwB,mB,GAAsB,c,CADzBxB,Y,CAGGyB,Y,GAAe,EAC3BP,iBAAiB,EAAEQ,OAAO,CAACC,OAAO,CAACC,GAAR,CAAYC,kBAAb,CADC,EAE3BZ,SAAS,EAAE,CAAC,aAAD,EAAgB,cAAhB,EAAgC,UAAhC,EAA4C,WAA5C,CAFgB,E","sourcesContent":["import React from 'react';\r\n\r\nimport { Nullable } from '../../typings/utility-types';\r\nimport { PopupMenu, PopupMenuProps } from '../../internal/PopupMenu';\r\nimport { isProductionEnv } from '../../lib/currentEnvironment';\r\nimport { PopupPosition } from '../../internal/Popup';\r\n\r\nexport interface DropdownMenuProps {\r\n  /** Максимальная высота меню */\r\n  menuMaxHeight?: React.CSSProperties['maxWidth'];\r\n  /** Ширина меню */\r\n  menuWidth?: React.CSSProperties['width'];\r\n  /**\r\n   * Элемент или функция возвращающая элемент,\r\n   * если передана, используется вместо ```caption```,\r\n   * в таком случае управлять открытием и закрытием меню\r\n   * придется в этой функции\r\n   */\r\n  caption: PopupMenuProps['caption'];\r\n\r\n  header?: React.ReactNode;\r\n  footer?: React.ReactNode;\r\n  /**\r\n   * Массив разрешенных положений меню относительно caption'а.\r\n   * @default ['bottom left', 'bottom right', 'top left', 'top right']\r\n   */\r\n  positions?: PopupPosition[];\r\n\r\n  onOpen?: () => void;\r\n  onClose?: () => void;\r\n\r\n  /**\r\n   * Не показывать анимацию\r\n   */\r\n  disableAnimations: boolean;\r\n}\r\n\r\n/**\r\n * Меню, раскрывающееся по клику на переданный в ```caption``` элемент\r\n */\r\nexport class DropdownMenu extends React.Component<DropdownMenuProps> {\r\n  public static __KONTUR_REACT_UI__ = 'DropdownMenu';\r\n\r\n  public static defaultProps = {\r\n    disableAnimations: Boolean(process.env.enableReactTesting),\r\n    positions: ['bottom left', 'bottom right', 'top left', 'top right'],\r\n  };\r\n\r\n  private popupMenu: Nullable<PopupMenu> = null;\r\n\r\n  constructor(props: DropdownMenuProps) {\r\n    super(props);\r\n\r\n    if (!props.caption && !isProductionEnv) {\r\n      throw new Error('Prop \"caption\" is required!!!');\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    if (!this.props.caption) {\r\n      return null;\r\n    }\r\n    return (\r\n      <PopupMenu\r\n        ref={this.refPopupMenu}\r\n        caption={this.props.caption}\r\n        menuMaxHeight={this.props.menuMaxHeight}\r\n        menuWidth={this.props.menuWidth}\r\n        onChangeMenuState={this.handleChangeMenuState}\r\n        popupHasPin={false}\r\n        popupMargin={0}\r\n        positions={this.props.positions}\r\n        disableAnimations={this.props.disableAnimations}\r\n        header={this.props.header}\r\n        footer={this.props.footer}\r\n      >\r\n        {this.props.children}\r\n      </PopupMenu>\r\n    );\r\n  }\r\n\r\n  public open = (): void => {\r\n    if (this.popupMenu) {\r\n      this.popupMenu.open();\r\n    }\r\n  };\r\n\r\n  public close = (): void => {\r\n    if (this.popupMenu) {\r\n      this.popupMenu.close();\r\n    }\r\n  };\r\n\r\n  private refPopupMenu = (ref: Nullable<PopupMenu>) => (this.popupMenu = ref);\r\n\r\n  private handleChangeMenuState = (menuVisible: boolean) => {\r\n    if (menuVisible && this.props.onOpen) {\r\n      this.props.onOpen();\r\n      return;\r\n    }\r\n\r\n    if (!menuVisible && this.props.onClose) {\r\n      this.props.onClose();\r\n      return;\r\n    }\r\n  };\r\n}\r\n"]}