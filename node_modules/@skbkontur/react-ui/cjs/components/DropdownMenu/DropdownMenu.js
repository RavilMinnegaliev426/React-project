"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.DropdownMenu = void 0;var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));


var _PopupMenu = require("../../internal/PopupMenu");
var _currentEnvironment = require("../../lib/currentEnvironment");
































/**
                                                                    * Меню, раскрывающееся по клику на переданный в ```caption``` элемент
                                                                    */var
DropdownMenu = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(DropdownMenu, _React$Component);









  function DropdownMenu(props) {var _this;
    _this = _React$Component.call(this, props) || this;_this.popupMenu = null;_this.





























    open = function () {
      if (_this.popupMenu) {
        _this.popupMenu.open();
      }
    };_this.

    close = function () {
      if (_this.popupMenu) {
        _this.popupMenu.close();
      }
    };_this.

    refPopupMenu = function (ref) {return _this.popupMenu = ref;};_this.

    handleChangeMenuState = function (menuVisible) {
      if (menuVisible && _this.props.onOpen) {
        _this.props.onOpen();
        return;
      }

      if (!menuVisible && _this.props.onClose) {
        _this.props.onClose();
        return;
      }
    };if (!props.caption && !_currentEnvironment.isProductionEnv) {throw new Error('Prop "caption" is required!!!');}return _this;}var _proto = DropdownMenu.prototype;_proto.render = function render() {if (!this.props.caption) {return null;}return _react.default.createElement(_PopupMenu.PopupMenu, { ref: this.refPopupMenu, caption: this.props.caption, menuMaxHeight: this.props.menuMaxHeight, menuWidth: this.props.menuWidth, onChangeMenuState: this.handleChangeMenuState, popupHasPin: false, popupMargin: 0, positions: this.props.positions, disableAnimations: this.props.disableAnimations, header: this.props.header, footer: this.props.footer }, this.props.children);};return DropdownMenu;}(_react.default.Component);exports.DropdownMenu = DropdownMenu;DropdownMenu.__KONTUR_REACT_UI__ = 'DropdownMenu';DropdownMenu.defaultProps = { disableAnimations: Boolean(process.env.enableReactTesting), positions: ['bottom left', 'bottom right', 'top left', 'top right'] };