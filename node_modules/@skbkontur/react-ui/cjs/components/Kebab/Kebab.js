"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.Kebab = void 0;var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));

var _identifiers = require("../../lib/events/keyboard/identifiers");
var _px = require("../../internal/icons/20px");
var LayoutEvents = _interopRequireWildcard(require("../../lib/LayoutEvents"));
var _tabListener = require("../../lib/events/tabListener");
var _PopupMenu = require("../../internal/PopupMenu");


var _ThemeContext = require("../../lib/theming/ThemeContext");

var _px2 = require("../../internal/icons/16px");

var _Kebab = require("./Kebab.styles");var

































Kebab = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(Kebab, _React$Component);function Kebab() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;_this.












    state = {
      opened: false,
      focusedByTab: false,
      anchor: null };_this.


    theme = void 0;_this.

    listener =

    {
      remove: function remove() {return undefined;} };_this.








































    renderCaption = function (captionProps) {var _cn;var
      disabled = _this.props.disabled;
      var handleCaptionKeyDown = function handleCaptionKeyDown(event) {
        if (!disabled) {
          _this.handleCaptionKeyDown(event, captionProps.openMenu);
        }
      };

      var handleCaptionClick = function handleCaptionClick() {
        if (!disabled) {
          captionProps.toggleMenu();
        }
      };

      return (
        _react.default.createElement("span", {
          tabIndex: disabled ? -1 : 0,
          onClick: handleCaptionClick,
          onKeyDown: handleCaptionKeyDown,
          onFocus: _this.handleFocus,
          onBlur: _this.handleBlur,
          className: (0, _classnames.default)((_cn = {}, _cn[
          _Kebab.jsStyles.kebab()] = true, _cn[
          _Kebab.jsStyles.opened()] = captionProps.opened, _cn[
          _Kebab.jsStyles.disabled()] = disabled, _cn[
          _Kebab.jsStyles.focused(_this.theme)] = _this.state.focusedByTab, _cn)) },


        _this.renderIcon()));


    };_this.

    handleCaptionKeyDown = function (
    e,
    openMenu)
    {
      if ((0, _identifiers.someKeys)(_identifiers.isKeyEnter, _identifiers.isKeySpace, _identifiers.isKeyArrowVertical)(e)) {
        e.preventDefault();
        openMenu(true);
      }
    };_this.

    handleChangeMenuState = function (isOpened, restoreFocus) {
      _this.setState(
      {
        opened: isOpened,
        focusedByTab: !isOpened && restoreFocus },

      function () {
        if (_this.props.disabled) {
          return;
        }

        if (_this.state.opened) {
          _this.props.onOpen();
        } else {
          _this.props.onClose();
        }
      });

    };_this.

    handleFocus = function () {
      if (!_this.props.disabled) {
        // focus event fires before keyDown eventlistener
        // so we should check tabPressed in async way
        process.nextTick(function () {
          if (_tabListener.tabListener.isTabPressed) {
            _this.setState({ focusedByTab: true });
          }
        });
      }
    };_this.

    handleBlur = function () {
      _this.setState({
        focusedByTab: false });

    };return _this;}var _proto = Kebab.prototype;_proto.componentDidMount = function componentDidMount() {/** addListener'у нужен колбэк в аргумент */this.listener = LayoutEvents.addListener(function () {return undefined;});};_proto.componentWillUnmount = function componentWillUnmount() {this.listener.remove();};_proto.render = function render() {var _this2 = this;return _react.default.createElement(_ThemeContext.ThemeContext.Consumer, null, function (theme) {_this2.theme = theme;return _this2.renderMain();});};_proto.renderMain = function renderMain() {var _this$props = this.props,disabled = _this$props.disabled,positions = _this$props.positions;return _react.default.createElement(_PopupMenu.PopupMenu, { popupMargin: 5, popupPinOffset: 15, popupHasPin: true, positions: positions, onChangeMenuState: this.handleChangeMenuState, caption: this.renderCaption, disableAnimations: this.props.disableAnimations }, !disabled && this.props.children);};_proto.

  renderIcon = function renderIcon() {
    switch (this.props.size) {
      case 'small':
        return (
          _react.default.createElement("div", { className: _Kebab.jsStyles.iconsmall() },
          _react.default.createElement(_px2.MenuKebabIcon, { size: "14px", color: "#757575" })));


      case 'medium':
        return (
          _react.default.createElement("div", { className: _Kebab.jsStyles.iconmedium() },
          _react.default.createElement(_px2.MenuKebabIcon, { size: "18px", color: "#757575" })));


      case 'large':
        return (
          _react.default.createElement("div", { className: _Kebab.jsStyles.iconlarge() },
          _react.default.createElement(_px.Icon, { name: "kebab", color: "#757575" })));


      default:
        throw new Error("Unexpected size '" + this.props.size + "'");}

  };return Kebab;}(_react.default.Component);exports.Kebab = Kebab;Kebab.__KONTUR_REACT_UI__ = 'Kebab';Kebab.propTypes = {};Kebab.defaultProps = { onOpen: function onOpen() {return undefined;}, onClose: function onClose() {return undefined;}, positions: ['bottom left', 'bottom right', 'top left', 'top right'], size: 'small', disableAnimations: Boolean(process.env.enableReactTesting) };


Kebab.propTypes = {
  children: _propTypes.default.node,
  disabled: _propTypes.default.bool,
  menuMaxHeight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
                                                                                                        * Размер кебаба small 14px | large 20px
                                                                                                        */
  size: _propTypes.default.string,

  /**
                                    * Коллбек, вызывающийся перед закрытием кебаба
                                    */
  onClose: _propTypes.default.func,

  /**
                                     * Коллбек, вызывающийся перед открытием кебаба
                                     */
  onOpen: _propTypes.default.func };