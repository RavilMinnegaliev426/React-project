import React, { FocusEventHandler, MouseEventHandler, ReactNode } from 'react';
import { TokenProps } from '../Token';
import { MenuItemState } from '../MenuItem';
export declare enum TokenInputType {
    WithReference = 0,
    WithoutReference = 1,
    Combined = 2
}
export interface TokenInputProps<T> {
    selectedItems: T[];
    onValueChange: (items: T[]) => void;
    onMouseEnter: MouseEventHandler<HTMLDivElement>;
    onMouseLeave: MouseEventHandler<HTMLDivElement>;
    onFocus: FocusEventHandler<HTMLInputElement>;
    onBlur: FocusEventHandler<HTMLInputElement>;
    autoFocus?: boolean;
    type?: TokenInputType;
    getItems?: (query: string) => Promise<T[]>;
    hideMenuIfEmptyInputValue?: boolean;
    renderItem: (item: T, state: MenuItemState) => React.ReactNode | null;
    renderValue: (item: T) => React.ReactNode;
    /**
     * Функция должна возвращать строковое представление токена
     * @default item => item
     */
    valueToString: (item: T) => string;
    renderNotFound?: () => React.ReactNode;
    valueToItem: (item: string) => T;
    toKey: (item: T) => string | number | undefined;
    placeholder?: string;
    delimiters?: string[];
    error?: boolean;
    warning?: boolean;
    disabled?: boolean;
    width?: string | number;
    maxMenuHeight?: number | string;
    renderToken?: (item: T, props: Partial<TokenProps>) => ReactNode;
    /**
     * Вызывается при изменении текста в поле ввода,
     */
    onInputValueChange?: (value: string) => void;
    /**
     * Функция отрисовки кнопки добавления в выпадающем списке
     */
    renderAddButton?: (query?: string, onAddItem?: () => void) => ReactNode;
}
export interface TokenInputState<T> {
    autocompleteItems?: T[];
    activeTokens: T[];
    inFocus?: boolean;
    inputValue: string;
    inputValueWidth: number;
    preventBlur?: boolean;
    loading?: boolean;
}
export declare const DefaultState: {
    inputValue: string;
    autocompleteItems: undefined;
    activeTokens: never[];
    inFocus: boolean;
    loading: boolean;
    preventBlur: boolean;
    inputValueWidth: number;
};
export declare class TokenInput<T = string> extends React.PureComponent<TokenInputProps<T>, TokenInputState<T>> {
    static __KONTUR_REACT_UI__: string;
    static defaultProps: Partial<TokenInputProps<any>>;
    state: TokenInputState<T>;
    private readonly locale;
    private theme;
    private input;
    private tokensInputMenu;
    private textHelper;
    private wrapper;
    componentDidMount(): void;
    componentDidUpdate(prevProps: TokenInputProps<T>, prevState: TokenInputState<T>): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    private renderMain;
    /**
     * Сбрасывает введенное пользователем значение
     * @public
     */
    reset(): void;
    private hasValueInItems;
    private get showAddItemHint();
    private get type();
    private get delimiters();
    private get menuRef();
    private get isCursorVisible();
    private isCursorVisibleForState;
    private inputRef;
    private tokensInputMenuRef;
    private textHelperRef;
    private wrapperRef;
    private dispatch;
    private updateInputTextWidth;
    private handleInputFocus;
    private handleInputBlur;
    private isBlurToMenu;
    private handleWrapperMouseDown;
    private handleWrapperMouseUp;
    private handleCopy;
    private handleInputPaste;
    private tryGetItems;
    private handleKeyDown;
    private handleInputKeyDown;
    private moveFocusToLastToken;
    private focusInput;
    private handleWrapperKeyDown;
    private handleWrapperArrows;
    private handleWrapperArrowsWithoutShift;
    private handleWrapperArrowsWithShift;
    private handleValueChange;
    private handleAddItem;
    private handleRemoveToken;
    private handleTokenClick;
    private handleChangeInputValue;
    private highlightMenuItem;
    private renderTokenFields;
    private renderToken;
    private renderAddButton;
}
