"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.Link = void 0;var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));

var _createPropsGetter = require("../../lib/createPropsGetter");

var _tabListener = require("../../lib/events/tabListener");

var _ThemeContext = require("../../lib/theming/ThemeContext");
var _utils = require("../../lib/utils");

var _Link = require("./Link.styles");
























/**
                                       * Стандартная ссылка.
                                       * Интерфес пропсов наследуется от `React.AnchorHTMLAttributes<HTMLAnchorElement>`.
                                       * Все свойства передаются в элемент `<a>`.
                                       * `className` и `style` не поддерживаются
                                       */var
Link = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(Link, _React$Component);function Link() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;_this.

















    state = {
      focusedByTab: false };_this.


    theme = void 0;_this.
    getProps = (0, _createPropsGetter.createPropsGetter)(Link.defaultProps);_this.









































































    _handleFocus = function (event) {
      if (!_this.props.disabled) {
        // focus event fires before keyDown eventlistener
        // so we should check tabPressed in async way
        process.nextTick(function () {
          if (_tabListener.tabListener.isTabPressed) {
            _this.setState({ focusedByTab: true });
          }
        });
      }
    };_this.

    _handleBlur = function () {
      _this.setState({ focusedByTab: false });
    };_this.

    _handleClick = function (event) {var _this$props =
      _this.props,href = _this$props.href,onClick = _this$props.onClick,disabled = _this$props.disabled;
      if (!href) {
        event.preventDefault();
      }
      if (onClick && !disabled) {
        onClick(event);
      }
    };return _this;}var _proto = Link.prototype;_proto.render = function render() {var _this2 = this;return _react.default.createElement(_ThemeContext.ThemeContext.Consumer, null, function (theme) {_this2.theme = theme;return _this2.renderMain();});};_proto.renderMain = function renderMain() {var _cn;var _this$getProps = this.getProps(),disabled = _this$getProps.disabled,href = _this$getProps.href,icon = _this$getProps.icon,use = _this$getProps.use,_button = _this$getProps._button,_buttonOpened = _this$getProps._buttonOpened,className = _this$getProps.className,style = _this$getProps.style,relOrigin = _this$getProps.rel,rest = (0, _objectWithoutPropertiesLoose2.default)(_this$getProps, ["disabled", "href", "icon", "use", "_button", "_buttonOpened", "className", "style", "rel"]);var iconElement = null;if (icon) {iconElement = _react.default.createElement("span", { className: _Link.jsStyles.icon(this.theme) }, icon);}var arrow = null;if (_button) {arrow = _react.default.createElement("span", { className: _Link.jsStyles.arrow() });}var rel = relOrigin;if (typeof rel === 'undefined' && href) {rel = "noopener" + ((0, _utils.isExternalLink)(href) ? ' noreferrer' : '');}var props = { className: (0, _classnames.default)((_cn = {}, _cn[_Link.jsStyles.root(this.theme)] = true, _cn[_Link.jsStyles.disabled(this.theme)] = !!disabled, _cn[_Link.jsStyles.button()] = !!_button, _cn[_Link.jsStyles.buttonOpened()] = !!_buttonOpened, _cn[_Link.jsStyles.focus(this.theme)] = !disabled && this.state.focusedByTab, _cn[_Link.jsStyles.useDefault(this.theme)] = use === 'default', _cn[_Link.jsStyles.useSuccess(this.theme)] = use === 'success', _cn[_Link.jsStyles.useDanger(this.theme)] = use === 'danger', _cn[_Link.jsStyles.useGrayed(this.theme)] = use === 'grayed', _cn)), href: href, rel: rel, onClick: this._handleClick, onFocus: this._handleFocus, onBlur: this._handleBlur, tabIndex: this.props.tabIndex };if (disabled) {props.tabIndex = -1;}return _react.default.createElement("a", (0, _extends2.default)({}, rest, props), iconElement, this.props.children, arrow);};return Link;}(_react.default.Component);exports.Link = Link;Link.__KONTUR_REACT_UI__ = 'Link';Link.propTypes = { disabled: _propTypes.default.bool, href: _propTypes.default.string, icon: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]), use: _propTypes.default.oneOf(['default', 'success', 'danger', 'grayed']) };Link.defaultProps = { href: '', use: 'default' };