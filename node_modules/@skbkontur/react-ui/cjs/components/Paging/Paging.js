"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");exports.__esModule = true;exports.Paging = void 0;var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));
var _propTypes = require("prop-types");
var _classnames = _interopRequireDefault(require("classnames"));

var _identifiers = require("../../lib/events/keyboard/identifiers");
var _decorators = require("../../lib/locale/decorators");

var _tabListener = require("../../lib/events/tabListener");
var _utils = require("../../lib/utils");
var _ThemeContext = require("../../lib/theming/ThemeContext");

var _px = require("../../internal/icons/16px");

var _Paging = require("./Paging.styles");
var NavigationHelper = _interopRequireWildcard(require("./NavigationHelper"));
var _PagingHelper = require("./PagingHelper");
var _locale = require("./locale");var _dec, _class, _class2, _temp;

var IGNORE_EVENT_TAGS = ['input', 'textarea'];var













































Paging = (_dec = (0, _decorators.locale)('Paging', _locale.PagingLocaleHelper), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(Paging, _React$Component);function Paging() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;_this.

















    state = {
      focusedByTab: false,
      focusedItem: null,
      keyboardControl: _this.props.useGlobalListener };_this.


    theme = void 0;_this.
    locale = void 0;_this.
    addedGlobalListener = false;_this.
    container = null;_this.


























































    renderItem = function (item, index) {
      var focused = _this.getFocusedItem() === item;
      switch (item) {
        case '.':{
            var key = "dots" + (index < 5 ? 'Left' : 'Right');
            return _this.renderDots(key);
          }
        case 'forward':{
            var disabled = _this.isItemDisabled(item);
            return _this.renderForwardLink(disabled, focused);
          }
        default:{
            var active = _this.props.activePage === item;
            return _this.renderPageLink(item, active, focused);
          }}

    };_this.

    renderDots = function (key) {
      return (
        _react.default.createElement("span", { "data-tid": "Paging__dots", key: key, className: _Paging.jsStyles.dots(_this.theme) },
        '...'));


    };_this.

    renderForwardLink = function (disabled, focused) {var _cn;
      var classes = (0, _classnames.default)((_cn = {}, _cn[
      _Paging.jsStyles.forwardLink(_this.theme)] = true, _cn[
      _Paging.jsStyles.forwardLinkFocused()] = focused, _cn[
      _Paging.jsStyles.disabled(_this.theme)] = disabled, _cn));var _this$props =

      _this.props,Component = _this$props.component,caption = _this$props.caption;var
      forward = _this.locale.forward;

      return (
        _react.default.createElement(Component, {
          key: 'forward',
          "data-tid": "Paging__forwardLink",
          active: false,
          className: classes,
          onClick: disabled ? _utils.emptyHandler : _this.goForward,
          tabIndex: -1,
          pageNumber: 'forward' },

        caption || forward,
        _react.default.createElement("span", { className: _Paging.jsStyles.forwardIcon() },
        _react.default.createElement(_px.ArrowChevronRightIcon, { size: "18px" }))));



    };_this.

    renderPageLink = function (pageNumber, active, focused) {var _cn2;
      var classes = (0, _classnames.default)((_cn2 = {}, _cn2[
      _Paging.jsStyles.pageLink(_this.theme)] = true, _cn2[
      _Paging.jsStyles.pageLinkFocused(_this.theme)] = focused, _cn2[
      _Paging.jsStyles.active()] = active, _cn2));

      var Component = _this.props.component;
      var handleClick = function handleClick() {return _this.goToPage(pageNumber);};

      return (
        _react.default.createElement("span", {
          "data-tid": "Paging__pageLinkWrapper",
          key: pageNumber,
          className: _Paging.jsStyles.pageLinkWrapper(),
          onMouseDown: _this.handleMouseDownPageLink },

        _react.default.createElement(Component, {
          "data-tid": "Paging__pageLink",
          active: active,
          className: classes,
          onClick: handleClick,
          tabIndex: -1,
          pageNumber: pageNumber },

        pageNumber),

        active && _this.renderNavigationHint()));


    };_this.

    renderNavigationHint = function () {
      if (_this.props.withoutNavigationHint) {
        return null;
      }var

      keyboardControl = _this.state.keyboardControl;
      var canGoBackward = _this.canGoBackward();
      var canGoForward = _this.canGoForward();

      if (keyboardControl && (canGoBackward || canGoForward)) {
        return (
          _react.default.createElement("span", { className: _Paging.jsStyles.pageLinkHint(_this.theme) },
          _react.default.createElement("span", { className: canGoBackward ? '' : _Paging.jsStyles.transparent() }, '←'),
          _react.default.createElement("span", null, NavigationHelper.getKeyName()),
          _react.default.createElement("span", { className: canGoForward ? '' : _Paging.jsStyles.transparent() }, '→')));


      }

      return _react.default.createElement("div", { className: _Paging.jsStyles.pageLinkHintPlaceHolder() });
    };_this.

    handleMouseDown = function () {
      _this.setState({ focusedByTab: false, focusedItem: null });
    };_this.

    handleMouseDownPageLink = function () {
      if (_utils.isIE11) {
        // Клик по span внутри контейнера с tabindex="0" переносит фокус именно на этот span.
        // Поэтому горячие клавиши работают пока span существует на странице.
        setTimeout(function () {return _this.container && _this.container.focus();}, 0);
      }
    };_this.

    handleKeyDown = function (e) {
      if (e.shiftKey) {
        return;
      }

      var target = e.target;

      var isArrowLeft = (0, _identifiers.isKeyArrowLeft)(e);
      var isArrowRight = (0, _identifiers.isKeyArrowRight)(e);

      if (
      target instanceof Element && (
      IGNORE_EVENT_TAGS.includes(target.tagName.toLowerCase()) || target.isContentEditable))
      {
        return;
      }

      if (NavigationHelper.checkKeyPressed(e) && isArrowLeft) {
        _this.setState({ focusedItem: null }, _this.goBackward);
        return;
      }
      if (NavigationHelper.checkKeyPressed(e) && isArrowRight) {
        _this.setState({ focusedItem: null }, _this.goForward);
        return;
      }

      if (_this.container && _this.container === e.target) {
        if (isArrowLeft) {
          _this.setState({ focusedByTab: true }, _this.moveFocusLeft);
          return;
        }
        if (isArrowRight) {
          _this.setState({ focusedByTab: true }, _this.moveFocusRight);
          return;
        }
        if ((0, _identifiers.isKeyEnter)(e)) {
          _this.executeItemAction(_this.getFocusedItem());
          return;
        }
      }
    };_this.

    handleFocus = function (e) {
      if (_this.props.disabled) {
        return;
      }

      _this.setState({ keyboardControl: true });

      // focus event fires before keyDown eventlistener
      // so we should check tabPressed in async way
      process.nextTick(function () {
        if (_tabListener.tabListener.isTabPressed) {
          _this.setState({ focusedByTab: true });
        }
      });
    };_this.

    handleBlur = function () {
      _this.setState({
        focusedByTab: false,
        keyboardControl: _this.props.useGlobalListener || false });

    };_this.

    getItems = function () {
      return (0, _PagingHelper.getItems)(_this.props.activePage, _this.props.pagesCount).concat('forward');
    };_this.

    getFocusedItem = function () {
      if (!_this.state.focusedByTab) {
        return null;
      }var

      focusedItem = _this.state.focusedItem;
      if (focusedItem && _this.getItems().includes(focusedItem) && _this.isItemFocusable(focusedItem)) {
        return focusedItem;
      }

      return _this.props.activePage;
    };_this.

    isItemFocusable = function (item) {
      return !_this.isItemDisabled(item);
    };_this.

    isItemDisabled = function (item) {
      switch (item) {
        case '.':
          return true;
        case 'forward':
          return !_this.canGoForward();
        default:
          return false;}

    };_this.

    executeItemAction = function (item) {
      if (item === 'forward') {
        _this.goForward();
      }
      if (typeof item === 'number') {
        _this.goToPage(item);
      }
    };_this.

    moveFocusLeft = function () {
      _this.moveFocus(-1);
    };_this.

    moveFocusRight = function () {
      _this.moveFocus(1);
    };_this.

    moveFocus = function (step) {
      var focusedItem = _this.getFocusedItem();
      var items = _this.getItems();
      var index = items.findIndex(function (x) {return x === focusedItem;});
      do {
        index = (index + step + items.length) % items.length;
      } while (!_this.isItemFocusable(items[index]));
      _this.setState({ focusedItem: items[index] });
    };_this.

    canGoBackward = function () {
      return _this.props.activePage > 1;
    };_this.

    canGoForward = function () {
      return _this.props.activePage < _this.props.pagesCount;
    };_this.

    goBackward = function () {
      _this.goToPage(_this.props.activePage - 1);
    };_this.

    goForward = function () {
      _this.goToPage(_this.props.activePage + 1);
    };_this.

    goToPage = function (pageNumber) {
      if (1 <= pageNumber && pageNumber !== _this.props.activePage && pageNumber <= _this.props.pagesCount) {
        _this.props.onPageChange(pageNumber);
      }
    };_this.

    addGlobalListener = function () {
      if (_this.addedGlobalListener) {
        return;
      }

      document.addEventListener('keydown', _this.handleKeyDown);
      _this.addedGlobalListener = true;
    };_this.

    removeGlobalListener = function () {
      if (_this.addedGlobalListener) {
        document.removeEventListener('keydown', _this.handleKeyDown);

        _this.addedGlobalListener = false;
      }
    };_this.

    refContainer = function (element) {
      _this.container = element;
    };return _this;}Paging.isForward = function isForward(pageNumber) /* %checks */{return pageNumber === 'forward';};var _proto = Paging.prototype;_proto.componentDidMount = function componentDidMount() {var useGlobalListener = this.props.useGlobalListener;if (useGlobalListener) {this.addGlobalListener();}};_proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {if (this.props.useGlobalListener !== nextProps.useGlobalListener) {this.setState({ keyboardControl: nextProps.useGlobalListener });}};_proto.componentDidUpdate = function componentDidUpdate(prevProps) {if (!prevProps.useGlobalListener && this.props.useGlobalListener) {this.addGlobalListener();}if (prevProps.useGlobalListener && !this.props.useGlobalListener) {this.removeGlobalListener();}};_proto.componentWillUnmount = function componentWillUnmount() {this.removeGlobalListener();};_proto.render = function render() {var _this2 = this;return _react.default.createElement(_ThemeContext.ThemeContext.Consumer, null, function (theme) {_this2.theme = theme;return _this2.renderMain();});};_proto.renderMain = function renderMain() {return _react.default.createElement("span", { tabIndex: 0, "data-tid": "Paging__root", className: _Paging.jsStyles.paging(), onKeyDown: this.props.useGlobalListener ? undefined : this.handleKeyDown, onFocus: this.handleFocus, onBlur: this.handleBlur, onMouseDown: this.handleMouseDown, ref: this.refContainer }, this.getItems().map(this.renderItem));};return Paging;}(_react.default.Component), _class2.__KONTUR_REACT_UI__ = 'Paging', _class2.defaultProps = { component: function component(_ref) {var className = _ref.className,onClick = _ref.onClick,children = _ref.children;return _react.default.createElement("span", { className: className, onClick: onClick }, children);}, useGlobalListener: false }, _class2.propTypes = {}, _temp)) || _class);exports.Paging = Paging;


Paging.propTypes = {
  /**
                      * Current active page
                      */
  activePage: _propTypes.number.isRequired,

  /**
                                             * React component that would be used for rendering items
                                             *
                                             * Usefull for router integration
                                             */
  component: _propTypes.func,

  /**
                               * Total page count
                               */
  pagesCount: _propTypes.number.isRequired,

  /**
                                             * Calls when page has been changed
                                             */
  onPageChange: _propTypes.func.isRequired };