{"version":3,"sources":["TopBarDropdown.tsx"],"names":["TopBarDropdown","dropdownMenu","open","close","refDropdownMenu","ref","renderButton","captionProps","handleKeyDown","event","openMenu","opened","props","icon","minWidth","undefined","use","toggleMenu","label","e","isKeyEnter","isKeySpace","isKeyArrowVertical","preventDefault","render","children","React","Component","__KONTUR_REACT_UI__","defaultProps"],"mappings":"4UAAA;;AAEA;;;AAGA;;;AAGA;;;;;;;;;;;AAWA;;;;;;AAMaA,c;;;;;;;AAOHC,IAAAA,Y,GAAuC,I;;;;;;;;;;AAUxCC,IAAAA,I,GAAO,YAAY;AACxB,UAAI,MAAKD,YAAT,EAAuB;AACrB,cAAKA,YAAL,CAAkBC,IAAlB;AACD;AACF,K;;AAEMC,IAAAA,K,GAAQ,YAAY;AACzB,UAAI,MAAKF,YAAT,EAAuB;AACrB,cAAKA,YAAL,CAAkBE,KAAlB;AACD;AACF,K;;AAEOC,IAAAA,e,GAAkB,UAACC,GAAD,UAAkC,MAAKJ,YAAL,GAAoBI,GAAtD,E;;AAElBC,IAAAA,Y,GAAe,UAACC,YAAD,EAAyC;AAC9D,UAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAA6C;AACjE,cAAKD,aAAL,CAAmBC,KAAnB,EAA0BF,YAAY,CAACG,QAAvC;AACD,OAFD;;AAIA;AACE,qCAAC,kCAAD;AACE,UAAA,MAAM,EAAEH,YAAY,CAACI,MADvB;AAEE,UAAA,IAAI,EAAE,MAAKC,KAAL,CAAWC,IAFnB;AAGE,UAAA,QAAQ,EAAE,MAAKD,KAAL,CAAWE,QAAX,GAAsB,MAAKF,KAAL,CAAWE,QAAjC,GAA4CC,SAHxD;AAIE,UAAA,QAAQ,EAAE,CAJZ;AAKE,UAAA,GAAG,EAAE,MAAKH,KAAL,CAAWI,GALlB;AAME,UAAA,OAAO,EAAET,YAAY,CAACU,UANxB;AAOE,UAAA,SAAS,EAAET,aAPb;;AASG,cAAKI,KAAL,CAAWM,KATd,CADF;;;AAaD,K;;AAEOV,IAAAA,a,GAAgB,UAACW,CAAD,EAAsCT,QAAtC,EAAsF;AAC5G,UAAI,2BAASU,uBAAT,EAAqBC,uBAArB,EAAiCC,+BAAjC,EAAqDH,CAArD,CAAJ,EAA6D;AAC3DA,QAAAA,CAAC,CAACI,cAAF;AACAb,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,K,4DA/CMc,M,GAAP,kBAAgB,CACd,OACE,6BAAC,0BAAD,6BAAkB,KAAKZ,KAAvB,IAA8B,GAAG,EAAE,KAAKR,eAAxC,EAAyD,OAAO,EAAE,KAAKE,YAAvE,KACG,KAAKM,KAAL,CAAWa,QADd,CADF,CAKD,C,yBAfiCC,eAAMC,S,0CAA7B3B,c,CACG4B,mB,GAAsB,gB,CADzB5B,c,CAGG6B,Y,GAAe,EAC3Bb,GAAG,EAAE,SADsB,E","sourcesContent":["import React from 'react';\r\n\r\nimport { isKeyArrowVertical, isKeyEnter, isKeySpace, someKeys } from '../../lib/events/keyboard/identifiers';\r\nimport { Nullable } from '../../typings/utility-types';\r\nimport { IconProps } from '../../internal/icons/20px';\r\nimport { DropdownMenu, DropdownMenuProps } from '../DropdownMenu';\r\nimport { PopupMenuCaptionProps } from '../../internal/PopupMenu';\r\n\r\nimport { TopBarButtonItem } from './TopBarButtonItem';\r\n\r\nexport interface TopBarDropdownProps extends Omit<DropdownMenuProps, 'caption' | 'disableAnimations'> {\r\n  icon?: IconProps['name'];\r\n  minWidth?: string | number | null;\r\n  use: 'danger' | 'pay' | 'default';\r\n  label: React.ReactNode;\r\n  onOpen?: () => void;\r\n  onClose?: () => void;\r\n}\r\n\r\n/**\r\n * Дропдаун в топбаре\r\n *\r\n * @visibleName TopBar.Dropdown\r\n */\r\n\r\nexport class TopBarDropdown extends React.Component<TopBarDropdownProps> {\r\n  public static __KONTUR_REACT_UI__ = 'TopBarDropdown';\r\n\r\n  public static defaultProps = {\r\n    use: 'default',\r\n  };\r\n\r\n  private dropdownMenu: Nullable<DropdownMenu> = null;\r\n\r\n  public render() {\r\n    return (\r\n      <DropdownMenu {...this.props} ref={this.refDropdownMenu} caption={this.renderButton}>\r\n        {this.props.children}\r\n      </DropdownMenu>\r\n    );\r\n  }\r\n\r\n  public open = (): void => {\r\n    if (this.dropdownMenu) {\r\n      this.dropdownMenu.open();\r\n    }\r\n  };\r\n\r\n  public close = (): void => {\r\n    if (this.dropdownMenu) {\r\n      this.dropdownMenu.close();\r\n    }\r\n  };\r\n\r\n  private refDropdownMenu = (ref: Nullable<DropdownMenu>) => (this.dropdownMenu = ref);\r\n\r\n  private renderButton = (captionProps: PopupMenuCaptionProps) => {\r\n    const handleKeyDown = (event: React.KeyboardEvent<HTMLElement>) => {\r\n      this.handleKeyDown(event, captionProps.openMenu);\r\n    };\r\n\r\n    return (\r\n      <TopBarButtonItem\r\n        active={captionProps.opened}\r\n        icon={this.props.icon}\r\n        minWidth={this.props.minWidth ? this.props.minWidth : undefined}\r\n        tabIndex={0}\r\n        use={this.props.use}\r\n        onClick={captionProps.toggleMenu}\r\n        onKeyDown={handleKeyDown}\r\n      >\r\n        {this.props.label}\r\n      </TopBarButtonItem>\r\n    );\r\n  };\r\n\r\n  private handleKeyDown = (e: React.KeyboardEvent<HTMLElement>, openMenu: PopupMenuCaptionProps['openMenu']) => {\r\n    if (someKeys(isKeyEnter, isKeySpace, isKeyArrowVertical)(e)) {\r\n      e.preventDefault();\r\n      openMenu(true);\r\n    }\r\n  };\r\n}\r\n"]}