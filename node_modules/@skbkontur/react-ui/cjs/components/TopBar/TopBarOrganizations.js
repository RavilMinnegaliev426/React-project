"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.TopBarOrganizations = void 0;var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));


var _px = require("../../internal/icons/16px");

var _TopBarDropdown = require("./TopBarDropdown");
var _TopBar = require("./TopBar.styles");










/**
                                           * Дропдаун с организациями
                                           *
                                           * @visibleName TopBar.OrganizationsDropdown
                                           */var

TopBarOrganizations = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(TopBarOrganizations, _React$Component);function TopBarOrganizations() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;_this.


    state = {
      captionWhiteSpace: 'normal',
      minWidth: null };_this.


    _caption = void 0;_this.
    _comment = void 0;_this.














































    _getCaptionRef = function (element) {
      _this._caption = element;
    };_this.

    _getCommentRef = function (element) {
      _this._comment = element;
    };return _this;}var _proto = TopBarOrganizations.prototype;_proto.componentDidMount = function componentDidMount() {this._recalculateWidth();};_proto.componentDidUpdate = function componentDidUpdate(prevProps) {if (prevProps.caption !== this.props.caption) {this._recalculateWidth();}};_proto.render = function render() {var _this$props = this.props,caption = _this$props.caption,comment = _this$props.comment;var title = _react.default.createElement("div", null, _react.default.createElement("span", { className: _TopBar.jsStyles.organizationsTitle(), style: { paddingRight: this._comment ? this._comment.offsetWidth + 30 : undefined } }, _react.default.createElement("span", { ref: this._getCaptionRef }, caption), comment && _react.default.createElement("span", { className: _TopBar.jsStyles.organizationsComment(), ref: this._getCommentRef }, comment), _react.default.createElement("span", { className: _TopBar.jsStyles.organizationsArrow() }, _react.default.createElement(_px.ArrowChevronDownIcon, { color: "#aaa", size: 14 }))), _react.default.createElement("div", { className: _TopBar.jsStyles.organizationsTitleDummy(), style: { whiteSpace: this.state.captionWhiteSpace } }, _react.default.createElement("span", null, caption), comment && _react.default.createElement("span", { className: _TopBar.jsStyles.organizationsCommentDummy() }, comment)));return _react.default.createElement(_TopBarDropdown.TopBarDropdown, (0, _extends2.default)({}, this.props, { label: title, minWidth: this.state.minWidth }), this.props.children);};_proto.

  _recalculateWidth = function _recalculateWidth() {
    var commentWidth = this._comment ? this._comment.offsetWidth : 0;
    if (!this._caption) {
      return;
    }
    // 360 is minWidth from guides. Apply it when content is bigger.
    // 315 is because of 15px left padding and 30px arrow.
    if (this._caption.offsetWidth + commentWidth > 315) {
      this.setState({
        captionWhiteSpace: 'normal',
        minWidth: 360 });

    } else {
      this.setState({
        captionWhiteSpace: 'nowrap',
        minWidth: null });

    }
  };return TopBarOrganizations;}(_react.default.Component);exports.TopBarOrganizations = TopBarOrganizations;TopBarOrganizations.__KONTUR_REACT_UI__ = 'TopBarOrganizations';