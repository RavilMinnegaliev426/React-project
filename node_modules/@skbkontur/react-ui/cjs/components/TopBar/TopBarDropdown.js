"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.TopBarDropdown = void 0;var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));

var _identifiers = require("../../lib/events/keyboard/identifiers");


var _DropdownMenu = require("../DropdownMenu");


var _TopBarButtonItem = require("./TopBarButtonItem");










/**
                                                        * Дропдаун в топбаре
                                                        *
                                                        * @visibleName TopBar.Dropdown
                                                        */var

TopBarDropdown = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(TopBarDropdown, _React$Component);function TopBarDropdown() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;_this.






    dropdownMenu = null;_this.









    open = function () {
      if (_this.dropdownMenu) {
        _this.dropdownMenu.open();
      }
    };_this.

    close = function () {
      if (_this.dropdownMenu) {
        _this.dropdownMenu.close();
      }
    };_this.

    refDropdownMenu = function (ref) {return _this.dropdownMenu = ref;};_this.

    renderButton = function (captionProps) {
      var handleKeyDown = function handleKeyDown(event) {
        _this.handleKeyDown(event, captionProps.openMenu);
      };

      return (
        _react.default.createElement(_TopBarButtonItem.TopBarButtonItem, {
          active: captionProps.opened,
          icon: _this.props.icon,
          minWidth: _this.props.minWidth ? _this.props.minWidth : undefined,
          tabIndex: 0,
          use: _this.props.use,
          onClick: captionProps.toggleMenu,
          onKeyDown: handleKeyDown },

        _this.props.label));


    };_this.

    handleKeyDown = function (e, openMenu) {
      if ((0, _identifiers.someKeys)(_identifiers.isKeyEnter, _identifiers.isKeySpace, _identifiers.isKeyArrowVertical)(e)) {
        e.preventDefault();
        openMenu(true);
      }
    };return _this;}var _proto = TopBarDropdown.prototype;_proto.render = function render() {return _react.default.createElement(_DropdownMenu.DropdownMenu, (0, _extends2.default)({}, this.props, { ref: this.refDropdownMenu, caption: this.renderButton }), this.props.children);};return TopBarDropdown;}(_react.default.Component);exports.TopBarDropdown = TopBarDropdown;TopBarDropdown.__KONTUR_REACT_UI__ = 'TopBarDropdown';TopBarDropdown.defaultProps = { use: 'default' };