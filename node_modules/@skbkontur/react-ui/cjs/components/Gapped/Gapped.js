"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.Gapped = void 0;var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));

























/**
                                                                 * Контейнер, расстояние между элементами в котором равно `gap`.
                                                                 */var
Gapped = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(Gapped, _React$Component);function Gapped() {return _React$Component.apply(this, arguments) || this;}var _proto = Gapped.prototype;_proto.


























  render = function render() {
    if (this.props.vertical) {
      return this.renderVertical();
    }
    return this.renderHorizontal();
  };_proto.

  renderVertical = function renderVertical() {
    var subsequentItemStyle = {
      paddingTop: this.props.gap };

    var isFirst = true;
    var children = _react.default.Children.map(this.props.children, function (child) {
      if (!child) {
        return child;
      }
      var style = isFirst ? undefined : subsequentItemStyle;

      isFirst = false;

      return _react.default.createElement("div", { style: style }, child);
    });

    return _react.default.createElement("div", null, children);
  };_proto.

  renderHorizontal = function renderHorizontal() {var _this$props =
    this.props,gap = _this$props.gap,children = _this$props.children,verticalAlign = _this$props.verticalAlign,wrap = _this$props.wrap;
    var itemStyle = (0, _extends2.default)({
      display: 'inline-block',
      verticalAlign: verticalAlign },
    wrap ? { marginLeft: gap, marginTop: gap } : {});

    var rootStyle = wrap ? { paddingTop: 1 } : {};
    var contStyle = wrap ? { marginTop: -gap - 1, marginLeft: -gap } : { whiteSpace: 'nowrap' };

    return (
      _react.default.createElement("div", { style: rootStyle },
      _react.default.createElement("div", { style: contStyle },
      _react.default.Children.map(children, function (child, index) {
        if (!child) {
          return child;
        }
        var marginLeft = index === 0 ? undefined : gap;
        return _react.default.createElement("span", { style: (0, _extends2.default)({ marginLeft: marginLeft }, itemStyle) }, child);
      }))));



  };return Gapped;}(_react.default.Component);exports.Gapped = Gapped;Gapped.__KONTUR_REACT_UI__ = 'Gapped';Gapped.propTypes = { /**
                                                                                                                                  * Расстояние между элементами.
                                                                                                                                  */gap: _propTypes.default.number, /**
                                                                                                                                                                     * Располагать элементы вертикально.
                                                                                                                                                                     */vertical: _propTypes.default.bool, /**
                                                                                                                                                                                                           * Вертикальное выравнивание элементов.
                                                                                                                                                                                                           */verticalAlign: _propTypes.default.oneOf(['top', 'middle', 'baseline', 'bottom']) };Gapped.defaultProps = { gap: 10, wrap: false, vertical: false, verticalAlign: 'baseline' };