"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.Tabs = void 0;var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));
var _reactDom = require("react-dom");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));

var _Indicator = require("./Indicator");
var _Tabs = require("./Tabs.styles");
var _TabsContext = require("./TabsContext");
var _Tab = require("./Tab");


































/**
                              * Tabs wrapper
                              *
                              * contains static property `Tab`
                              */var
Tabs = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(Tabs, _React$Component);function Tabs() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;_this.
















    tabs =


    [];_this.

    tabUpdates = {
      on: function on(cb) {
        var index = _this.listeners.push(cb);
        return function () {
          _this.listeners.splice(index, 1);
        };
      } };_this.


    listeners = [];_this.

























    shiftFocus = function (fromTab, delta) {var _assertThisInitialize = (0, _assertThisInitialized2.default)(_this),
      tabs = _assertThisInitialize.tabs;
      var index = tabs.findIndex(function (x) {return x.id === fromTab;});
      var newIndex = Math.max(0, Math.min(index + delta, tabs.length - 1));
      var tab = tabs[newIndex];

      var tabNode = tab.getNode();
      var htmlNode = null;
      if (tabNode instanceof _react.default.Component) {
        htmlNode = (0, _reactDom.findDOMNode)(tabNode);
      }

      if (htmlNode && htmlNode instanceof HTMLElement && typeof htmlNode.focus === 'function') {
        htmlNode.focus();
      }
    };_this.

    notifyUpdate = function () {
      _this.listeners.forEach(function (cb) {return cb();});
    };_this.

    switchTab = function (id) {var _this$props =
      _this.props,onValueChange = _this$props.onValueChange,value = _this$props.value;
      if (id !== value && onValueChange) {
        onValueChange(id);
      }
    };_this.

    getTab = function (id) {var _ref =
      _this.tabs.find(function (x) {return x.id === id;}) || {},_ref$getNode = _ref.getNode,getNode = _ref$getNode === void 0 ? null : _ref$getNode;
      return getNode && getNode();
    };_this.

    addTab = function (id, getNode) {
      _this.tabs = _this.tabs.concat({ id: id, getNode: getNode });
    };_this.

    removeTab = function (id) {
      _this.tabs = _this.tabs.filter(function (tab) {return tab.id !== id;});
    };return _this;}var _proto = Tabs.prototype;_proto.render = function render() {var _this$props2 = this.props,vertical = _this$props2.vertical,value = _this$props2.value,width = _this$props2.width,children = _this$props2.children,indicatorClassName = _this$props2.indicatorClassName;return _react.default.createElement("div", { className: (0, _classnames.default)(_Tabs.jsStyles.root(), vertical && _Tabs.jsStyles.vertical()), style: { width: width } }, _react.default.createElement(_TabsContext.TabsContext.Provider, { value: { vertical: vertical, activeTab: value, getTab: this.getTab, addTab: this.addTab, removeTab: this.removeTab, notifyUpdate: this.notifyUpdate, shiftFocus: this.shiftFocus, switchTab: this.switchTab } }, children, _react.default.createElement(_Indicator.Indicator, { className: indicatorClassName, tabUpdates: this.tabUpdates, vertical: vertical })));};return Tabs;}(_react.default.Component);exports.Tabs = Tabs;Tabs.__KONTUR_REACT_UI__ = 'Tabs';Tabs.propTypes = { children: _propTypes.default.node, indicatorClassName: _propTypes.default.string, value: _propTypes.default.string.isRequired, vertical: _propTypes.default.bool, width: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]), onValueChange: _propTypes.default.func };Tabs.defaultProps = { vertical: false };Tabs.Tab = _Tab.Tab;