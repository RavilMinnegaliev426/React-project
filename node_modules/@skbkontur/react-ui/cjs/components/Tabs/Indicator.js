"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.Indicator = void 0;var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));
var _reactDom = require("react-dom");
var _lodash = _interopRequireDefault(require("lodash.throttle"));
var _classnames = _interopRequireDefault(require("classnames"));

var LayoutEvents = _interopRequireWildcard(require("../../lib/LayoutEvents"));

var _ThemeContext = require("../../lib/theming/ThemeContext");


var _Indicator = require("./Indicator.styles");
var _TabsContext = require("./TabsContext");var














Indicator = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(Indicator, _React$Component);function Indicator() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;_this.

    context = _this.context;_this.

    state = {
      styles: {} };_this.


    theme = void 0;_this.

    eventListener =

    null;_this.

    removeTabUpdatesListener = null;_this.


























































    reflow = function () {var _this$context =
      _this.context,getTab = _this$context.getTab,activeTab = _this$context.activeTab;
      var node = getTab(activeTab);
      var nodeStyles = _this.getStyles(node);
      var stylesUpdated = ['left', 'top', 'width', 'height'].some(
      function (prop) {return nodeStyles[prop] !== _this.state.styles[prop];});

      if (stylesUpdated) {
        _this.setState({ styles: nodeStyles });
      }
    };_this.

    throttledReflow = (0, _lodash.default)(_this.reflow, 100);return _this;}var _proto = Indicator.prototype;_proto.componentDidMount = function componentDidMount() {this.eventListener = LayoutEvents.addListener(this.throttledReflow);this.removeTabUpdatesListener = this.props.tabUpdates.on(this.reflow);this.reflow();};_proto.componentWillUnmount = function componentWillUnmount() {this.throttledReflow.cancel();if (this.eventListener) {this.eventListener.remove();}if (this.removeTabUpdatesListener) {this.removeTabUpdatesListener();}};_proto.componentDidUpdate = function componentDidUpdate(_, prevState) {this.reflow();};_proto.render = function render() {var _this2 = this;return _react.default.createElement(_ThemeContext.ThemeContext.Consumer, null, function (theme) {_this2.theme = theme;return _this2.renderMain();});};_proto.renderMain = function renderMain() {var _this$context2 = this.context,getTab = _this$context2.getTab,activeTab = _this$context2.activeTab;var node = getTab(activeTab);var indicators = node && node.getIndicators && node.getIndicators() || { error: false, warning: false, success: false, primary: false, disabled: false };return _react.default.createElement("div", { className: (0, _classnames.default)(_Indicator.jsStyles.root(this.theme), indicators.primary && _Indicator.jsStyles.primary(this.theme), indicators.success && _Indicator.jsStyles.success(this.theme), indicators.warning && _Indicator.jsStyles.warning(this.theme), indicators.error && _Indicator.jsStyles.error(this.theme), this.props.className), style: this.state.styles });};_proto.

  getStyles = function getStyles(node) {
    if (node instanceof _react.default.Component) {
      node = (0, _reactDom.findDOMNode)(node);
    }

    if (node instanceof HTMLElement) {
      var rect = node.getBoundingClientRect();
      if (this.props.vertical) {
        return {
          width: 3,
          left: node.offsetLeft,
          top: node.offsetTop,
          height: rect.bottom - rect.top };

      }

      return {
        left: node.offsetLeft,
        top: node.offsetHeight + node.offsetTop - 3,
        width: rect.right - rect.left };

    }

    return {};
  };return Indicator;}(_react.default.Component);exports.Indicator = Indicator;Indicator.contextType = _TabsContext.TabsContext;