import React from 'react';
import PropTypes from 'prop-types';
import { Tab } from './Tab';
export interface TabsProps {
    /**
     * Tab component should be child of Tabs component
     */
    children?: React.ReactNode;
    /**
     * Classname of indicator
     */
    indicatorClassName?: string;
    /**
     * Tabs change event
     */
    onValueChange?: (value: string) => void;
    /**
     * Active tab identifier
     */
    value: string;
    /**
     * Vertical indicator
     * @default false
     */
    vertical: boolean;
    /**
     * Width of tabs container
     */
    width?: number | string;
}
/**
 * Tabs wrapper
 *
 * contains static property `Tab`
 */
export declare class Tabs extends React.Component<TabsProps> {
    static __KONTUR_REACT_UI__: string;
    static propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        indicatorClassName: PropTypes.Requireable<string>;
        value: PropTypes.Validator<string>;
        vertical: PropTypes.Requireable<boolean>;
        width: PropTypes.Requireable<string | number>;
        onValueChange: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: {
        vertical: boolean;
    };
    static Tab: typeof Tab;
    private tabs;
    private tabUpdates;
    private listeners;
    render(): JSX.Element;
    private shiftFocus;
    private notifyUpdate;
    private switchTab;
    private getTab;
    private addTab;
    private removeTab;
}
