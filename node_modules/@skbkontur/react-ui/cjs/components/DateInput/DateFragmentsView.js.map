{"version":3,"sources":["DateFragmentsView.tsx"],"names":["DateFragmentsView","theme","rootNode","isFragment","el","fragments","Array","from","querySelectorAll","some","fragment","contains","getRootNode","rootRef","render","renderMain","jsStyles","root","props","map","index","type","InternalDateComponentType","Separator","renderSeparator","renderDateComponent","separatorClassName","mask","delimiterFilled","value","inputMode","onSelectDateComponent","selected","length","valueWithPad","valueMask","lengthMask","InternalDateValidator","testParseToNumber","Math","max","toString","handleMouseUp","e","document","activeElement","currentTarget","CHAR_MASK","repeat","React","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport cn from 'classnames';\r\n\r\nimport { CHAR_MASK } from '../../lib/date/constants';\r\nimport { InternalDateValidator } from '../../lib/date/InternalDateValidator';\r\nimport { InternalDateComponentType, InternalDateFragment } from '../../lib/date/types';\r\nimport { Theme } from '../../lib/theming/Theme';\r\nimport { ThemeContext } from '../../lib/theming/ThemeContext';\r\n\r\nimport { jsStyles } from './DateFragmentsView.styles';\r\n\r\ninterface DateFragmentViewProps {\r\n  selected: InternalDateComponentType | null;\r\n  fragments: InternalDateFragment[];\r\n  inputMode: boolean;\r\n  onSelectDateComponent: (type: InternalDateComponentType, e: React.MouseEvent<HTMLSpanElement>) => void;\r\n}\r\n\r\nexport class DateFragmentsView extends React.Component<DateFragmentViewProps, {}> {\r\n  private theme!: Theme;\r\n  private rootNode: HTMLSpanElement | null = null;\r\n\r\n  public isFragment = (el: HTMLElement | EventTarget): boolean => {\r\n    if (this.rootNode) {\r\n      // NOTE: NodeList doesn't support method 'forEach' in IE11\r\n      const fragments: HTMLSpanElement[] = Array.from(this.rootNode.querySelectorAll('[data-fragment]'));\r\n      return fragments.some(fragment => fragment === el || fragment.contains(el as HTMLSpanElement));\r\n    }\r\n    return false;\r\n  };\r\n\r\n  public getRootNode = () => this.rootNode;\r\n\r\n  public render() {\r\n    return (\r\n      <ThemeContext.Consumer>\r\n        {theme => {\r\n          this.theme = theme;\r\n          return this.renderMain();\r\n        }}\r\n      </ThemeContext.Consumer>\r\n    );\r\n  }\r\n\r\n  private renderMain() {\r\n    return (\r\n      <span ref={this.rootRef} className={jsStyles.root(this.theme)}>\r\n        {this.props.fragments.map((fragment, index) =>\r\n          fragment.type === InternalDateComponentType.Separator\r\n            ? this.renderSeparator(fragment, index)\r\n            : this.renderDateComponent(fragment, index),\r\n        )}\r\n      </span>\r\n    );\r\n  }\r\n\r\n  private renderSeparator(fragment: InternalDateFragment, index: number): JSX.Element {\r\n    const separatorClassName = cn({\r\n      [jsStyles.mask(this.theme)]: true,\r\n      [jsStyles.delimiterFilled()]: this.props.fragments[index + 1].value !== null,\r\n    });\r\n\r\n    return (\r\n      <span key={index} className={separatorClassName}>\r\n        {fragment.value}\r\n      </span>\r\n    );\r\n  }\r\n\r\n  private renderDateComponent(fragment: InternalDateFragment, index: number): JSX.Element {\r\n    const { inputMode, onSelectDateComponent, selected } = this.props;\r\n    const { type, value, length, valueWithPad } = fragment;\r\n\r\n    const valueMask = value === null || (selected === type && inputMode) ? value : valueWithPad || value;\r\n    const lengthMask = InternalDateValidator.testParseToNumber(valueMask)\r\n      ? Math.max(length - valueMask!.toString().length, 0)\r\n      : length;\r\n\r\n    const handleMouseUp = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n      if (document.activeElement && document.activeElement.contains(e.currentTarget)) {\r\n        onSelectDateComponent(type, e);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <span key={index} data-fragment=\"\" onMouseUp={handleMouseUp}>\r\n        {valueMask}\r\n        <span className={jsStyles.mask(this.theme)}>{CHAR_MASK.repeat(lengthMask)}</span>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  private rootRef = (el: HTMLSpanElement | null) => {\r\n    this.rootNode = el;\r\n  };\r\n}\r\n"]}