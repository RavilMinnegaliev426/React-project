import { InternalDate } from '../../../lib/date/InternalDate';
import { InternalDateComponentType, InternalDateTypesOrder } from '../../../lib/date/types';
import { DatePickerLocale } from '../../DatePicker/locale';
import { DateInputProps } from '../DateInput';
export declare class InternalDateMediator {
    iDate: InternalDate;
    update: (props: DateInputProps, locale: DatePickerLocale) => InternalDateMediator;
    inputKey(key: string, type: InternalDateComponentType | null, inputMode: boolean): boolean;
    paste: (pasted: string) => InternalDateMediator;
    restore: () => boolean;
    shiftDateComponent(type: InternalDateComponentType | null, step: number): boolean;
    getShiftedType(type: InternalDateComponentType | null, step: number): InternalDateComponentType | null;
    getFragments: () => import("../../../lib/date/types").InternalDateFragment[];
    deleteOneCharRight: (type: InternalDateComponentType, inputMode: boolean) => void;
    isChangedLocale: (locale: DatePickerLocale) => boolean;
    isNull: (type: InternalDateComponentType | null) => boolean;
    isEmpty: () => boolean;
    get: (type: InternalDateComponentType | null) => string | number | null;
    clear: (type: InternalDateComponentType | null) => InternalDate;
    validateString: (value: string) => boolean;
    getString: () => string;
    getInternalString: () => string;
    getTypesOrder: () => InternalDateTypesOrder;
    getLeftmostType: () => InternalDateComponentType;
    getRightmostType: () => InternalDateComponentType;
}
