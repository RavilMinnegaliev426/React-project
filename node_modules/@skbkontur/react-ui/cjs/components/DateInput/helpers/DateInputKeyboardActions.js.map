{"version":3,"sources":["DateInputKeyboardActions.tsx"],"names":["delimiters","e","RegExp","SEPARATOR","test","key","Keyboard","isKeySpace","isCodeMinus","isCodeComma","isCodePeriod","isCodeSlash","isCodeBackslash","isCodeIntlBackslash","isCodeNumpadDecimal","isCodeNumpadDivide","isCodeNumpadSubtract","Actions","extractAction","KeyboardActionExctracterBuilder","add","PasteValue","isShortcutPaste","CopyValue","isShortcutCopy","FullSelection","isShortcutSelectAll","Ignore","someKeys","isModified","isKeyFs","isKeyTab","MoveSelectionLeft","isKeyArrowLeft","MoveSelectionRight","isKeyArrowRight","MoveSelectionFirst","isKeyHome","MoveSelectionLast","isKeyEnd","Separator","Increment","isKeyArrowUp","Decrement","isKeyArrowDown","ClearSelection","isKeyDelete","ClearOneChar","isKeyBackspace","Digit","isKeyNumber","WrongInput","build","Unknown"],"mappings":";;;AAGA;AACA;AACA,2E,CALA;;AAOA,IAAMA,UAAU,GAAG;AACjB,UAACC,CAAD,UAAyD,IAAIC,MAAJ,CAAWC,oBAAX,EAAsBC,IAAtB,CAA2BH,CAAC,CAACI,GAA7B,CAAzD,EADiB;AAEjBC,QAAQ,CAACC,UAFQ;AAGjBD,QAAQ,CAACE,WAHQ;AAIjBF,QAAQ,CAACG,WAJQ;AAKjBH,QAAQ,CAACI,YALQ;AAMjBJ,QAAQ,CAACK,WANQ;AAOjBL,QAAQ,CAACM,eAPQ;AAQjBN,QAAQ,CAACO,mBARQ;AASjBP,QAAQ,CAACQ,mBATQ;AAUjBR,QAAQ,CAACS,kBAVQ;AAWjBT,QAAQ,CAACU,oBAXQ,CAAnB,C;;;AAcYC,O,sCAAAA,O,GAAAA,O,CAAAA,O,6BAAAA,O,CAAAA,O,2BAAAA,O,CAAAA,O,iDAAAA,O,CAAAA,O,mDAAAA,O,CAAAA,O,mDAAAA,O,CAAAA,O,iDAAAA,O,CAAAA,O,iCAAAA,O,CAAAA,O,iCAAAA,O,CAAAA,O,yCAAAA,O,CAAAA,O,2CAAAA,O,CAAAA,O,wCAAAA,O,CAAAA,O,0BAAAA,O,CAAAA,O,kCAAAA,O,CAAAA,O,oCAAAA,O,CAAAA,O,oCAAAA,O,CAAAA,O,qCAAAA,O,uBAAAA,O;;;;;;;;;;;;;;;;;;;AAmBZ,IAAMC,aAAa,GAAG,IAAIC,sDAAJ;AACnBC,GADmB,CACfH,OAAO,CAACI,UADO,EACKf,QAAQ,CAACgB,eADd;AAEnBF,GAFmB,CAEfH,OAAO,CAACM,SAFO,EAEIjB,QAAQ,CAACkB,cAFb;AAGnBJ,GAHmB,CAGfH,OAAO,CAACQ,aAHO,EAGQnB,QAAQ,CAACoB,mBAHjB;AAInBN,GAJmB,CAIfH,OAAO,CAACU,MAJO,EAICrB,QAAQ,CAACsB,QAAT,CAAkBtB,QAAQ,CAACuB,UAAT,EAAlB,EAAyCvB,QAAQ,CAACwB,OAAlD,EAA2DxB,QAAQ,CAACyB,QAApE,CAJD;AAKnBX,GALmB,CAKfH,OAAO,CAACe,iBALO,EAKY1B,QAAQ,CAAC2B,cALrB;AAMnBb,GANmB,CAMfH,OAAO,CAACiB,kBANO,EAMa5B,QAAQ,CAAC6B,eANtB;AAOnBf,GAPmB,CAOfH,OAAO,CAACmB,kBAPO,EAOa9B,QAAQ,CAAC+B,SAPtB;AAQnBjB,GARmB,CAQfH,OAAO,CAACqB,iBARO,EAQYhC,QAAQ,CAACiC,QARrB;AASnBnB,GATmB,CASfH,OAAO,CAACuB,SATO,EASIlC,QAAQ,CAACsB,QAAT,OAAAtB,QAAQ,EAAaN,UAAb,CATZ;AAUnBoB,GAVmB,CAUfH,OAAO,CAACwB,SAVO,EAUInC,QAAQ,CAACoC,YAVb;AAWnBtB,GAXmB,CAWfH,OAAO,CAAC0B,SAXO,EAWIrC,QAAQ,CAACsC,cAXb;AAYnBxB,GAZmB,CAYfH,OAAO,CAAC4B,cAZO,EAYS,UAAA5C,CAAC,UAAIK,QAAQ,CAACwC,WAAT,CAAqB7C,CAArB,CAAJ,EAZV;AAanBmB,GAbmB,CAafH,OAAO,CAAC8B,YAbO,EAaOzC,QAAQ,CAAC0C,cAbhB;AAcnB5B,GAdmB,CAcfH,OAAO,CAACgC,KAdO,EAcA3C,QAAQ,CAAC4C,WAdT;AAenB9B,GAfmB,CAefH,OAAO,CAACkC,UAfO,EAeK,UAAAlD,CAAC,UAAI,CAACK,QAAQ,CAAC4C,WAAT,CAAqBjD,CAArB,CAAL,EAfN;AAgBnBmD,KAhBmB,CAgBbnC,OAAO,CAACoC,OAhBK,CAAtB,C","sourcesContent":["// @ts-ignore noUnusedVar\r\nimport React from 'react';\r\n\r\nimport { SEPARATOR } from '../../../lib/date/constants';\r\nimport * as Keyboard from '../../../lib/events/keyboard/identifiers';\r\nimport { KeyboardActionExctracterBuilder } from '../../../lib/extractKeyboardAction';\r\n\r\nconst delimiters = [\r\n  (e: React.KeyboardEvent<HTMLElement> | KeyboardEvent) => new RegExp(SEPARATOR).test(e.key),\r\n  Keyboard.isKeySpace,\r\n  Keyboard.isCodeMinus,\r\n  Keyboard.isCodeComma,\r\n  Keyboard.isCodePeriod,\r\n  Keyboard.isCodeSlash,\r\n  Keyboard.isCodeBackslash,\r\n  Keyboard.isCodeIntlBackslash,\r\n  Keyboard.isCodeNumpadDecimal,\r\n  Keyboard.isCodeNumpadDivide,\r\n  Keyboard.isCodeNumpadSubtract,\r\n];\r\n\r\nexport enum Actions {\r\n  Unknown,\r\n  Ignore,\r\n  MoveSelectionLeft,\r\n  MoveSelectionRight,\r\n  MoveSelectionFirst,\r\n  MoveSelectionLast,\r\n  Decrement,\r\n  Increment,\r\n  FullSelection,\r\n  ClearSelection,\r\n  ClearOneChar,\r\n  Digit,\r\n  Separator,\r\n  WrongInput,\r\n  PasteValue,\r\n  CopyValue,\r\n}\r\n\r\nconst extractAction = new KeyboardActionExctracterBuilder<Actions>()\r\n  .add(Actions.PasteValue, Keyboard.isShortcutPaste)\r\n  .add(Actions.CopyValue, Keyboard.isShortcutCopy)\r\n  .add(Actions.FullSelection, Keyboard.isShortcutSelectAll)\r\n  .add(Actions.Ignore, Keyboard.someKeys(Keyboard.isModified(), Keyboard.isKeyFs, Keyboard.isKeyTab))\r\n  .add(Actions.MoveSelectionLeft, Keyboard.isKeyArrowLeft)\r\n  .add(Actions.MoveSelectionRight, Keyboard.isKeyArrowRight)\r\n  .add(Actions.MoveSelectionFirst, Keyboard.isKeyHome)\r\n  .add(Actions.MoveSelectionLast, Keyboard.isKeyEnd)\r\n  .add(Actions.Separator, Keyboard.someKeys(...delimiters))\r\n  .add(Actions.Increment, Keyboard.isKeyArrowUp)\r\n  .add(Actions.Decrement, Keyboard.isKeyArrowDown)\r\n  .add(Actions.ClearSelection, e => Keyboard.isKeyDelete(e))\r\n  .add(Actions.ClearOneChar, Keyboard.isKeyBackspace)\r\n  .add(Actions.Digit, Keyboard.isKeyNumber)\r\n  .add(Actions.WrongInput, e => !Keyboard.isKeyNumber(e))\r\n  .build(Actions.Unknown);\r\n\r\nexport { extractAction };\r\n"]}