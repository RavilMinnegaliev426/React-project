{"version":3,"sources":["inputNumber.tsx"],"names":["inputNumber","type","prev","key","inputMode","nextInputMode","nextValue","first","length","LENGTH_YEAR","InternalDateComponentType","Month","LENGTH_MONTH","Date","LENGTH_DATE","Number","slice"],"mappings":"oEAAA;AACA;;AAEO,IAAMA,WAAW,GAAG,SAAdA,WAAc;AACzBC,IADyB;AAEzBC,IAFyB;AAGzBC,GAHyB;AAIzBC,SAJyB;AAK2C;AACpE,MAAIC,aAAa,GAAG,KAApB;AACA,MAAIC,SAAJ;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,MAAc,GAAGC,sBAArB;AACA,MAAIR,IAAI,KAAKS,iCAA0BC,KAAvC,EAA8C;AAC5CJ,IAAAA,KAAK,GAAG,CAAR;AACAC,IAAAA,MAAM,GAAGI,uBAAT;AACD;AACD,MAAIX,IAAI,KAAKS,iCAA0BG,IAAvC,EAA6C;AAC3CN,IAAAA,KAAK,GAAG,CAAR;AACAC,IAAAA,MAAM,GAAGM,sBAAT;AACD;AACD,MAAI,CAACV,SAAL,EAAgB;AACdE,IAAAA,SAAS,GAAGH,GAAZ;AACAE,IAAAA,aAAa,GAAGU,MAAM,CAACZ,GAAD,CAAN,IAAeI,KAA/B;AACD,GAHD,MAGO;AACLD,IAAAA,SAAS,GAAG,OAAGJ,IAAI,KAAK,IAAT,GAAgB,EAAhB,GAAqBA,IAAxB,IAA+BC,GAA/B,EAAqCa,KAArC,CAA2C,CAACR,MAA5C,CAAZ;AACAH,IAAAA,aAAa,GAAGC,SAAS,CAACE,MAAV,GAAmBA,MAAnC;AACD;AACD,SAAO,EAAEF,SAAS,EAATA,SAAF,EAAaD,aAAa,EAAbA,aAAb,EAAP;AACD,CA1BM,C","sourcesContent":["import { LENGTH_DATE, LENGTH_MONTH, LENGTH_YEAR } from '../../../lib/date/constants';\r\nimport { InternalDateComponentRaw, InternalDateComponentType } from '../../../lib/date/types';\r\n\r\nexport const inputNumber = (\r\n  type: InternalDateComponentType | null,\r\n  prev: InternalDateComponentRaw,\r\n  key: string,\r\n  inputMode: boolean,\r\n): { nextValue: InternalDateComponentRaw; nextInputMode: boolean } => {\r\n  let nextInputMode = false;\r\n  let nextValue: string;\r\n  let first = 10;\r\n  let length: number = LENGTH_YEAR;\r\n  if (type === InternalDateComponentType.Month) {\r\n    first = 1;\r\n    length = LENGTH_MONTH;\r\n  }\r\n  if (type === InternalDateComponentType.Date) {\r\n    first = 3;\r\n    length = LENGTH_DATE;\r\n  }\r\n  if (!inputMode) {\r\n    nextValue = key;\r\n    nextInputMode = Number(key) <= first;\r\n  } else {\r\n    nextValue = `${prev === null ? '' : prev}${key}`.slice(-length);\r\n    nextInputMode = nextValue.length < length;\r\n  }\r\n  return { nextValue, nextInputMode };\r\n};\r\n"]}