{"version":3,"sources":["Textarea.tsx"],"names":["DEFAULT_WIDTH","Textarea","state","polyfillPlaceholder","rows","theme","node","fakeNode","layoutEvents","setSelectionRange","start","end","Error","document","activeElement","focus","selectAll","value","length","handleKeyDown","e","props","undefined","toString","isBlockEnter","maxLength","preventDefault","onKeyDown","handleChange","fieldIsEmpty","target","setState","onValueChange","autoResize","onChange","ref","element","refFake","maxRows","parseInt","height","exceededMaxHeight","style","overflowY","handleCut","event","onPaste","handlePaste","onCut","handleFocus","selectAllOnFocus","onFocus","componentDidMount","LayoutEvents","addListener","componentWillUnmount","remove","componentDidUpdate","prevProps","render","renderMain","blur","width","error","warning","resize","className","placeholder","textareaProps","rootProps","textareaClassNames","jsStyles","textarea","textAreaStyle","placeholderPolyfill","fakeTextarea","fakeProps","defaultValue","fake","readOnly","root","React","Component","__KONTUR_REACT_UI__","propTypes","PropTypes","bool","disabled","oneOfType","string","number","id","name","title","spellCheck","role","tabIndex","func","onMouseEnter","onMouseLeave","onMouseOver","onMouseMove","onMouseOut","onMouseUp","onMouseDown","onClick","onDoubleClick","onKeyPress","onKeyUp","onInput","onBlur","onScroll","onWheel","onCopy","defaultProps"],"mappings":"yhBAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA,IAAMA,aAAa,GAAG,GAAtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;;;;;;;AAOaC,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DJC,IAAAA,K,GAAQ;AACbC,MAAAA,mBAAmB,EAAnBA,wCADa;AAEbC,MAAAA,IAAI,EAAE,CAFO,E;;;AAKPC,IAAAA,K;AACAC,IAAAA,I;AACAC,IAAAA,Q;AACAC,IAAAA,Y;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDDC,IAAAA,iB,GAAoB,UAACC,KAAD,EAAgBC,GAAhB,EAAgC;AACzD,UAAI,CAAC,MAAKL,IAAV,EAAgB;AACd,cAAM,IAAIM,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,UAAIC,QAAQ,CAACC,aAAT,KAA2B,MAAKR,IAApC,EAA0C;AACxC,cAAKS,KAAL;AACD;;AAED,YAAKT,IAAL,CAAUG,iBAAV,CAA4BC,KAA5B,EAAmCC,GAAnC;AACD,K;;;;;AAKMK,IAAAA,S,GAAY,YAAM;AACvB,UAAI,MAAKV,IAAT,EAAe;AACb,cAAKG,iBAAL,CAAuB,CAAvB,EAA0B,MAAKH,IAAL,CAAUW,KAAV,CAAgBC,MAA1C;AACD;AACF,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EOC,IAAAA,a,GAAgB,UAACC,CAAD,EAAiD;AACvE;AACA;AACA,UAAMH,KAAK,GAAG,MAAKI,KAAL,CAAWJ,KAAX,KAAqBK,SAArB,GAAiC,MAAKD,KAAL,CAAWJ,KAAX,CAAiBM,QAAjB,EAAjC,GAA+D,IAA7E;AACA,UAAMC,YAAY,GAAG,6BAAWJ,CAAX,KAAiBH,KAAK,KAAK,IAA3B,IAAmCA,KAAK,CAACC,MAAN,KAAiB,MAAKG,KAAL,CAAWI,SAApF;;AAEA,UAAID,YAAJ,EAAkB;AAChBJ,QAAAA,CAAC,CAACM,cAAF;AACD;;AAED,UAAI,MAAKL,KAAL,CAAWM,SAAf,EAA0B;AACxB,cAAKN,KAAL,CAAWM,SAAX,CAAqBP,CAArB;AACD;AACF,K;;AAEOQ,IAAAA,Y,GAAe,UAACR,CAAD,EAA+C;AACpE,UAAIjB,wCAAJ,EAAyB;AACvB,YAAM0B,YAAY,GAAGT,CAAC,CAACU,MAAF,CAASb,KAAT,KAAmB,EAAxC;;AAEA,YAAI,MAAKf,KAAL,CAAWC,mBAAX,KAAmC0B,YAAvC,EAAqD;AACnD,gBAAKE,QAAL,CAAc,EAAE5B,mBAAmB,EAAE0B,YAAvB,EAAd;AACD;AACF;;AAED,UAAI,MAAKR,KAAL,CAAWW,aAAf,EAA8B;AAC5B,cAAKX,KAAL,CAAWW,aAAX,CAAyBZ,CAAC,CAACU,MAAF,CAASb,KAAlC;AACD;;AAED,UAAI,MAAKI,KAAL,CAAWY,UAAf,EAA2B;AACzB,cAAKA,UAAL;AACD;;AAED,UAAI,MAAKZ,KAAL,CAAWa,QAAf,EAAyB;AACvB,cAAKb,KAAL,CAAWa,QAAX,CAAoBd,CAApB;AACD;AACF,K;;AAEOe,IAAAA,G,GAAM,UAACC,OAAD,EAAkC;AAC9C,YAAK9B,IAAL,GAAY8B,OAAZ;AACD,K;;AAEOC,IAAAA,O,GAAU,UAACD,OAAD,EAAkC;AAClD,YAAK7B,QAAL,GAAgB6B,OAAhB;AACD,K;;AAEOH,IAAAA,U,GAAa,qBAAS,YAAM;AAClC,UAAM1B,QAAQ,GAAG,MAAKA,QAAtB;AACA,UAAI,CAACA,QAAL,EAAe;AACb;AACD;AACD,UAAMD,IAAI,GAAG,MAAKA,IAAlB;AACA,UAAI,CAACA,IAAL,EAAW;AACT;AACD;AACD,UAAI,MAAKe,KAAL,CAAWJ,KAAX,KAAqBK,SAAzB,EAAoC;AAClCf,QAAAA,QAAQ,CAACU,KAAT,GAAiBX,IAAI,CAACW,KAAtB;AACD,OAXiC;;AAaR,YAAKI,KAbG,CAa1BjB,IAb0B,eAa1BA,IAb0B,CAapBkC,OAboB,eAapBA,OAboB;AAclC,UAAIlC,IAAI,KAAKkB,SAAT,IAAsBgB,OAAO,KAAKhB,SAAtC,EAAiD;AAC/C;AACD,OAhBiC;AAiBI;AACpCf,MAAAA,QADoC;AAEpC,aAAOH,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCmC,QAAQ,CAACnC,IAAD,EAAO,EAAP,CAFN;AAGpC,aAAOkC,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwCC,QAAQ,CAACD,OAAD,EAAU,EAAV,CAHZ,CAjBJ,CAiB1BE,MAjB0B,sBAiB1BA,MAjB0B,CAiBlBC,iBAjBkB,sBAiBlBA,iBAjBkB;;AAsBlCnC,MAAAA,IAAI,CAACoC,KAAL,CAAWF,MAAX,GAAoBA,MAAM,GAAG,IAA7B;AACAlC,MAAAA,IAAI,CAACoC,KAAL,CAAWC,SAAX,GAAuBF,iBAAiB,GAAG,QAAH,GAAc,QAAtD;AACAlC,MAAAA,QAAQ,CAACmC,KAAT,CAAeC,SAAf,GAA2BF,iBAAiB,GAAG,QAAH,GAAc,QAA1D;AACD,KAzBoB,EAyBlB,GAzBkB,C;;AA2BbG,IAAAA,S,GAAY,UAACC,KAAD,EAAsD;AACxE,UAAI,MAAKxB,KAAL,CAAWY,UAAf,EAA2B;AACzB,cAAKA,UAAL;AACD;;AAED,UAAI,MAAKZ,KAAL,CAAWyB,OAAf,EAAwB;AACtB,cAAKzB,KAAL,CAAWyB,OAAX,CAAmBD,KAAnB;AACD;AACF,K;;AAEOE,IAAAA,W,GAAc,UAACF,KAAD,EAAsD;AAC1E,UAAI,MAAKxB,KAAL,CAAWY,UAAf,EAA2B;AACzB,cAAKA,UAAL;AACD;;AAED,UAAI,MAAKZ,KAAL,CAAW2B,KAAf,EAAsB;AACpB,cAAK3B,KAAL,CAAW2B,KAAX,CAAiBH,KAAjB;AACD;AACF,K;;AAEOI,IAAAA,W,GAAc,UAACJ,KAAD,EAAkD;AACtE,UAAI,MAAKxB,KAAL,CAAW6B,gBAAf,EAAiC;AAC/B,cAAKlC,SAAL;AACD;;AAED,UAAI,MAAKK,KAAL,CAAW8B,OAAf,EAAwB;AACtB,cAAK9B,KAAL,CAAW8B,OAAX,CAAmBN,KAAnB;AACD;AACF,K,sDApPMO,iB,GAAP,6BAA2B,CACzB,IAAI,KAAK/B,KAAL,CAAWY,UAAf,EAA2B,CACzB,KAAKA,UAAL,GACA,KAAKzB,YAAL,GAAoB6C,YAAY,CAACC,WAAb,CAAyB,KAAKrB,UAA9B,CAApB,CACD,CACF,C,QAEMsB,oB,GAAP,gCAA8B,CAC5B,IAAI,KAAK/C,YAAT,EAAuB,CACrB,KAAKA,YAAL,CAAkBgD,MAAlB,GACD,CACF,C,QAEMC,kB,GAAP,4BAA0BC,SAA1B,EAAoD,CAClD,IAAK,KAAKrC,KAAL,CAAWY,UAAX,IAAyB,KAAKZ,KAAL,CAAWjB,IAAX,GAAkB,KAAKF,KAAL,CAAWE,IAAvD,IAAgE,KAAKiB,KAAL,CAAWJ,KAAX,KAAqByC,SAAS,CAACzC,KAAnG,EAA0G,CACxG,KAAKgB,UAAL,GACD,CACF,C,QAEM0B,M,GAAP,kBAAgB,mBACd,OACE,6BAAC,0BAAD,CAAc,QAAd,QACG,UAAAtD,KAAK,EAAI,CACR,MAAI,CAACA,KAAL,GAAaA,KAAb,CACA,OAAO,MAAI,CAACuD,UAAL,EAAP,CACD,CAJH,CADF,CAQD,C,CAED;;yuBAGO7C,K,GAAP,iBAAe,CACb,IAAI,KAAKT,IAAT,EAAe,CACb,KAAKA,IAAL,CAAUS,KAAV,GACD,CACF,C,CAED;;mzBAGO8C,I,GAAP,gBAAc,CACZ,IAAI,KAAKvD,IAAT,EAAe,CACb,KAAKA,IAAL,CAAUuD,IAAV,GACD,CACF,C,CAED;;03BAwBQD,U,GAAR,sBAAqB,4BAiBf,KAAKvC,KAjBU,mCAEjByC,KAFiB,CAEjBA,KAFiB,mCAET9D,aAFS,sBAGjB+D,KAHiB,gBAGjBA,KAHiB,CAIjBC,OAJiB,gBAIjBA,OAJiB,CAKjB/B,UALiB,gBAKjBA,UALiB,CAMjBgC,MANiB,gBAMjBA,MANiB,CAOjBjB,KAPiB,gBAOjBA,KAPiB,CAQjBF,OARiB,gBAQjBA,OARiB,CASjBR,OATiB,gBASjBA,OATiB,CAUjBa,OAViB,gBAUjBA,OAViB,CAWjBD,gBAXiB,gBAWjBA,gBAXiB,CAYjBgB,SAZiB,gBAYjBA,SAZiB,CAajBxB,KAbiB,gBAajBA,KAbiB,CAcjByB,WAdiB,gBAcjBA,WAdiB,CAejBnC,aAfiB,gBAejBA,aAfiB,CAgBdoC,aAhBc,wOAmBnB,IAAMC,SAAS,GAAG,EAChB3B,KAAK,EAAE,EACLoB,KAAK,EAALA,KADK,EADS,EAAlB,CAMA,IAAMQ,kBAAkB,GAAG,wCACxBC,mBAASC,QAAT,CAAkB,KAAKnE,KAAvB,CADwB,IACQ,IADR,MAExBkE,mBAASR,KAAT,CAAe,KAAK1D,KAApB,CAFwB,IAEK,CAAC,CAAC0D,KAFP,MAGxBQ,mBAASP,OAAT,CAAiB,KAAK3D,KAAtB,CAHwB,IAGO,CAAC,CAAC2D,OAHT,OAA3B,CAMA,IAAMS,aAAa,GAAG,EACpBR,MAAM,EAAEhC,UAAU,GAAG,MAAH,GAAYgC,MADV,EAAtB,CAIA,IAAIS,mBAAmB,GAAG,IAA1B,CAEA,IAAI,KAAKxE,KAAL,CAAWC,mBAAX,IAAkC,CAACiE,aAAa,CAACnD,KAArD,EAA4D,CAC1DyD,mBAAmB,GAAG,uCAAM,SAAS,EAAEH,mBAASJ,WAAT,EAAjB,IAA0CA,WAA1C,CAAtB,CACD,CAED,IAAIQ,YAAY,GAAG,IAAnB,CACA,IAAI1C,UAAJ,EAAgB,CACd,IAAM2C,SAAS,GAAG,EAChB3D,KAAK,EAAE,KAAKI,KAAL,CAAWJ,KADF,EAEhB4D,YAAY,EAAE,KAAKxD,KAAL,CAAWwD,YAFT,EAGhBX,SAAS,EAAE,yBAAGI,kBAAH,EAAuBC,mBAASO,IAAT,EAAvB,CAHK,EAIhBC,QAAQ,EAAE,IAJM,EAAlB,CAMAJ,YAAY,GAAG,oEAAcC,SAAd,IAAyB,GAAG,EAAE,KAAKvC,OAAnC,IAAf,CACD,CAED,OACE,iEAAWgC,SAAX,IAAsB,SAAS,EAAEE,mBAASS,IAAT,CAAc,KAAK3E,KAAnB,CAAjC,KACGqE,mBADH,EAEE,oEACMN,aADN,IAEE,SAAS,EAAEE,kBAFb,EAGE,KAAK,EAAEG,aAHT,EAIE,WAAW,EAAE,CAACC,mBAAD,GAAuBP,WAAvB,GAAqC7C,SAJpD,EAKE,GAAG,EAAE,KAAKa,GALZ,EAME,QAAQ,EAAE,KAAKP,YANjB,EAOE,KAAK,EAAE,KAAKgB,SAPd,EAQE,OAAO,EAAE,KAAKG,WARhB,EASE,OAAO,EAAE,KAAKE,WAThB,EAUE,SAAS,EAAE,KAAK9B,aAVlB,IAFF,EAcGwD,YAdH,CADF,CAkBD,C,mBApN2BM,eAAMC,S,8BAAvBjF,Q,CACGkF,mB,GAAsB,U,CADzBlF,Q,CAGGmF,S,GAAY,EACxBrB,KAAK,EAAEsB,mBAAUC,IADO,EAExBtB,OAAO,EAAEqB,mBAAUC,IAFK,EAGxBC,QAAQ,EAAEF,mBAAUC,IAHI,EAKxBrD,UAAU,EAAEoD,mBAAUC,IALE,EAMxBhD,OAAO,EAAE+C,mBAAUG,SAAV,CAAoB,CAACH,mBAAUI,MAAX,EAAmBJ,mBAAUK,MAA7B,CAApB,CANe,EAQxBzB,MAAM,EAAEoB,mBAAUG,SAAV,CAAoB,CAACH,mBAAUI,MAAX,EAAmBJ,mBAAUK,MAA7B,CAApB,CARgB,EASxB5B,KAAK,EAAEuB,mBAAUG,SAAV,CAAoB,CAACH,mBAAUI,MAAX,EAAmBJ,mBAAUK,MAA7B,CAApB,CATiB,EAWxBC,EAAE,EAAEN,mBAAUI,MAXU,EAYxBG,IAAI,EAAEP,mBAAUI,MAZQ,EAaxBI,KAAK,EAAER,mBAAUI,MAbO,EAcxBK,UAAU,EAAET,mBAAUC,IAdE,EAexBS,IAAI,EAAEV,mBAAUI,MAfQ,EAgBxBhE,SAAS,EAAE4D,mBAAUK,MAhBG,EAiBxBM,QAAQ,EAAEX,mBAAUK,MAjBI,EAkBxBtF,IAAI,EAAEiF,mBAAUK,MAlBQ,EAmBxBvB,WAAW,EAAEkB,mBAAUI,MAnBC,EAqBxBxE,KAAK,EAAEoE,mBAAUI,MArBO,EAsBxBZ,YAAY,EAAEQ,mBAAUI,MAtBA,EAuBxBzD,aAAa,EAAEqD,mBAAUY,IAvBD,EAyBxBC,YAAY,EAAEb,mBAAUY,IAzBA,EA0BxBE,YAAY,EAAEd,mBAAUY,IA1BA,EA2BxBG,WAAW,EAAEf,mBAAUY,IA3BC,EA4BxBI,WAAW,EAAEhB,mBAAUY,IA5BC,EA6BxBK,UAAU,EAAEjB,mBAAUY,IA7BE,EA+BxBM,SAAS,EAAElB,mBAAUY,IA/BG,EAgCxBO,WAAW,EAAEnB,mBAAUY,IAhCC,EAiCxBQ,OAAO,EAAEpB,mBAAUY,IAjCK,EAkCxBS,aAAa,EAAErB,mBAAUY,IAlCD,EAoCxBtE,SAAS,EAAE0D,mBAAUY,IApCG,EAqCxBU,UAAU,EAAEtB,mBAAUY,IArCE,EAsCxBW,OAAO,EAAEvB,mBAAUY,IAtCK,EAuCxBY,OAAO,EAAExB,mBAAUY,IAvCK,EAyCxB9C,OAAO,EAAEkC,mBAAUY,IAzCK,EA0CxBa,MAAM,EAAEzB,mBAAUY,IA1CM,EA4CxBc,QAAQ,EAAE1B,mBAAUY,IA5CI,EA6CxBe,OAAO,EAAE3B,mBAAUY,IA7CK,EA+CxBjD,KAAK,EAAEqC,mBAAUY,IA/CO,EAgDxBnD,OAAO,EAAEuC,mBAAUY,IAhDK,EAiDxBgB,MAAM,EAAE5B,mBAAUY,IAjDM,E,CAHfhG,Q,CAuDGiH,Y,GAAe,EAC3B9G,IAAI,EAAE,CADqB,EAE3BkC,OAAO,EAAE,EAFkB,E","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport throttle from 'lodash.throttle';\r\nimport cn from 'classnames';\r\n\r\nimport { isKeyEnter } from '../../lib/events/keyboard/identifiers';\r\nimport { polyfillPlaceholder } from '../../lib/polyfillPlaceholder';\r\nimport * as LayoutEvents from '../../lib/LayoutEvents';\r\nimport { Nullable, Override } from '../../typings/utility-types';\r\nimport { ThemeContext } from '../../lib/theming/ThemeContext';\r\nimport { Theme } from '../../lib/theming/Theme';\r\n\r\nimport { getTextAreaHeight } from './TextareaHelpers';\r\nimport { jsStyles } from './Textarea.styles';\r\n\r\nconst DEFAULT_WIDTH = 250;\r\n\r\nexport type TextareaProps = Override<\r\n  React.TextareaHTMLAttributes<HTMLTextAreaElement>,\r\n  {\r\n    /** Ошибка */\r\n    error?: boolean;\r\n    /** Предупреждение */\r\n    warning?: boolean;\r\n    /** Не активное состояние */\r\n    disabled?: boolean;\r\n\r\n    /**\r\n     * Атоматический ресайз\r\n     * в зависимости от содержимого\r\n     */\r\n    autoResize?: boolean;\r\n    /**\r\n     * Число строк\r\n     */\r\n    rows: number;\r\n    /**\r\n     * Максимальное число строк при\r\n     * автоматическом ресайзе\r\n     */\r\n    maxRows: string | number;\r\n\r\n    /**\r\n     * Стандартный ресайз\r\n     * Попадает в `style`\r\n     */\r\n    resize?: React.CSSProperties['resize'];\r\n\r\n    /**\r\n     * Ширина\r\n     */\r\n    width?: React.CSSProperties['width'];\r\n\r\n    /**\r\n     * Вызывается при изменении `value`\r\n     */\r\n    onValueChange?: (value: string) => void;\r\n\r\n    /** Выделение значения при фокусе */\r\n    selectAllOnFocus?: boolean;\r\n  }\r\n>;\r\n\r\nexport interface TextareaState {\r\n  polyfillPlaceholder: boolean;\r\n  rows: number | string;\r\n}\r\n\r\n/**\r\n * Компонент для ввода многострочного текста.\r\n *\r\n * Принимает все атрибуты `React.TextareaHTMLAttributes<HTMLTextAreaElement>`\r\n *\r\n * ** `className` и `style`  игнорируются**\r\n */\r\nexport class Textarea extends React.Component<TextareaProps, TextareaState> {\r\n  public static __KONTUR_REACT_UI__ = 'Textarea';\r\n\r\n  public static propTypes = {\r\n    error: PropTypes.bool,\r\n    warning: PropTypes.bool,\r\n    disabled: PropTypes.bool,\r\n\r\n    autoResize: PropTypes.bool,\r\n    maxRows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\r\n    resize: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    title: PropTypes.string,\r\n    spellCheck: PropTypes.bool,\r\n    role: PropTypes.string,\r\n    maxLength: PropTypes.number,\r\n    tabIndex: PropTypes.number,\r\n    rows: PropTypes.number,\r\n    placeholder: PropTypes.string,\r\n\r\n    value: PropTypes.string,\r\n    defaultValue: PropTypes.string,\r\n    onValueChange: PropTypes.func,\r\n\r\n    onMouseEnter: PropTypes.func,\r\n    onMouseLeave: PropTypes.func,\r\n    onMouseOver: PropTypes.func,\r\n    onMouseMove: PropTypes.func,\r\n    onMouseOut: PropTypes.func,\r\n\r\n    onMouseUp: PropTypes.func,\r\n    onMouseDown: PropTypes.func,\r\n    onClick: PropTypes.func,\r\n    onDoubleClick: PropTypes.func,\r\n\r\n    onKeyDown: PropTypes.func,\r\n    onKeyPress: PropTypes.func,\r\n    onKeyUp: PropTypes.func,\r\n    onInput: PropTypes.func,\r\n\r\n    onFocus: PropTypes.func,\r\n    onBlur: PropTypes.func,\r\n\r\n    onScroll: PropTypes.func,\r\n    onWheel: PropTypes.func,\r\n\r\n    onCut: PropTypes.func,\r\n    onPaste: PropTypes.func,\r\n    onCopy: PropTypes.func,\r\n  };\r\n\r\n  public static defaultProps = {\r\n    rows: 3,\r\n    maxRows: 15,\r\n  };\r\n\r\n  public state = {\r\n    polyfillPlaceholder,\r\n    rows: 1,\r\n  };\r\n\r\n  private theme!: Theme;\r\n  private node: Nullable<HTMLTextAreaElement>;\r\n  private fakeNode: Nullable<HTMLTextAreaElement>;\r\n  private layoutEvents: Nullable<{ remove: () => void }>;\r\n\r\n  public componentDidMount() {\r\n    if (this.props.autoResize) {\r\n      this.autoResize();\r\n      this.layoutEvents = LayoutEvents.addListener(this.autoResize);\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    if (this.layoutEvents) {\r\n      this.layoutEvents.remove();\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: TextareaProps) {\r\n    if ((this.props.autoResize && this.props.rows > this.state.rows) || this.props.value !== prevProps.value) {\r\n      this.autoResize();\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <ThemeContext.Consumer>\r\n        {theme => {\r\n          this.theme = theme;\r\n          return this.renderMain();\r\n        }}\r\n      </ThemeContext.Consumer>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   */\r\n  public focus() {\r\n    if (this.node) {\r\n      this.node.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   */\r\n  public blur() {\r\n    if (this.node) {\r\n      this.node.blur();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   */\r\n  public setSelectionRange = (start: number, end: number) => {\r\n    if (!this.node) {\r\n      throw new Error('Cannot call \"setSelectionRange\" on unmounted Input');\r\n    }\r\n\r\n    if (document.activeElement !== this.node) {\r\n      this.focus();\r\n    }\r\n\r\n    this.node.setSelectionRange(start, end);\r\n  };\r\n\r\n  /**\r\n   * @public\r\n   */\r\n  public selectAll = () => {\r\n    if (this.node) {\r\n      this.setSelectionRange(0, this.node.value.length);\r\n    }\r\n  };\r\n\r\n  private renderMain() {\r\n    const {\r\n      width = DEFAULT_WIDTH,\r\n      error,\r\n      warning,\r\n      autoResize,\r\n      resize,\r\n      onCut,\r\n      onPaste,\r\n      maxRows,\r\n      onFocus,\r\n      selectAllOnFocus,\r\n      className,\r\n      style,\r\n      placeholder,\r\n      onValueChange,\r\n      ...textareaProps\r\n    } = this.props;\r\n\r\n    const rootProps = {\r\n      style: {\r\n        width,\r\n      },\r\n    };\r\n\r\n    const textareaClassNames = cn({\r\n      [jsStyles.textarea(this.theme)]: true,\r\n      [jsStyles.error(this.theme)]: !!error,\r\n      [jsStyles.warning(this.theme)]: !!warning,\r\n    });\r\n\r\n    const textAreaStyle = {\r\n      resize: autoResize ? 'none' : resize,\r\n    };\r\n\r\n    let placeholderPolyfill = null;\r\n\r\n    if (this.state.polyfillPlaceholder && !textareaProps.value) {\r\n      placeholderPolyfill = <span className={jsStyles.placeholder()}>{placeholder}</span>;\r\n    }\r\n\r\n    let fakeTextarea = null;\r\n    if (autoResize) {\r\n      const fakeProps = {\r\n        value: this.props.value,\r\n        defaultValue: this.props.defaultValue,\r\n        className: cn(textareaClassNames, jsStyles.fake()),\r\n        readOnly: true,\r\n      };\r\n      fakeTextarea = <textarea {...fakeProps} ref={this.refFake} />;\r\n    }\r\n\r\n    return (\r\n      <label {...rootProps} className={jsStyles.root(this.theme)}>\r\n        {placeholderPolyfill}\r\n        <textarea\r\n          {...textareaProps}\r\n          className={textareaClassNames}\r\n          style={textAreaStyle}\r\n          placeholder={!placeholderPolyfill ? placeholder : undefined}\r\n          ref={this.ref}\r\n          onChange={this.handleChange}\r\n          onCut={this.handleCut}\r\n          onPaste={this.handlePaste}\r\n          onFocus={this.handleFocus}\r\n          onKeyDown={this.handleKeyDown}\r\n        />\r\n        {fakeTextarea}\r\n      </label>\r\n    );\r\n  }\r\n\r\n  private handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n    // Edge bug: textarea maxlength doesn't work after new line\r\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/18833616/\r\n    const value = this.props.value !== undefined ? this.props.value.toString() : null;\r\n    const isBlockEnter = isKeyEnter(e) && value !== null && value.length === this.props.maxLength;\r\n\r\n    if (isBlockEnter) {\r\n      e.preventDefault();\r\n    }\r\n\r\n    if (this.props.onKeyDown) {\r\n      this.props.onKeyDown(e);\r\n    }\r\n  };\r\n\r\n  private handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    if (polyfillPlaceholder) {\r\n      const fieldIsEmpty = e.target.value === '';\r\n\r\n      if (this.state.polyfillPlaceholder !== fieldIsEmpty) {\r\n        this.setState({ polyfillPlaceholder: fieldIsEmpty });\r\n      }\r\n    }\r\n\r\n    if (this.props.onValueChange) {\r\n      this.props.onValueChange(e.target.value);\r\n    }\r\n\r\n    if (this.props.autoResize) {\r\n      this.autoResize();\r\n    }\r\n\r\n    if (this.props.onChange) {\r\n      this.props.onChange(e);\r\n    }\r\n  };\r\n\r\n  private ref = (element: HTMLTextAreaElement) => {\r\n    this.node = element;\r\n  };\r\n\r\n  private refFake = (element: HTMLTextAreaElement) => {\r\n    this.fakeNode = element;\r\n  };\r\n\r\n  private autoResize = throttle(() => {\r\n    const fakeNode = this.fakeNode;\r\n    if (!fakeNode) {\r\n      return;\r\n    }\r\n    const node = this.node;\r\n    if (!node) {\r\n      return;\r\n    }\r\n    if (this.props.value === undefined) {\r\n      fakeNode.value = node.value;\r\n    }\r\n\r\n    const { rows, maxRows } = this.props;\r\n    if (rows === undefined || maxRows === undefined) {\r\n      return;\r\n    }\r\n    const { height, exceededMaxHeight } = getTextAreaHeight(\r\n      fakeNode,\r\n      typeof rows === 'number' ? rows : parseInt(rows, 10),\r\n      typeof maxRows === 'number' ? maxRows : parseInt(maxRows, 10),\r\n    );\r\n    node.style.height = height + 'px';\r\n    node.style.overflowY = exceededMaxHeight ? 'scroll' : 'hidden';\r\n    fakeNode.style.overflowY = exceededMaxHeight ? 'scroll' : 'hidden';\r\n  }, 100);\r\n\r\n  private handleCut = (event: React.ClipboardEvent<HTMLTextAreaElement>) => {\r\n    if (this.props.autoResize) {\r\n      this.autoResize();\r\n    }\r\n\r\n    if (this.props.onPaste) {\r\n      this.props.onPaste(event);\r\n    }\r\n  };\r\n\r\n  private handlePaste = (event: React.ClipboardEvent<HTMLTextAreaElement>) => {\r\n    if (this.props.autoResize) {\r\n      this.autoResize();\r\n    }\r\n\r\n    if (this.props.onCut) {\r\n      this.props.onCut(event);\r\n    }\r\n  };\r\n\r\n  private handleFocus = (event: React.FocusEvent<HTMLTextAreaElement>) => {\r\n    if (this.props.selectAllOnFocus) {\r\n      this.selectAll();\r\n    }\r\n\r\n    if (this.props.onFocus) {\r\n      this.props.onFocus(event);\r\n    }\r\n  };\r\n}\r\n"]}