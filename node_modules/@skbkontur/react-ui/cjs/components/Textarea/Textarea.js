"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.Textarea = void 0;var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _lodash = _interopRequireDefault(require("lodash.throttle"));
var _classnames = _interopRequireDefault(require("classnames"));

var _identifiers = require("../../lib/events/keyboard/identifiers");
var _polyfillPlaceholder = require("../../lib/polyfillPlaceholder");
var LayoutEvents = _interopRequireWildcard(require("../../lib/LayoutEvents"));

var _ThemeContext = require("../../lib/theming/ThemeContext");


var _TextareaHelpers = require("./TextareaHelpers");
var _Textarea = require("./Textarea.styles");

var DEFAULT_WIDTH = 250;




















































/**
                          * Компонент для ввода многострочного текста.
                          *
                          * Принимает все атрибуты `React.TextareaHTMLAttributes<HTMLTextAreaElement>`
                          *
                          * ** `className` и `style`  игнорируются**
                          */var
Textarea = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(Textarea, _React$Component);function Textarea() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;_this.



























































    state = {
      polyfillPlaceholder: _polyfillPlaceholder.polyfillPlaceholder,
      rows: 1 };_this.


    theme = void 0;_this.
    node = void 0;_this.
    fakeNode = void 0;_this.
    layoutEvents = void 0;_this.




















































    setSelectionRange = function (start, end) {
      if (!_this.node) {
        throw new Error('Cannot call "setSelectionRange" on unmounted Input');
      }

      if (document.activeElement !== _this.node) {
        _this.focus();
      }

      _this.node.setSelectionRange(start, end);
    };_this.




    selectAll = function () {
      if (_this.node) {
        _this.setSelectionRange(0, _this.node.value.length);
      }
    };_this.









































































    handleKeyDown = function (e) {
      // Edge bug: textarea maxlength doesn't work after new line
      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/18833616/
      var value = _this.props.value !== undefined ? _this.props.value.toString() : null;
      var isBlockEnter = (0, _identifiers.isKeyEnter)(e) && value !== null && value.length === _this.props.maxLength;

      if (isBlockEnter) {
        e.preventDefault();
      }

      if (_this.props.onKeyDown) {
        _this.props.onKeyDown(e);
      }
    };_this.

    handleChange = function (e) {
      if (_polyfillPlaceholder.polyfillPlaceholder) {
        var fieldIsEmpty = e.target.value === '';

        if (_this.state.polyfillPlaceholder !== fieldIsEmpty) {
          _this.setState({ polyfillPlaceholder: fieldIsEmpty });
        }
      }

      if (_this.props.onValueChange) {
        _this.props.onValueChange(e.target.value);
      }

      if (_this.props.autoResize) {
        _this.autoResize();
      }

      if (_this.props.onChange) {
        _this.props.onChange(e);
      }
    };_this.

    ref = function (element) {
      _this.node = element;
    };_this.

    refFake = function (element) {
      _this.fakeNode = element;
    };_this.

    autoResize = (0, _lodash.default)(function () {
      var fakeNode = _this.fakeNode;
      if (!fakeNode) {
        return;
      }
      var node = _this.node;
      if (!node) {
        return;
      }
      if (_this.props.value === undefined) {
        fakeNode.value = node.value;
      }var _this$props =

      _this.props,rows = _this$props.rows,maxRows = _this$props.maxRows;
      if (rows === undefined || maxRows === undefined) {
        return;
      }var _getTextAreaHeight =
      (0, _TextareaHelpers.getTextAreaHeight)(
      fakeNode,
      typeof rows === 'number' ? rows : parseInt(rows, 10),
      typeof maxRows === 'number' ? maxRows : parseInt(maxRows, 10)),height = _getTextAreaHeight.height,exceededMaxHeight = _getTextAreaHeight.exceededMaxHeight;

      node.style.height = height + 'px';
      node.style.overflowY = exceededMaxHeight ? 'scroll' : 'hidden';
      fakeNode.style.overflowY = exceededMaxHeight ? 'scroll' : 'hidden';
    }, 100);_this.

    handleCut = function (event) {
      if (_this.props.autoResize) {
        _this.autoResize();
      }

      if (_this.props.onPaste) {
        _this.props.onPaste(event);
      }
    };_this.

    handlePaste = function (event) {
      if (_this.props.autoResize) {
        _this.autoResize();
      }

      if (_this.props.onCut) {
        _this.props.onCut(event);
      }
    };_this.

    handleFocus = function (event) {
      if (_this.props.selectAllOnFocus) {
        _this.selectAll();
      }

      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }
    };return _this;}var _proto = Textarea.prototype;_proto.componentDidMount = function componentDidMount() {if (this.props.autoResize) {this.autoResize();this.layoutEvents = LayoutEvents.addListener(this.autoResize);}};_proto.componentWillUnmount = function componentWillUnmount() {if (this.layoutEvents) {this.layoutEvents.remove();}};_proto.componentDidUpdate = function componentDidUpdate(prevProps) {if (this.props.autoResize && this.props.rows > this.state.rows || this.props.value !== prevProps.value) {this.autoResize();}};_proto.render = function render() {var _this2 = this;return _react.default.createElement(_ThemeContext.ThemeContext.Consumer, null, function (theme) {_this2.theme = theme;return _this2.renderMain();});} /**
public
proto.focus = function focus() {if (this.node) {this.node.focus();}} /**
public
proto.blur = function blur() {if (this.node) {this.node.blur();}} /**
public
proto.renderMain = function renderMain() {var _cn;var _this$props2 = this.props,_this$props2$width = _this$props2.width,width = _this$props2$width === void 0 ? DEFAULT_WIDTH : _this$props2$width,error = _this$props2.error,warning = _this$props2.warning,autoResize = _this$props2.autoResize,resize = _this$props2.resize,onCut = _this$props2.onCut,onPaste = _this$props2.onPaste,maxRows = _this$props2.maxRows,onFocus = _this$props2.onFocus,selectAllOnFocus = _this$props2.selectAllOnFocus,className = _this$props2.className,style = _this$props2.style,placeholder = _this$props2.placeholder,onValueChange = _this$props2.onValueChange,textareaProps = (0, _objectWithoutPropertiesLoose2.default)(_this$props2, ["width", "error", "warning", "autoResize", "resize", "onCut", "onPaste", "maxRows", "onFocus", "selectAllOnFocus", "className", "style", "placeholder", "onValueChange"]);var rootProps = { style: { width: width } };var textareaClassNames = (0, _classnames.default)((_cn = {}, _cn[_Textarea.jsStyles.textarea(this.theme)] = true, _cn[_Textarea.jsStyles.error(this.theme)] = !!error, _cn[_Textarea.jsStyles.warning(this.theme)] = !!warning, _cn));var textAreaStyle = { resize: autoResize ? 'none' : resize };var placeholderPolyfill = null;if (this.state.polyfillPlaceholder && !textareaProps.value) {placeholderPolyfill = _react.default.createElement("span", { className: _Textarea.jsStyles.placeholder() }, placeholder);}var fakeTextarea = null;if (autoResize) {var fakeProps = { value: this.props.value, defaultValue: this.props.defaultValue, className: (0, _classnames.default)(textareaClassNames, _Textarea.jsStyles.fake()), readOnly: true };fakeTextarea = _react.default.createElement("textarea", (0, _extends2.default)({}, fakeProps, { ref: this.refFake }));}return _react.default.createElement("label", (0, _extends2.default)({}, rootProps, { className: _Textarea.jsStyles.root(this.theme) }), placeholderPolyfill, _react.default.createElement("textarea", (0, _extends2.default)({}, textareaProps, { className: textareaClassNames, style: textAreaStyle, placeholder: !placeholderPolyfill ? placeholder : undefined, ref: this.ref, onChange: this.handleChange, onCut: this.handleCut, onPaste: this.handlePaste, onFocus: this.handleFocus, onKeyDown: this.handleKeyDown })), fakeTextarea);};return Textarea;}(_react.default.Component);exports.Textarea = Textarea;Textarea.__KONTUR_REACT_UI__ = 'Textarea';Textarea.propTypes = { error: _propTypes.default.bool, warning: _propTypes.default.bool, disabled: _propTypes.default.bool, autoResize: _propTypes.default.bool, maxRows: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]), resize: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]), width: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]), id: _propTypes.default.string, name: _propTypes.default.string, title: _propTypes.default.string, spellCheck: _propTypes.default.bool, role: _propTypes.default.string, maxLength: _propTypes.default.number, tabIndex: _propTypes.default.number, rows: _propTypes.default.number, placeholder: _propTypes.default.string, value: _propTypes.default.string, defaultValue: _propTypes.default.string, onValueChange: _propTypes.default.func, onMouseEnter: _propTypes.default.func, onMouseLeave: _propTypes.default.func, onMouseOver: _propTypes.default.func, onMouseMove: _propTypes.default.func, onMouseOut: _propTypes.default.func, onMouseUp: _propTypes.default.func, onMouseDown: _propTypes.default.func, onClick: _propTypes.default.func, onDoubleClick: _propTypes.default.func, onKeyDown: _propTypes.default.func, onKeyPress: _propTypes.default.func, onKeyUp: _propTypes.default.func, onInput: _propTypes.default.func, onFocus: _propTypes.default.func, onBlur: _propTypes.default.func, onScroll: _propTypes.default.func, onWheel: _propTypes.default.func, onCut: _propTypes.default.func, onPaste: _propTypes.default.func, onCopy: _propTypes.default.func };Textarea.defaultProps = { rows: 3, maxRows: 15 };