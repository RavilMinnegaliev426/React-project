import React from 'react';
import { Nullable, Override } from '../../typings/utility-types';
export declare type InputSize = 'small' | 'medium' | 'large';
export declare type InputAlign = 'left' | 'center' | 'right';
export declare type InputType = 'password' | 'text';
export declare type InputIconType = React.ReactNode | (() => React.ReactNode);
export declare type InputProps = Override<React.InputHTMLAttributes<HTMLInputElement>, {
    /**
     * Иконка слева
     * Если `ReactNode` применяются дефолтные стили для иконки
     * Если `() => ReactNode` применяются только стили для позиционирование
     */
    leftIcon?: InputIconType;
    /**
     * Иконка справа
     * Если `ReactNode` применяются дефолтные стили для иконки
     * Если `() => ReactNode` применяются только стили для позиционирование
     */
    rightIcon?: InputIconType;
    /** Состояние ошибки */
    error?: boolean;
    /** Состояние предупреждения */
    warning?: boolean;
    /** Режим прозрачной рамки */
    borderless?: boolean;
    /** Выравнивание текста */
    align?: InputAlign;
    /** Паттерн маски */
    mask?: Nullable<string>;
    /** Символ маски */
    maskChar?: Nullable<string>;
    /**
     * Словарь символов-регулярок для задания маски
     * @default { '9': '[0-9]', 'a': '[A-Za-z]', '*': '[A-Za-z0-9]' }
     */
    formatChars?: Record<string, string>;
    /** Показывать символы маски */
    alwaysShowMask?: boolean;
    /** Размер */
    size?: InputSize;
    /** onValueChange */
    onValueChange?: (value: string) => void;
    /** Вызывается на label */
    onMouseEnter?: React.MouseEventHandler<HTMLLabelElement>;
    /** Вызывается на label */
    onMouseLeave?: React.MouseEventHandler<HTMLLabelElement>;
    /** Вызывается на label */
    onMouseOver?: React.MouseEventHandler<HTMLLabelElement>;
    /** Тип */
    type?: InputType;
    /** Значение */
    value?: string;
    capture?: boolean;
    /**
     * Префикс
     * `ReactNode` перед значением, но после иконки
     */
    prefix?: React.ReactNode;
    /**
     * Суффикс
     * `ReactNode` после значения, но перед правой иконкой
     */
    suffix?: React.ReactNode;
    /** Выделять введенное значение при фокусе */
    selectAllOnFocus?: boolean;
    /**
     * Обработчик неправильного ввода.
     * По-умолчанию, инпут вспыхивает синим.
     * Если передан - вызывается переданный обработчик,
     * в таком случае вспыхивание можно вызвать
     * публичным методом инстанса `blink()`.
     *
     * @param value значение инпута.
     */
    onUnexpectedInput?: (value: string) => void;
}>;
export interface InputState {
    blinking: boolean;
    focused: boolean;
    polyfillPlaceholder: boolean;
}
/**
 * Интерфес пропсов наследуется от `React.InputHTMLAttributes<HTMLInputElement>`.
 *  Все пропсы кроме перечисленных, `className` и `style` передаются в `<input>`
 */
export declare class Input extends React.Component<InputProps, InputState> {
    static __KONTUR_REACT_UI__: string;
    static defaultProps: {
        size: InputSize;
    };
    state: InputState;
    private selectAllId;
    private theme;
    private blinkTimeout;
    private input;
    componentDidMount(): void;
    componentWillUnmount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: InputProps): void;
    /**
     * @public
     */
    focus(): void;
    /**
     * @public
     */
    blur(): void;
    /**
     * @public
     */
    blink(): void;
    /**
     * @public
     */
    setSelectionRange(start: number, end: number): void;
    get isMaskVisible(): boolean;
    render(): JSX.Element;
    /**
     * @public
     */
    selectAll: () => void;
    private delaySelectAll;
    private cancelDelayedSelectAll;
    private cancelBlink;
    private renderMain;
    private renderMaskedInput;
    private renderLeftIcon;
    private renderRightIcon;
    private renderIcon;
    private renderPlaceholder;
    private getSizeClassName;
    private refInput;
    private handleChange;
    private handleFocus;
    private handleKeyDown;
    private handleKeyPress;
    private handleMaskedValueChange;
    private handleUnexpectedInput;
    private handleBlur;
    private renderPrefix;
    private renderSuffix;
}
