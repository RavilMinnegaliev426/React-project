"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.Input = void 0;var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _invariant = _interopRequireDefault(require("invariant"));
var _react = _interopRequireDefault(require("react"));
var _raf = _interopRequireDefault(require("raf"));
var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("../../lib/utils");
var _identifiers = require("../../lib/events/keyboard/identifiers");
var _polyfillPlaceholder = require("../../lib/polyfillPlaceholder");

var _MaskedInput = require("../../internal/MaskedInput");
var _ThemeContext = require("../../lib/theming/ThemeContext");


var _Input = require("./Input.styles");























































































/**
                                         * Интерфес пропсов наследуется от `React.InputHTMLAttributes<HTMLInputElement>`.
                                         *  Все пропсы кроме перечисленных, `className` и `style` передаются в `<input>`
                                         */var
Input = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(Input, _React$Component);function Input() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;_this.








    state = {
      polyfillPlaceholder: false,
      blinking: false,
      focused: false };_this.


    selectAllId = null;_this.
    theme = void 0;_this.
    blinkTimeout = 0;_this.
    input = null;_this.

























































































    selectAll = function () {
      if (_this.input) {
        _this.setSelectionRange(0, _this.input.value.length);
      }
    };_this.

    delaySelectAll = function () {return _this.selectAllId = (0, _raf.default)(_this.selectAll);};_this.

    cancelDelayedSelectAll = function () {
      if (_this.selectAllId) {
        _raf.default.cancel(_this.selectAllId);
        _this.selectAllId = null;
      }
    };_this.

    cancelBlink = function (callback) {
      if (_this.blinkTimeout) {
        clearTimeout(_this.blinkTimeout);
        _this.blinkTimeout = 0;
        if (_this.state.blinking) {
          _this.setState({ blinking: false }, callback);
          return;
        }
      }
      if (callback) {
        callback();
      }
    };_this.







































































































































































    refInput = function (element) {
      if (element instanceof _MaskedInput.MaskedInput) {
        _this.input = element.input;
      } else {
        _this.input = element;
      }
    };_this.

    handleChange = function (event) {
      if (_polyfillPlaceholder.polyfillPlaceholder) {
        var fieldIsEmpty = event.target.value === '';
        if (_this.state.polyfillPlaceholder !== fieldIsEmpty) {
          _this.setState({ polyfillPlaceholder: fieldIsEmpty });
        }
      }

      if (_this.props.onValueChange) {
        _this.props.onValueChange(event.target.value);
      }

      if (_this.props.onChange) {
        _this.props.onChange(event);
      }
    };_this.

    handleFocus = function (event) {
      _this.setState({
        focused: true });


      if (_this.props.selectAllOnFocus) {
        // https://github.com/facebook/react/issues/7769
        _this.input ? _this.selectAll() : _this.delaySelectAll();
      }

      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }
    };_this.

    handleKeyDown = function (e) {
      if (_this.props.onKeyDown) {
        _this.props.onKeyDown(e);
      }

      var isDeleteKey = (0, _identifiers.someKeys)(_identifiers.isKeyBackspace, _identifiers.isKeyDelete)(e);

      if (!e.currentTarget.value && isDeleteKey && !e.repeat) {
        _this.handleUnexpectedInput();
      }
    };_this.

    handleKeyPress = function (event) {
      if (_this.props.onKeyPress) {
        _this.props.onKeyPress(event);
      }

      if (_this.props.maxLength === event.currentTarget.value.length) {
        _this.handleUnexpectedInput(event.currentTarget.value);
      }
    };_this.

    handleMaskedValueChange = function (value) {
      if (_this.props.onValueChange) {
        _this.props.onValueChange(value);
      }
    };_this.

    handleUnexpectedInput = function (value) {if (value === void 0) {value = _this.props.value || '';}
      if (_this.props.onUnexpectedInput) {
        _this.props.onUnexpectedInput(value);
      } else {
        _this.blink();
      }
    };_this.

    handleBlur = function (event) {
      _this.setState({ focused: false });

      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }
    };_this.

    renderPrefix = function () {var
      prefix = _this.props.prefix;

      if (!prefix) {
        return null;
      }

      return _react.default.createElement("span", { className: _Input.jsStyles.prefix(_this.theme) }, prefix);
    };_this.

    renderSuffix = function () {var
      suffix = _this.props.suffix;

      if (!suffix) {
        return null;
      }

      return _react.default.createElement("span", { className: _Input.jsStyles.suffix(_this.theme) }, suffix);
    };return _this;}var _proto = Input.prototype;_proto.componentDidMount = function componentDidMount() {if (_polyfillPlaceholder.polyfillPlaceholder) {this.setState({ polyfillPlaceholder: true });}};_proto.componentWillUnmount = function componentWillUnmount() {if (this.blinkTimeout) {clearTimeout(this.blinkTimeout);}this.cancelDelayedSelectAll();};_proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {if (_polyfillPlaceholder.polyfillPlaceholder && !nextProps.value) {this.setState({ polyfillPlaceholder: true });}} /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * @public
proto.focus = function focus() {(0, _invariant.default)(this.input, 'Cannot call "focus" because Input is not mounted');this.input.focus();} /**
public
proto.blur = function blur() {(0, _invariant.default)(this.input, 'Cannot call "blur" because Input is not mounted');this.input.blur();} /**
public
proto.blink = function blink() {var _this2 = this;if (this.blinkTimeout) {this.cancelBlink(function () {// trigger reflow to restart animation
        // @see https://css-tricks.com/restart-css-animation/#article-header-id-0
        void (_this2.input && _this2.input.offsetWidth);_this2.blink();});return;}this.setState({ blinking: true }, function () {_this2.blinkTimeout = window.setTimeout(_this2.cancelBlink, 150);});} /**
                                                                                                                                                                                                        * @public
                                                                                                                                                                                                        */;_proto.setSelectionRange = function setSelectionRange(start, end) {if (!this.input) {throw new Error('Cannot call "setSelectionRange" on unmounted Input');}if (document.activeElement !== this.input) {this.focus();}this.input.setSelectionRange(start, end);};_proto.render = function render() {var _this3 = this;return _react.default.createElement(_ThemeContext.ThemeContext.Consumer, null, function (theme) {_this3.theme = theme;return _this3.renderMain();});} /**
public
proto.renderMain = function renderMain() {var _cn;var _this$props = this.props,onMouseEnter = _this$props.onMouseEnter,onMouseLeave = _this$props.onMouseLeave,onMouseOver = _this$props.onMouseOver,onKeyDown = _this$props.onKeyDown,onKeyPress = _this$props.onKeyPress,onValueChange = _this$props.onValueChange,width = _this$props.width,error = _this$props.error,warning = _this$props.warning,leftIcon = _this$props.leftIcon,rightIcon = _this$props.rightIcon,borderless = _this$props.borderless,value = _this$props.value,align = _this$props.align,type = _this$props.type,mask = _this$props.mask,maskChar = _this$props.maskChar,alwaysShowMask = _this$props.alwaysShowMask,style = _this$props.style,className = _this$props.className,size = _this$props.size,placeholder = _this$props.placeholder,selectAllOnFocus = _this$props.selectAllOnFocus,disabled = _this$props.disabled,onUnexpectedInput = _this$props.onUnexpectedInput,prefix = _this$props.prefix,suffix = _this$props.suffix,formatChars = _this$props.formatChars,rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props, ["onMouseEnter", "onMouseLeave", "onMouseOver", "onKeyDown", "onKeyPress", "onValueChange", "width", "error", "warning", "leftIcon", "rightIcon", "borderless", "value", "align", "type", "mask", "maskChar", "alwaysShowMask", "style", "className", "size", "placeholder", "selectAllOnFocus", "disabled", "onUnexpectedInput", "prefix", "suffix", "formatChars"]);var _this$state = this.state,blinking = _this$state.blinking,focused = _this$state.focused;var labelProps = { className: (0, _classnames.default)(_Input.jsStyles.root(this.theme), this.getSizeClassName(), (_cn = {}, _cn[_Input.jsStyles.borderless()] = !!borderless, _cn[_Input.jsStyles.focus(this.theme)] = focused, _cn[_Input.jsStyles.blink(this.theme)] = !!blinking, _cn[_Input.jsStyles.warning(this.theme)] = !!warning, _cn[_Input.jsStyles.error(this.theme)] = !!error, _cn[_Input.jsStyles.disabled(this.theme)] = !!disabled, _cn[_Input.jsStyles.focusFallback(this.theme)] = focused && (_utils.isIE11 || _utils.isEdge), _cn[_Input.jsStyles.warningFallback(this.theme)] = !!warning && (_utils.isIE11 || _utils.isEdge), _cn[_Input.jsStyles.errorFallback(this.theme)] = !!error && (_utils.isIE11 || _utils.isEdge), _cn)), style: { width: width }, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, onMouseOver: onMouseOver };var inputProps = (0, _extends2.default)({}, rest, { className: _Input.jsStyles.input(this.theme), value: value, onChange: this.handleChange, onFocus: this.handleFocus, onKeyDown: this.handleKeyDown, onKeyPress: this.handleKeyPress, onBlur: this.handleBlur, style: { textAlign: align }, ref: this.refInput, type: 'text', placeholder: !this.isMaskVisible && !_polyfillPlaceholder.polyfillPlaceholder ? placeholder : undefined, disabled: disabled });if (type === 'password') {inputProps.type = type;}var input = mask ? this.renderMaskedInput(inputProps, mask) : _react.default.createElement('input', inputProps);return _react.default.createElement("label", labelProps, _react.default.createElement("span", { className: _Input.jsStyles.sideContainer() }, this.renderLeftIcon(), this.renderPrefix()), _react.default.createElement("span", { className: _Input.jsStyles.wrapper() }, input, this.renderPlaceholder()), _react.default.createElement("span", { className: (0, _classnames.default)(_Input.jsStyles.sideContainer(), _Input.jsStyles.rightContainer()) }, this.renderSuffix(), this.renderRightIcon()));};_proto.renderMaskedInput = function renderMaskedInput(inputProps, mask) {return _react.default.createElement(_MaskedInput.MaskedInput, (0, _extends2.default)({}, inputProps, { mask: mask, maskChar: this.props.maskChar === undefined ? '_' : this.props.maskChar, alwaysShowMask: this.props.alwaysShowMask, formatChars: this.props.formatChars, onChange: this.props.onChange, onValueChange: this.handleMaskedValueChange, onUnexpectedInput: this.handleUnexpectedInput }));};_proto.renderLeftIcon = function renderLeftIcon() {return this.renderIcon(this.props.leftIcon, _Input.jsStyles.leftIcon());};_proto.renderRightIcon = function renderRightIcon() {return this.renderIcon(this.props.rightIcon, _Input.jsStyles.rightIcon());};_proto.renderIcon = function renderIcon(icon, className) {if (!icon) {return null;}if (icon instanceof Function) {return _react.default.createElement("span", { className: className }, icon());}return _react.default.createElement("span", { className: (0, _classnames.default)(className, _Input.jsStyles.useDefaultColor(this.theme), _Input.jsStyles.useDefaultColor(this.theme)) }, icon);};_proto.renderPlaceholder = function renderPlaceholder() {var placeholder = null;if (this.state.polyfillPlaceholder && this.props.placeholder && !this.isMaskVisible && !this.props.value) {placeholder = _react.default.createElement("div", { className: (0, _classnames.default)(_Input.jsStyles.placeholder(this.theme), _Input.jsStyles.placeholder(this.theme)), style: { textAlign: this.props.align || 'inherit' } }, this.props.placeholder);}return placeholder;};_proto.getSizeClassName = function getSizeClassName() {var _ref, _ref2, _ref3;switch (this.props.size) {case 'large':return _ref = {}, _ref[_Input.jsStyles.sizeLarge(this.theme)] = true, _ref[_Input.jsStyles.sizeLargeFallback(this.theme)] = _utils.isIE11 || _utils.isEdge, _ref;case 'medium':return _ref2 = {}, _ref2[_Input.jsStyles.sizeMedium(this.theme)] = true, _ref2[_Input.jsStyles.sizeMediumFallback(this.theme)] = _utils.isIE11 || _utils.isEdge, _ref2;case 'small':default:return _ref3 = {}, _ref3[_Input.jsStyles.sizeSmall(this.theme)] = true, _ref3[_Input.jsStyles.sizeSmallFallback(this.theme)] = _utils.isIE11 || _utils.isEdge, _ref3;}};(0, _createClass2.default)(Input, [{ key: "isMaskVisible", get: function get() {var _this$props2 = this.props,mask = _this$props2.mask,alwaysShowMask = _this$props2.alwaysShowMask;var focused = this.state.focused;return Boolean(mask && (focused || alwaysShowMask));} }]);return Input;}(_react.default.Component);exports.Input = Input;Input.__KONTUR_REACT_UI__ = 'Input';Input.defaultProps = { size: 'small' };