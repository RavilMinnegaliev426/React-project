import React from 'react';
import PropTypes from 'prop-types';
import { Override } from '../../typings/utility-types';
export declare type RadioProps<T> = Override<React.InputHTMLAttributes<HTMLInputElement>, {
    /** Состояние ошибки */
    error?: boolean;
    /** Состояние Предупреждения */
    warning?: boolean;
    /** Состояние фокуса */
    focused?: boolean;
    /** Состояние нажатия */
    pressed?: boolean;
    /** Состояние hover */
    hovered?: boolean;
    /** Состояние active */
    active?: boolean;
    /** Вызывается при изменении `value` */
    onValueChange?: (value: T) => void;
    onMouseEnter?: React.MouseEventHandler<HTMLLabelElement>;
    onMouseLeave?: React.MouseEventHandler<HTMLLabelElement>;
    onMouseOver?: React.MouseEventHandler<HTMLLabelElement>;
    /** Значение */
    value: T;
}>;
export declare class Radio<T> extends React.Component<RadioProps<T>> {
    static __KONTUR_REACT_UI__: string;
    static contextTypes: {
        activeItem: PropTypes.Requireable<any>;
        onSelect: PropTypes.Requireable<(...args: any[]) => any>;
        name: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        error: PropTypes.Requireable<boolean>;
        warning: PropTypes.Requireable<boolean>;
    };
    static defaultProps: {
        focused: boolean;
    };
    private theme;
    private inputEl;
    render(): JSX.Element;
    /**
     * @public
     */
    focus(): void;
    /**
     * @public
     */
    blur(): void;
    renderMain(): JSX.Element;
    private _isInRadioGroup;
    private renderLabel;
    private handleChange;
    private handleMouseOver;
    private handleMouseEnter;
    private handleMouseLeave;
}
