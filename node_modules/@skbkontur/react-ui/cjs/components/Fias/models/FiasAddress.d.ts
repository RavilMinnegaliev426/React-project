import { FiasLocale } from '../locale';
import { FiasAddressErrors, FiasAddressFields, FiasAdditionalFields, FiasVerifyResponse, FiasAddressResponse, FiasAddressValue, FiasValue, FiasFields, FiasExtraFields, FiasFieldsSettings, FiasCountry, FiasAPIProvider } from '../types';
import { FiasAddressElement } from './FiasAddressElement';
export interface FiasAddressOptions {
    fields?: FiasAddressFields;
    additionalFields?: FiasAdditionalFields;
    errors?: FiasAddressErrors;
    country?: FiasCountry;
    foreignAddress?: string;
}
export declare class FiasAddress {
    static MAIN_FIELDS: FiasFields[];
    static ADDITIONAL_FIELDS: FiasExtraFields[];
    static ALL_FIELDS: (FiasFields | FiasExtraFields)[];
    static VERIFIABLE_FIELDS: FiasFields[];
    static FULL_ADDRESS_SEARCH_FIELDS: FiasFields[];
    static NOT_ONLY_DIRECT_PARENT_SEARCH_FIELDS: FiasFields[];
    static IS_RUSSIA: (country: FiasCountry) => boolean;
    static responseToFields: (response: FiasAddressResponse) => FiasAddressFields;
    static fieldsToResponse: (fields: FiasAddressFields) => FiasAddressResponse;
    static createFromResponse: (response: FiasAddressResponse, additionalFields?: FiasAdditionalFields | undefined, country?: FiasCountry | undefined) => FiasAddress;
    static createFromAddressValue: (addressValue: FiasAddressValue, additionalFields?: FiasAdditionalFields | undefined, country?: FiasCountry | undefined) => FiasAddress;
    static createFromAddress: (address: FiasAddress, options: FiasAddressOptions) => FiasAddress;
    static validate: (address: FiasAddress, locale: FiasLocale) => FiasAddress;
    static verify: (address: FiasAddress, response: FiasVerifyResponse) => FiasAddress;
    static filterVisibleFields: (fields: {
        region?: any;
        district?: any;
        city?: any;
        intracityarea?: any;
        settlement?: any;
        planningstructure?: any;
        street?: any;
        stead?: any;
        house?: any;
        room?: any;
    }, fieldsSettings: FiasFieldsSettings) => {
        region?: any;
        district?: any;
        city?: any;
        intracityarea?: any;
        settlement?: any;
        planningstructure?: any;
        street?: any;
        stead?: any;
        house?: any;
        room?: any;
    };
    static isFieldVisible: (field: FiasFields | FiasExtraFields, fieldsSettings: FiasFieldsSettings) => boolean;
    static getParentFields: (field: FiasFields) => FiasFields[];
    static getChildFields: (field: FiasFields) => FiasFields[];
    static removeFiasData: (address: FiasAddress, fields?: FiasFields[]) => FiasAddress;
    static getAddress: (api: FiasAPIProvider, value?: Partial<FiasValue> | undefined, fieldsSettings?: FiasFieldsSettings | undefined) => Promise<FiasAddress>;
    fields: FiasAddressFields;
    additionalFields: FiasAdditionalFields;
    errors: FiasAddressErrors;
    country: FiasCountry | undefined;
    foreignAddress: string;
    constructor({ fields, additionalFields, errors, country, foreignAddress }?: FiasAddressOptions);
    get isForeign(): boolean;
    get isEmpty(): boolean;
    get hasErrors(): boolean;
    get postalCode(): string;
    get isPostalCodeValid(): boolean;
    get isPostalCodeAltered(): boolean;
    hasError(field: FiasFields | FiasExtraFields): boolean;
    getError(field: FiasFields | FiasExtraFields): string | undefined;
    getAddressErrors: () => {
        region?: string | undefined;
        district?: string | undefined;
        city?: string | undefined;
        intracityarea?: string | undefined;
        settlement?: string | undefined;
        planningstructure?: string | undefined;
        street?: string | undefined;
        stead?: string | undefined;
        house?: string | undefined;
        room?: string | undefined;
        postalcode?: string | undefined;
    };
    getText: (minField?: FiasFields | undefined, skipTypes?: boolean, connector?: string) => string;
    getFullText: (withPostalCode?: boolean) => string;
    isAllowedToFill: (field: FiasFields) => boolean;
    isAllowedToSearchFullAddress: (field: FiasFields) => boolean;
    isAllowedToSearchThroughChildrenOfDirectParent: (field: FiasFields, fieldsSettings?: FiasFieldsSettings | undefined) => boolean;
    hasOnlyIndirectParent: (field?: FiasFields | undefined) => boolean;
    getClosestParentFiasId: (field: FiasFields) => string | undefined;
    getFiasId: () => string;
    getParent: (field: FiasFields) => FiasAddressElement | undefined;
    verifyConsistency: () => FiasVerifyResponse;
    getFiasPostalCode: () => string;
    getAddressValue: () => FiasAddressValue;
    getValue: (withPostalCode?: boolean) => FiasValue;
    convertForVerification: () => {};
    getDiffFields: (address: FiasAddress, fieldsSettings?: FiasFieldsSettings | undefined) => FiasAddressFields;
}
