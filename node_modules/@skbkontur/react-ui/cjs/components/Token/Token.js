"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.Token = void 0;var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));

var _CrossIcon = require("../../internal/icons/CrossIcon");
var _utils = require("../../lib/utils");
var _ThemeContext = require("../../lib/theming/ThemeContext");


var _Token = require("./Token.styles");var























Token = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(Token, _React$Component);function Token() {var _this;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;_this.


    theme = void 0;_this.


































































    onRemoveClick = function (event) {var _this$props =
      _this.props,disabled = _this$props.disabled,_this$props$onRemove = _this$props.onRemove,onRemove = _this$props$onRemove === void 0 ? _utils.emptyHandler : _this$props$onRemove;

      if (disabled) {
        event.preventDefault();
        return;
      }

      onRemove(event);
    };return _this;}var _proto = Token.prototype;_proto.render = function render() {var _this2 = this;return _react.default.createElement(_ThemeContext.ThemeContext.Consumer, null, function (theme) {_this2.theme = theme;return _this2.renderMain();});};_proto.renderMain = function renderMain() {var _cn, _cn2;var _this$props2 = this.props,children = _this$props2.children,isActive = _this$props2.isActive,colors = _this$props2.colors,error = _this$props2.error,warning = _this$props2.warning,disabled = _this$props2.disabled,_this$props2$onClick = _this$props2.onClick,onClick = _this$props2$onClick === void 0 ? _utils.emptyHandler : _this$props2$onClick,_this$props2$onMouseE = _this$props2.onMouseEnter,onMouseEnter = _this$props2$onMouseE === void 0 ? _utils.emptyHandler : _this$props2$onMouseE,_this$props2$onMouseL = _this$props2.onMouseLeave,onMouseLeave = _this$props2$onMouseL === void 0 ? _utils.emptyHandler : _this$props2$onMouseL,_this$props2$onFocus = _this$props2.onFocus,onFocus = _this$props2$onFocus === void 0 ? _utils.emptyHandler : _this$props2$onFocus,_this$props2$onBlur = _this$props2.onBlur,onBlur = _this$props2$onBlur === void 0 ? _utils.emptyHandler : _this$props2$onBlur;var theme = this.theme;var validation = error ? 'error' : warning ? 'warning' : null;var disableClassNames = (0, _classnames.default)(_Token.jsTokenColors.defaultDisabled(theme), (_cn = {}, _cn[_Token.jsTokenColors.defaultDisabledWarning(theme)] = warning, _cn[_Token.jsTokenColors.defaultDisabledError(theme)] = error, _cn));var tokenClassName = disabled ? disableClassNames : _Token.jsTokenColors.defaultIdle(theme, validation);var activeTokenClassName = disabled ? disableClassNames : _Token.jsTokenColors.defaultActive(theme, validation);if (!disabled && colors) {tokenClassName = _Token.jsTokenColors[colors.idle](theme, validation);var activeClassName = colors.active ? colors.active : colors.idle;activeTokenClassName = _Token.jsTokenColors[activeClassName](theme, validation);}var tokenClassNames = (0, _classnames.default)(_Token.jsStyles.token(), tokenClassName, (_cn2 = {}, _cn2[activeTokenClassName] = !!isActive, _cn2[_Token.jsStyles.disabled(theme)] = !!disabled, _cn2));return _react.default.createElement("div", { className: tokenClassNames, onClick: onClick, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, onFocus: onFocus, onBlur: onBlur }, _react.default.createElement("span", { className: _Token.jsStyles.text() }, children), _react.default.createElement("span", { className: _Token.jsStyles.removeIcon(), onClick: this.onRemoveClick }, _react.default.createElement(_CrossIcon.CrossIcon, null)));};return Token;}(_react.default.Component);exports.Token = Token;Token.__KONTUR_REACT_UI__ = 'Token';