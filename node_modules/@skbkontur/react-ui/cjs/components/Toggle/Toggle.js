"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.Toggle = void 0;var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));

var _tabListener = require("../../lib/events/tabListener");
var _ThemeContext = require("../../lib/theming/ThemeContext");


var _Toggle = require("./Toggle.styles");var





















Toggle = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(Toggle, _React$Component);




















  function Toggle(props) {var _this;
    _this = _React$Component.call(this, props) || this;_this.theme = void 0;_this.input = null;_this.

















    focus = function () {
      if (_this.input) {
        _tabListener.tabListener.isTabPressed = true;
        _this.input.focus();
      }
    };_this.






























































    inputRef = function (element) {
      _this.input = element;
    };_this.

    handleChange = function (event) {
      if (_this.props.onValueChange) {
        _this.props.onValueChange(event.target.checked);
      }

      if (_this.isUncontrolled()) {
        _this.setState({
          checked: event.target.checked });

      }

      if (_this.props.onChange) {
        _this.props.onChange(event);
      }
    };_this.

    handleFocus = function (event) {
      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }

      if (_tabListener.tabListener.isTabPressed) {
        _this.setState({ focusByTab: true });
      }
    };_this.

    handleBlur = function (event) {
      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }
      _this.setState({
        focusByTab: false });

    };_this.state = { focusByTab: false, checked: props.defaultChecked };return _this;}var _proto = Toggle.prototype;_proto.componentDidMount = function componentDidMount() {if (this.props.autoFocus) {_tabListener.tabListener.isTabPressed = true;this.focus();}} /**
                                                                                                                                                                                                                                                                       * @public
                                                                                                                                                                                                                                                                       */;_proto.render = function render() {var _this2 = this;return _react.default.createElement(_ThemeContext.ThemeContext.Consumer, null, function (theme) {_this2.theme = theme;return _this2.renderMain();});};_proto.renderMain = function renderMain() {var _cn, _cn2;var _this$props = this.props,warning = _this$props.warning,error = _this$props.error,loading = _this$props.loading,color = _this$props.color;var disabled = this.props.disabled || loading;var checked = this.isUncontrolled() ? this.state.checked : this.props.checked;var containerClassNames = (0, _classnames.default)(_Toggle.jsStyles.container(this.theme), (_cn = {}, _cn[_Toggle.jsStyles.focused(this.theme)] = !disabled && !!this.state.focusByTab, _cn[_Toggle.jsStyles.isLoading(this.theme)] = !!loading, _cn[_Toggle.jsStyles.isWarning(this.theme)] = !color && !!warning, _cn[_Toggle.jsStyles.isError(this.theme)] = !color && !!error, _cn));return _react.default.createElement("label", { className: (0, _classnames.default)(_Toggle.jsStyles.wrapper(this.theme), (_cn2 = {}, _cn2[_Toggle.jsStyles.wrapperDisabled(this.theme)] = !!disabled, _cn2)) }, _react.default.createElement("input", { type: "checkbox", checked: checked, onChange: this.handleChange, className: _Toggle.jsStyles.input(this.theme), onFocus: this.handleFocus, onBlur: this.handleBlur, ref: this.inputRef, disabled: disabled }), _react.default.createElement("div", { className: containerClassNames, style: checked && color ? { backgroundColor: color, borderColor: color, boxShadow: "inset 0 0 0 1px " + color } : undefined }, _react.default.createElement("div", { className: _Toggle.jsStyles.activeBackground(), style: checked && color ? { backgroundColor: color } : undefined })), _react.default.createElement("div", { className: _Toggle.jsStyles.handle(this.theme) }));};_proto.isUncontrolled = function isUncontrolled() {
    return this.props.checked === undefined;
  };return Toggle;}(_react.default.Component);exports.Toggle = Toggle;Toggle.__KONTUR_REACT_UI__ = 'Toggle';Toggle.propTypes = { checked: _propTypes.default.bool, defaultChecked: _propTypes.default.bool, disabled: _propTypes.default.bool, error: _propTypes.default.bool, loading: _propTypes.default.bool, warning: _propTypes.default.bool, onValueChange: _propTypes.default.func };Toggle.defaultProps = { disabled: false, loading: false };