{"version":3,"sources":["ThemeProvider.tsx"],"names":["ThemeProvider","props","theme","makeFullTheme","value","componentDidMount","UNSAFE_componentWillReceiveProps","nextProps","isDevelopmentEnv","hasSameShape","JSON","stringify","render","children","ThemeFactory","isFullTheme","create","React","Component","__KONTUR_REACT_UI__"],"mappings":"yPAAA;AACA;AACA;;AAEA;;AAEA;AACA,kE;;;;;;;AAOaA,a;;;;;AAKX,yBAAYC,KAAZ,EAAuC;AACrC,wCAAMA,KAAN,UADqC,MAF/BC,KAE+B;AAErC,UAAKA,KAAL,GAAa,MAAKC,aAAL,CAAmBF,KAAK,CAACG,KAAzB,CAAb,CAFqC;AAGtC,G;;AAEDC,EAAAA,iB,GAAA,6BAA0B;AACxB;AACE,QADF;AAEE,2IAFF;;AAID,G;;AAEMC,EAAAA,gC,GAAP,0CAAwCC,SAAxC,EAAuF;AACrF,QAAIA,SAAS,CAACH,KAAV,KAAoB,KAAKH,KAAL,CAAWG,KAAnC,EAA0C;AACxC,UAAII,oCAAJ,EAAsB;AACpB,YAAMC,YAAY,GAAG,qBAAQF,SAAS,CAACH,KAAlB,EAAyB,KAAKH,KAAL,CAAWG,KAApC,CAArB;AACA;AACE,SAACK,YADH;AAEE;AACE,YADF;;AAGE,YAHF;AAIYC,QAAAA,IAAI,CAACC,SAAL,CAAeJ,SAAS,CAACH,KAAzB,CAJZ,CAFF;;AAQD;;AAED,WAAKF,KAAL,GAAa,KAAKC,aAAL,CAAmBI,SAAS,CAACH,KAA7B,CAAb;AACD;AACF,G;;AAEMQ,EAAAA,M,GAAP,kBAAgB;AACd,WAAO,6BAAC,0BAAD,CAAc,QAAd,IAAuB,KAAK,EAAE,KAAKV,KAAnC,IAA2C,KAAKD,KAAL,CAAWY,QAAtD,CAAP;AACD,G;;AAEOV,EAAAA,a,GAAR,uBAAsBD,KAAtB,EAAqD;AACnD,WAAOY,2BAAaC,WAAb,CAAyBb,KAAzB,IAAkCA,KAAlC,GAA0CY,2BAAaE,MAAb,CAA6Bd,KAA7B,CAAjD;AACD,G,wBAzCgCe,eAAMC,S,wCAA5BlB,a,CACGmB,mB,GAAsB,e","sourcesContent":["import React from 'react';\r\nimport isEqual from 'lodash.isequal';\r\nimport warning from 'warning';\r\n\r\nimport { ThemeContext } from '../../lib/theming/ThemeContext';\r\nimport { Theme, ThemeIn } from '../../lib/theming/Theme';\r\nimport { ThemeFactory } from '../../lib/theming/ThemeFactory';\r\nimport { isDevelopmentEnv } from '../../lib/currentEnvironment';\r\n\r\ninterface ThemeProviderProps {\r\n  children: React.ReactNode;\r\n  value: ThemeIn | Theme;\r\n}\r\n\r\nexport class ThemeProvider extends React.Component<ThemeProviderProps> {\r\n  public static __KONTUR_REACT_UI__ = 'ThemeProvider';\r\n\r\n  private theme: Theme;\r\n\r\n  constructor(props: ThemeProviderProps) {\r\n    super(props);\r\n    this.theme = this.makeFullTheme(props.value);\r\n  }\r\n\r\n  componentDidMount(): void {\r\n    warning(\r\n      true,\r\n      \"ThemeProvider was deprecated please use 'ThemeContext' instead. \\nSee https://tech.skbkontur.ru/react-ui/#/Customization/ThemeContext\",\r\n    );\r\n  }\r\n\r\n  public UNSAFE_componentWillReceiveProps(nextProps: Readonly<ThemeProviderProps>): void {\r\n    if (nextProps.value !== this.props.value) {\r\n      if (isDevelopmentEnv) {\r\n        const hasSameShape = isEqual(nextProps.value, this.props.value);\r\n        warning(\r\n          !hasSameShape,\r\n          `ThemeProvider received next value with the same shape as the previous one.` +\r\n            '\\n' +\r\n            `Consider using the same object reference for performance reasons.` +\r\n            '\\n' +\r\n            `Shape: ${JSON.stringify(nextProps.value)}`,\r\n        );\r\n      }\r\n\r\n      this.theme = this.makeFullTheme(nextProps.value);\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return <ThemeContext.Provider value={this.theme}>{this.props.children}</ThemeContext.Provider>;\r\n  }\r\n\r\n  private makeFullTheme(theme: ThemeIn | Theme): Theme {\r\n    return ThemeFactory.isFullTheme(theme) ? theme : ThemeFactory.create<ThemeIn>(theme);\r\n  }\r\n}\r\n"]}