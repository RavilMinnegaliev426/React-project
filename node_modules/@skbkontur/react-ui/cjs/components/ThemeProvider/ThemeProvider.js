"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.ThemeProvider = void 0;var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _react = _interopRequireDefault(require("react"));
var _lodash = _interopRequireDefault(require("lodash.isequal"));
var _warning = _interopRequireDefault(require("warning"));

var _ThemeContext = require("../../lib/theming/ThemeContext");

var _ThemeFactory = require("../../lib/theming/ThemeFactory");
var _currentEnvironment = require("../../lib/currentEnvironment");var






ThemeProvider = /*#__PURE__*/function (_React$Component) {(0, _inheritsLoose2.default)(ThemeProvider, _React$Component);




  function ThemeProvider(props) {var _this;
    _this = _React$Component.call(this, props) || this;_this.theme = void 0;
    _this.theme = _this.makeFullTheme(props.value);return _this;
  }var _proto = ThemeProvider.prototype;_proto.

  componentDidMount = function componentDidMount() {
    (0, _warning.default)(
    true,
    "ThemeProvider was deprecated please use 'ThemeContext' instead. \nSee https://tech.skbkontur.ru/react-ui/#/Customization/ThemeContext");

  };_proto.

  UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
    if (nextProps.value !== this.props.value) {
      if (_currentEnvironment.isDevelopmentEnv) {
        var hasSameShape = (0, _lodash.default)(nextProps.value, this.props.value);
        (0, _warning.default)(
        !hasSameShape,
        "ThemeProvider received next value with the same shape as the previous one." +
        '\n' + "Consider using the same object reference for performance reasons." +

        '\n' + ("Shape: " +
        JSON.stringify(nextProps.value)));

      }

      this.theme = this.makeFullTheme(nextProps.value);
    }
  };_proto.

  render = function render() {
    return _react.default.createElement(_ThemeContext.ThemeContext.Provider, { value: this.theme }, this.props.children);
  };_proto.

  makeFullTheme = function makeFullTheme(theme) {
    return _ThemeFactory.ThemeFactory.isFullTheme(theme) ? theme : _ThemeFactory.ThemeFactory.create(theme);
  };return ThemeProvider;}(_react.default.Component);exports.ThemeProvider = ThemeProvider;ThemeProvider.__KONTUR_REACT_UI__ = 'ThemeProvider';