{"version":3,"sources":["ConditionalHandler.ts"],"names":["ConditionalHandler","actions","add","condition","handler","push","build","reference","args","found","forEach"],"mappings":"2EAAA,gC;;;;;AAKaA,kB;AACMC,IAAAA,O;;;AAGZ,M;;AAEEC,EAAAA,G,GAAP,aAAWC,SAAX,EAAoCC,OAApC,EAAmF;AACjF,SAAKH,OAAL,CAAaI,IAAb,CAAkB,EAAEF,SAAS,EAATA,SAAF,EAAaC,OAAO,EAAPA,OAAb,EAAlB;AACA,WAAO,IAAP;AACD;;AAED;;;AAGOE,EAAAA,K,GAAP,iBAAsD;AACpD,WAAO,UAACC,SAAD,EAAwB,mCAATC,IAAS,uEAATA,IAAS;AAC7B,UAAIC,KAAK,GAAG,KAAZ;AACA,MAAA,KAAI,CAACR,OAAL,CAAaS,OAAb,CAAqB,gBAA4B,KAAzBP,SAAyB,QAAzBA,SAAyB,CAAdC,OAAc,QAAdA,OAAc;AAC/C,YAAI,uBAAWD,SAAX,IAAwBA,SAAS,CAACI,SAAD,CAAjC,GAA+CJ,SAAS,KAAKI,SAAjE,EAA4E;AAC1EH,UAAAA,OAAO,MAAP,SAAWI,IAAX;AACAC,UAAAA,KAAK,GAAG,IAAR;AACD;AACF,OALD;;AAOA,aAAOA,KAAP;AACD,KAVD;AAWD,G","sourcesContent":["import { isFunction } from './utils';\r\n\r\ntype Handler<K extends any[]> = (...args: K) => void;\r\ntype Condition<T> = T | ((reference: T) => boolean);\r\n\r\nexport class ConditionalHandler<T, K extends any[] = any[]> {\r\n  private readonly actions: Array<{\r\n    condition: Condition<T>;\r\n    handler: Handler<K>;\r\n  }> = [];\r\n\r\n  public add(condition: Condition<T>, handler: Handler<K>): ConditionalHandler<T, K> {\r\n    this.actions.push({ condition, handler });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} found - был ли найден и вызван хоть один обработчик\r\n   */\r\n  public build(): (reference: T, ...args: K) => boolean {\r\n    return (reference, ...args) => {\r\n      let found = false;\r\n      this.actions.forEach(({ condition, handler }) => {\r\n        if (isFunction(condition) ? condition(reference) : condition === reference) {\r\n          handler(...args);\r\n          found = true;\r\n        }\r\n      });\r\n\r\n      return found;\r\n    };\r\n  }\r\n}\r\n"]}