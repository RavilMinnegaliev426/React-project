{"version":3,"sources":["InternalDateTransformer.ts"],"names":["InternalDateTransformer","dateToFragments","components","settings","order","defaultDateComponentsOrder","separator","defaultDateComponentsSeparator","withSeparator","withPad","pad","year","type","InternalDateComponentType","Year","value","length","LENGTH_YEAR","month","Month","LENGTH_MONTH","date","Date","LENGTH_DATE","fragments","InternalDateOrder","YMD","push","MDY","DMY","valueWithPad","padYear","padMonth","padDate","isValid","InternalDateValidator","testParseToNumber","separatorFragment","Separator","LENGTH_SEPARATOR","splice","parseValueToDate","re","RE_ORDER_MDY","RE_ORDER_DMY","RE_ORDER_YMD","test","match","exec","dateComponents","emptyDateComponents","matchFinished","slice","map","item","Number","dateComponentsStringToNumber","componentsRaw","dateToInternalString","filter","join","InternalDateSeparator","Dot","padStart","CHAR_PAD","String","padDateComponent"],"mappings":"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","sourcesContent":["import {\r\n  CHAR_PAD,\r\n  defaultDateComponentsOrder,\r\n  defaultDateComponentsSeparator,\r\n  emptyDateComponents,\r\n  LENGTH_DATE,\r\n  LENGTH_MONTH,\r\n  LENGTH_SEPARATOR,\r\n  LENGTH_YEAR,\r\n  RE_ORDER_DMY,\r\n  RE_ORDER_MDY,\r\n  RE_ORDER_YMD,\r\n} from './constants';\r\nimport { InternalDateValidator } from './InternalDateValidator';\r\nimport {\r\n  InternalDateComponentRaw,\r\n  InternalDateComponents,\r\n  InternalDateComponentsNumber,\r\n  InternalDateComponentsRaw,\r\n  InternalDateComponentType,\r\n  InternalDateFragment,\r\n  InternalDateOrder,\r\n  InternalDateSeparator,\r\n  InternalDateToFragmentsSettings,\r\n} from './types';\r\n\r\nexport class InternalDateTransformer {\r\n  public static padStart = (value: InternalDateComponentRaw, length: number, pad: string = CHAR_PAD): string =>\r\n    String(value || '').padStart(length, pad);\r\n\r\n  public static padYear = (year: InternalDateComponentRaw, pad?: string): string =>\r\n    InternalDateTransformer.padStart(year, LENGTH_YEAR, pad);\r\n  public static padMonth = (month: InternalDateComponentRaw, pad?: string): string =>\r\n    InternalDateTransformer.padStart(month, LENGTH_MONTH, pad);\r\n  public static padDate = (date: InternalDateComponentRaw, pad?: string): string =>\r\n    InternalDateTransformer.padStart(date, LENGTH_DATE, pad);\r\n\r\n  public static padDateComponent = (\r\n    type: InternalDateComponentType | null,\r\n    value: InternalDateComponentRaw,\r\n    pad?: string,\r\n  ): string => {\r\n    if (type === InternalDateComponentType.Year) {\r\n      return InternalDateTransformer.padYear(value, pad);\r\n    } else if (type === InternalDateComponentType.Month) {\r\n      return InternalDateTransformer.padMonth(value, pad);\r\n    } else if (type === InternalDateComponentType.Date) {\r\n      return InternalDateTransformer.padDate(value, pad);\r\n    }\r\n    return '';\r\n  };\r\n\r\n  public static dateToFragments(\r\n    components: InternalDateComponentsRaw,\r\n    settings: InternalDateToFragmentsSettings = {},\r\n  ): InternalDateFragment[] {\r\n    const {\r\n      order = defaultDateComponentsOrder,\r\n      separator = defaultDateComponentsSeparator,\r\n      withSeparator = false,\r\n      withPad = false,\r\n      pad,\r\n    } = settings;\r\n    const year: InternalDateFragment = {\r\n      type: InternalDateComponentType.Year,\r\n      value: components.year,\r\n      length: LENGTH_YEAR,\r\n    };\r\n    const month: InternalDateFragment = {\r\n      type: InternalDateComponentType.Month,\r\n      value: components.month,\r\n      length: LENGTH_MONTH,\r\n    };\r\n    const date: InternalDateFragment = {\r\n      type: InternalDateComponentType.Date,\r\n      value: components.date,\r\n      length: LENGTH_DATE,\r\n    };\r\n\r\n    const fragments: InternalDateFragment[] = [];\r\n    if (order === InternalDateOrder.YMD) {\r\n      fragments.push(year, month, date);\r\n    } else if (order === InternalDateOrder.MDY) {\r\n      fragments.push(month, date, year);\r\n    } else if (order === InternalDateOrder.DMY) {\r\n      fragments.push(date, month, year);\r\n    }\r\n\r\n    if (withPad) {\r\n      year.valueWithPad = InternalDateTransformer.padYear(year.value, pad);\r\n      month.valueWithPad = InternalDateTransformer.padMonth(month.value, pad);\r\n      date.valueWithPad = InternalDateTransformer.padDate(date.value, pad);\r\n    }\r\n\r\n    year.isValid = InternalDateValidator.testParseToNumber(year.value);\r\n    month.isValid = InternalDateValidator.testParseToNumber(month.value);\r\n    date.isValid = InternalDateValidator.testParseToNumber(date.value);\r\n\r\n    if (withSeparator) {\r\n      const separatorFragment: InternalDateFragment = {\r\n        type: InternalDateComponentType.Separator,\r\n        value: separator,\r\n        length: LENGTH_SEPARATOR,\r\n      };\r\n      fragments.splice(1, 0, separatorFragment);\r\n      fragments.splice(3, 0, separatorFragment);\r\n    }\r\n\r\n    return fragments;\r\n  }\r\n\r\n  public static parseValueToDate(\r\n    value: string | null,\r\n    order: InternalDateOrder = defaultDateComponentsOrder,\r\n  ): InternalDateComponents | null {\r\n    if (!value) {\r\n      return null;\r\n    }\r\n\r\n    const re =\r\n      order === InternalDateOrder.MDY ? RE_ORDER_MDY : order === InternalDateOrder.DMY ? RE_ORDER_DMY : RE_ORDER_YMD;\r\n    if (!re.test(value)) {\r\n      return null;\r\n    }\r\n    const match = re.exec(value);\r\n    const dateComponents: InternalDateComponents = { ...emptyDateComponents };\r\n\r\n    if (match) {\r\n      const matchFinished = match\r\n        .slice(1)\r\n        .map(item => (InternalDateValidator.testParseToNumber(item) ? Number(item) : null));\r\n      if (order === InternalDateOrder.YMD) {\r\n        ({ 0: dateComponents.year, 1: dateComponents.month, 2: dateComponents.date } = matchFinished);\r\n      } else if (order === InternalDateOrder.MDY) {\r\n        ({ 2: dateComponents.year, 0: dateComponents.month, 1: dateComponents.date } = matchFinished);\r\n      } else if (order === InternalDateOrder.DMY) {\r\n        ({ 2: dateComponents.year, 1: dateComponents.month, 0: dateComponents.date } = matchFinished);\r\n      }\r\n    }\r\n    return dateComponents;\r\n  }\r\n\r\n  public static dateComponentsStringToNumber(\r\n    componentsRaw: InternalDateComponentsRaw | null,\r\n  ): InternalDateComponentsNumber {\r\n    if (componentsRaw === null) {\r\n      return { year: 0, month: 0, date: 0 };\r\n    }\r\n    const { year, month, date } = componentsRaw;\r\n    return { year: Number(year), month: Number(month), date: Number(date) };\r\n  }\r\n\r\n  public static dateToInternalString(components: InternalDateComponentsRaw): string {\r\n    return InternalDateTransformer.dateToFragments(components, {\r\n      withPad: true,\r\n      withSeparator: false,\r\n      order: InternalDateOrder.DMY,\r\n    })\r\n      .filter(({ value }) => value !== null)\r\n      .map(({ valueWithPad }) => valueWithPad)\r\n      .join(InternalDateSeparator.Dot);\r\n  }\r\n}\r\n"]}