{"version":3,"sources":["InternalDateValidator.ts"],"names":["InternalDateValidator","checkForNull","type","year","month","date","undefined","InternalDateComponentType","Year","Month","All","checkLimits","value","InternalDateGetter","getDefaultMin","getDefaultMax","Date","compareWithNativeDate","nativeDate","UTC","getUTCFullYear","getUTCMonth","getUTCDate","checkRangeFully","startDate","endDate","Infinity","checkRangePiecemeal","startComponents","endComponents","startYear","startMonth","endYear","endMonth","testParseToNumber","Number","isNaN","parseInt","isEqualDateValues","a","b","toInternalString","isEqualDateFormats","getOrder","getSeparator"],"mappings":"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","sourcesContent":["import { InternalDate } from './InternalDate';\r\nimport { InternalDateGetter } from './InternalDateGetter';\r\nimport {\r\n  InternalDateComponentRaw,\r\n  InternalDateComponentsNumber,\r\n  InternalDateComponentsRaw,\r\n  InternalDateComponentType,\r\n} from './types';\r\n\r\nexport class InternalDateValidator {\r\n  public static checkForNull({ year, month, date }: InternalDateComponentsRaw, type?: InternalDateComponentType) {\r\n    if (type !== undefined) {\r\n      if (type === InternalDateComponentType.Year) {\r\n        return year !== null;\r\n      } else if (type === InternalDateComponentType.Month) {\r\n        return month !== null;\r\n      } else if (type === InternalDateComponentType.All) {\r\n        return year !== null && month !== null && date !== null;\r\n      }\r\n      return date !== null;\r\n    }\r\n    return !(year === null || month === null || date === null);\r\n  }\r\n\r\n  public static checkLimits(\r\n    { year, month, date }: InternalDateComponentsNumber,\r\n    type?: InternalDateComponentType,\r\n  ): boolean {\r\n    if (type !== undefined) {\r\n      const value =\r\n        type === InternalDateComponentType.Year ? year : type === InternalDateComponentType.Month ? month : date;\r\n\r\n      return value >= InternalDateGetter.getDefaultMin(type) && value <= InternalDateGetter.getDefaultMax(type);\r\n    }\r\n    return (\r\n      year >= InternalDateGetter.getDefaultMin(InternalDateComponentType.Year) &&\r\n      year <= InternalDateGetter.getDefaultMax(InternalDateComponentType.Year) &&\r\n      month >= InternalDateGetter.getDefaultMin(InternalDateComponentType.Month) &&\r\n      month <= InternalDateGetter.getDefaultMax(InternalDateComponentType.Month) &&\r\n      date >= InternalDateGetter.getDefaultMin(InternalDateComponentType.Date) &&\r\n      date <= InternalDateGetter.getDefaultMax(InternalDateComponentType.Date)\r\n    );\r\n  }\r\n\r\n  public static compareWithNativeDate({ year, month, date }: InternalDateComponentsNumber): boolean {\r\n    const nativeDate: Date = new Date(Date.UTC(year, month - 1, date));\r\n    return (\r\n      nativeDate.getUTCFullYear() === year && nativeDate.getUTCMonth() + 1 === month && nativeDate.getUTCDate() === date\r\n    );\r\n  }\r\n\r\n  public static checkRangeFully(date: number, startDate: number | null, endDate: number | null): boolean {\r\n    if (startDate === null && endDate === null) {\r\n      return true;\r\n    }\r\n    startDate = startDate || -Infinity;\r\n    endDate = endDate || Infinity;\r\n    return date >= startDate && date <= endDate;\r\n  }\r\n\r\n  public static checkRangePiecemeal(\r\n    type: InternalDateComponentType,\r\n    { year, month, date }: InternalDateComponentsNumber,\r\n    startComponents: InternalDateComponentsNumber | null,\r\n    endComponents: InternalDateComponentsNumber | null,\r\n  ): boolean {\r\n    if (startComponents === null && endComponents === null) {\r\n      return true;\r\n    }\r\n    const { year: startYear = -Infinity, month: startMonth = -Infinity, date: startDate = -Infinity } =\r\n      startComponents || {};\r\n    const { year: endYear = Infinity, month: endMonth = Infinity, date: endDate = Infinity } = endComponents || {};\r\n\r\n    if (type === InternalDateComponentType.Year) {\r\n      return !(year < startYear || year > endYear);\r\n    } else if (type === InternalDateComponentType.Month) {\r\n      return !((year === startYear && month < startMonth) || (year === endYear && month > endMonth));\r\n    } else if (type === InternalDateComponentType.Date) {\r\n      return !(\r\n        (year === startYear && month === startMonth && date < startDate) ||\r\n        (year === endYear && month === endMonth && date > endDate)\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public static testParseToNumber(value: InternalDateComponentRaw): boolean {\r\n    return value !== null && (typeof value === 'number' || !Number.isNaN(parseInt(value, 10)));\r\n  }\r\n\r\n  public static isEqualDateValues(a: InternalDate, b: InternalDate): boolean {\r\n    return a.toInternalString() === b.toInternalString();\r\n  }\r\n\r\n  public static isEqualDateFormats(a: InternalDate, b: InternalDate): boolean {\r\n    return a.getOrder() === b.getOrder() && a.getSeparator() === b.getSeparator();\r\n  }\r\n}\r\n"]}