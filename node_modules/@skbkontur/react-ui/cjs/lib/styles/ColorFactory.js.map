{"version":3,"sources":["ColorFactory.ts"],"names":["RGB_REGEX","RGBA_REGEX","HSL_REGEX","HSLA_REGEX","HEX_REGEX","ColorFactory","create","input","cache","instantiate","ColorObject","toLowerCase","trim","isKeyword","fromKeyword","startsWith","parts","r","g","b","a","fromRGB","h","s","l","fromHSL","fromHex","Object","prototype","hasOwnProperty","call","ColorKeywords","keyword","hexString","type","test","Error","colorCode","substring","rgb","length","match","forEach","c","i","parseInt","split","gray","Math","round","hDeg","t1","t2"],"mappings":"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","sourcesContent":["import warning from 'warning';\r\n\r\nimport { clamp, extractColorParts, hue2rgb, parseHSLParts, parseRGBParts } from './ColorHelpers';\r\nimport { ColorKeywords } from './ColorKeywords';\r\nimport { ColorKeywordsType, ColorObject, ColorType, RGBTuple } from './ColorObject';\r\n\r\ninterface ColorFactoryCacheType {\r\n  [key: string]: ColorObject;\r\n}\r\n\r\nconst RGB_REGEX = /rgb\\(\\s*(\\d{1,3}(?:(?:\\.\\d+)?%)?)\\s*,\\s*(\\d{1,3}(?:(?:\\.\\d+)?%)?)\\s*,\\s*(\\d{1,3}(?:(?:\\.\\d+)?%)?)\\s*\\)/;\r\nconst RGBA_REGEX = /rgba\\(\\s*(\\d{1,3}(?:(?:\\.\\d+)?%)?)\\s*,\\s*(\\d{1,3}(?:(?:\\.\\d+)?%)?)\\s*,\\s*(\\d{1,3}(?:(?:\\.\\d+)?%)?)\\s*,\\s*(0|0\\.\\d+|1|1\\.0+|\\d{1,3}(?:(?:\\.\\d+)?%))\\s*\\)/;\r\nconst HSL_REGEX = /hsl\\(\\s*(\\d{1,3})\\s*,\\s*(0|0\\.\\d+|1|1\\.0+|\\d{1,3}(?:(?:\\.\\d+)?%))\\s*,\\s*(0|0\\.\\d+|1|1\\.0+|\\d{1,3}(?:(?:\\.\\d+)?%))\\s*\\)/;\r\nconst HSLA_REGEX = /hsla\\(\\s*(\\d{1,3})\\s*,\\s*(0|0\\.\\d+|1|1\\.0+|\\d{1,3}(?:(?:\\.\\d+)?%))\\s*,\\s*(0|0\\.\\d+|1|1\\.0+|\\d{1,3}(?:(?:\\.\\d+)?%))\\s*,\\s*(0|0\\.\\d+|1|1\\.0+|\\d{1,3}(?:(?:\\.\\d+)?%))\\s*\\)/;\r\nconst HEX_REGEX = /^#([0-9a-f]{3}|[0-9a-f]{6})$/;\r\n\r\nexport class ColorFactory {\r\n  public static create(input: string) {\r\n    if (!this.cache[input]) {\r\n      this.cache[input] = this.instantiate(input);\r\n    }\r\n\r\n    return this.cache[input];\r\n  }\r\n\r\n  private static cache: ColorFactoryCacheType = Object.create(null);\r\n\r\n  private static instantiate(input: string) {\r\n    if (typeof input !== 'string') {\r\n      warning(false, `Invalid type of input (${typeof input}), expected a string. Returning transparent color`);\r\n      return new ColorObject([0, 0, 0], 1.0, 'transparent');\r\n    }\r\n    input = input.toLowerCase().trim();\r\n\r\n    if (input === 'transparent') {\r\n      return new ColorObject([0, 0, 0], 0, 'transparent');\r\n    } else if (this.isKeyword(input)) {\r\n      return this.fromKeyword(input);\r\n    } else if (input.startsWith('rgb')) {\r\n      const parts = extractColorParts(input, RGB_REGEX, RGBA_REGEX);\r\n      let { r, g, b, a } = parseRGBParts(parts);\r\n\r\n      r = clamp(r, 255);\r\n      g = clamp(g, 255);\r\n      b = clamp(b, 255);\r\n      a = clamp(a, 1);\r\n\r\n      return this.fromRGB(r, g, b, a);\r\n    } else if (input.startsWith('hsl')) {\r\n      const parts = extractColorParts(input, HSL_REGEX, HSLA_REGEX);\r\n      let { h, s, l, a } = parseHSLParts(parts);\r\n\r\n      h = clamp(h, 360);\r\n      s = clamp(s, 1);\r\n      l = clamp(l, 1);\r\n      a = clamp(a, 1);\r\n\r\n      return this.fromHSL(h, s, l, a);\r\n    }\r\n\r\n    return this.fromHex(input);\r\n  }\r\n\r\n  private static isKeyword(input: string): input is ColorKeywordsType {\r\n    return Object.prototype.hasOwnProperty.call(ColorKeywords, input);\r\n  }\r\n\r\n  private static fromKeyword(keyword: ColorKeywordsType) {\r\n    return this.fromHex(ColorKeywords[keyword], keyword);\r\n  }\r\n\r\n  private static fromHex(hexString: string, type: ColorType = 'hex') {\r\n    if (!HEX_REGEX.test(hexString)) {\r\n      throw new Error(`${hexString} is not a valid hex color string`);\r\n    }\r\n\r\n    const colorCode = hexString.substring(1);\r\n    const rgb: RGBTuple = [0, 0, 0];\r\n    if (colorCode.length === 6) {\r\n      colorCode.match(/.{2}/g)!.forEach((c, i) => {\r\n        rgb[i] = parseInt(c, 16);\r\n      });\r\n    } else if (colorCode.length === 3) {\r\n      colorCode.split('').forEach((c, i) => {\r\n        rgb[i] = parseInt(c + c, 16);\r\n      });\r\n    }\r\n    return new ColorObject(rgb, 1.0, type);\r\n  }\r\n\r\n  private static fromRGB(r: number, g: number, b: number, a = 1.0) {\r\n    return new ColorObject([r, g, b], a, a < 1 ? 'rgba' : 'rgb');\r\n  }\r\n\r\n  private static fromHSL(h: number, s: number, l: number, a = 1.0) {\r\n    if (s === 0) {\r\n      const gray = Math.round(l * 255);\r\n      return new ColorObject([gray, gray, gray], a, a < 1 ? 'hsla' : 'hsl');\r\n    }\r\n\r\n    const hDeg = h / 360;\r\n    const t1 = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n    const t2 = l * 2 - t1;\r\n\r\n    const r = hue2rgb(hDeg + 1 / 3, t1, t2);\r\n    const g = hue2rgb(hDeg, t1, t2);\r\n    const b = hue2rgb(hDeg - 1 / 3, t1, t2);\r\n\r\n    const rgb: RGBTuple = [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\r\n    return new ColorObject(rgb, a, a < 1 ? 'hsla' : 'hsl');\r\n  }\r\n}\r\n"]}