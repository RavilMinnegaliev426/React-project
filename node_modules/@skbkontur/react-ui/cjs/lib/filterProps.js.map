{"version":3,"sources":["filterProps.ts"],"names":["filterProps","props","allowed","ret","key"],"mappings":";;;;;;AAMO,SAASA,WAAT;;;;;;;AAOLC,KAPK,EAOSC,OAPT,EAOmC;AACxC,MAAMC,GAAG,GAAG,EAAZ;AACA,OAAK,IAAMC,GAAX,IAAkBH,KAAlB,EAAyB;AACvB,QAAIC,OAAO,CAACE,GAAD,CAAX,EAAkB;AAChB;AACAD,MAAAA,GAAG,CAACC,GAAD,CAAH,GAAWH,KAAK,CAACG,GAAD,CAAhB;AACD;AACF;AACD,SAAOD,GAAP;AACD","sourcesContent":["export type Filter<T, U> = T extends U ? T : never;\r\n\r\nexport type True<T> = { [K in keyof T]: T[K] extends true ? K : never }[keyof T];\r\n\r\nexport type AmbiguousBool<T> = { [K in keyof T]: T[K] extends false ? never : T[K] extends true ? never : K }[keyof T];\r\n\r\nexport function filterProps<\r\n  Props extends Record<string, any>,\r\n  Allowed extends Record<string, boolean>,\r\n  Specific extends Filter<keyof Props, True<Allowed>>,\r\n  // If value neither true nor false, it should be optional\r\n  Optional extends Filter<keyof Props, AmbiguousBool<Allowed>>,\r\n  Result extends { [P in Specific]: Props[P] } & { [Q in Optional]?: Props[Q] }\r\n>(props: Props, allowed: Allowed): Result {\r\n  const ret = {} as any;\r\n  for (const key in props) {\r\n    if (allowed[key]) {\r\n      // @ts-ignore\r\n      ret[key] = props[key];\r\n    }\r\n  }\r\n  return ret;\r\n}\r\n"]}