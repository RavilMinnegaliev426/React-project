{"version":3,"sources":["fetch.ts"],"names":["fetch","uri","options","method","xhr","createXHR","promise","Promise","resolve","reject","onerror","ontimeout","onload","ok","status","statusText","text","responseText","json","JSON","parse","open","send","body","global","XDomainRequest","XMLHttpRequest"],"mappings":";;;;;;;;;;AAUO,SAASA,KAAT,CAAeC,GAAf,EAA4BC,OAA5B,EAA8F,KAAlEA,OAAkE,cAAlEA,OAAkE,GAAZ,EAAY;AACnG,MAAMC,MAAM,GAAGD,OAAO,CAACC,MAAR,IAAkB,KAAjC;AACA,MAAMC,GAAG,GAAGC,SAAS,EAArB;;AAEA,MAAMC,OAAO,GAAG,IAAIC,OAAJ,CAA6B,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAChEL,IAAAA,GAAG,CAACM,OAAJ,GAAcD,MAAd;AACAL,IAAAA,GAAG,CAACO,SAAJ,GAAgBF,MAAhB;;AAEAL,IAAAA,GAAG,CAACQ,MAAJ,GAAa,YAAM;AACjBJ,MAAAA,OAAO,CAAC;AACNK,QAAAA,EAAE,EAAET,GAAG,CAACU,MAAJ,IAAc,GAAd,IAAqBV,GAAG,CAACU,MAAJ,GAAa,GADhC;AAENA,QAAAA,MAAM,EAAEV,GAAG,CAACU,MAFN;AAGNC,QAAAA,UAAU,EAAEX,GAAG,CAACW,UAHV;AAINC,QAAAA,IAAI,EAAE,wBAAMT,OAAO,CAACC,OAAR,CAAgBJ,GAAG,CAACa,YAApB,CAAN,EAJA;AAKNC,QAAAA,IAAI,EAAE,wBAAMX,OAAO,CAACC,OAAR,CAAgBW,IAAI,CAACC,KAAL,CAAWhB,GAAG,CAACa,YAAf,CAAhB,CAAN,EALA,EAAD,CAAP;;AAOD,KARD;AASD,GAbe,CAAhB;;AAeAb,EAAAA,GAAG,CAACiB,IAAJ,CAASlB,MAAT,EAAiBF,GAAjB;AACAG,EAAAA,GAAG,CAACkB,IAAJ,CAASpB,OAAO,CAACqB,IAAjB;;AAEA,SAAOjB,OAAP;AACD;;AAED,SAASD,SAAT,GAAqB;AACnB;AACA,MAAImB,MAAM,CAACC,cAAX,EAA2B;AACzB;AACA,WAAO,IAAIA,cAAJ,EAAP;AACD;AACD,SAAO,IAAIC,cAAJ,EAAP;AACD","sourcesContent":["interface ApiResponseType {\r\n  ok: boolean;\r\n  status: number;\r\n  statusText: string;\r\n  text: () => Promise<string>;\r\n  json: () => Promise<Record<string, any>>;\r\n}\r\n\r\ntype Result = Promise<ApiResponseType>;\r\n\r\nexport function fetch(uri: string, options: { method?: 'GET' | 'POST'; body?: string } = {}): Result {\r\n  const method = options.method || 'GET';\r\n  const xhr = createXHR();\r\n\r\n  const promise = new Promise<ApiResponseType>((resolve, reject) => {\r\n    xhr.onerror = reject;\r\n    xhr.ontimeout = reject;\r\n\r\n    xhr.onload = () => {\r\n      resolve({\r\n        ok: xhr.status >= 200 && xhr.status < 300,\r\n        status: xhr.status,\r\n        statusText: xhr.statusText,\r\n        text: () => Promise.resolve(xhr.responseText),\r\n        json: () => Promise.resolve(JSON.parse(xhr.responseText)),\r\n      });\r\n    };\r\n  });\r\n\r\n  xhr.open(method, uri);\r\n  xhr.send(options.body);\r\n\r\n  return promise;\r\n}\r\n\r\nfunction createXHR() {\r\n  // @ts-ignore\r\n  if (global.XDomainRequest) {\r\n    // @ts-ignore\r\n    return new XDomainRequest();\r\n  }\r\n  return new XMLHttpRequest();\r\n}\r\n"]}