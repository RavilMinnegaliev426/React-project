{"version":3,"sources":["LayoutEvents.ts"],"names":["emitterCache","getEmitter","EventEmitter","listenBrowserEvents","window","addEventListener","emit","unlistenBrowserEvents","removeEventListener","addListener","callback","emitter","listeners","length","remove","removeListener"],"mappings":"kLAAA;AACA;;AAEA,IAAIA,YAAJ;AACA,SAASC,UAAT,GAAsB;AACpB,MAAI,CAACD,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAG,IAAIE,qBAAJ,EAAf;AACD;AACD,SAAOF,YAAP;AACD;;AAED,SAASG,mBAAT,GAA+B;AAC7BC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,IAAlC;AACAF,EAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,IAAlC;AACD;;AAED,SAASC,qBAAT,GAAiC;AAC/BH,EAAAA,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCF,IAArC;AACAF,EAAAA,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCF,IAArC;AACD;;AAEM,SAASG,WAAT,CAAqBC,QAArB,EAA2C;AAChD,MAAMC,OAAO,GAAGV,UAAU,EAA1B;AACA,MAAIU,OAAO,CAACC,SAAR,CAAkB,QAAlB,EAA4BC,MAA5B,KAAuC,CAA3C,EAA8C;AAC5CV,IAAAA,mBAAmB;AACpB;AACDQ,EAAAA,OAAO,CAACF,WAAR,CAAoB,QAApB,EAA8BC,QAA9B;AACA,SAAO;AACLI,IAAAA,MADK,oBACI;AACPH,MAAAA,OAAO,CAACI,cAAR,CAAuB,QAAvB,EAAiCL,QAAjC;AACA,UAAIC,OAAO,CAACC,SAAR,CAAkB,QAAlB,EAA4BC,MAA5B,KAAuC,CAA3C,EAA8C;AAC5CN,QAAAA,qBAAqB;AACtB;AACF,KANI,EAAP;;AAQD;;AAEM,SAASD,IAAT,GAAgB;AACrB,yCAAwB,YAAM;AAC5BL,IAAAA,UAAU,GAAGK,IAAb,CAAkB,QAAlB;AACD,GAFD;AAGD","sourcesContent":["import EventEmitter from 'eventemitter3';\r\nimport { unstable_batchedUpdates } from 'react-dom';\r\n\r\nlet emitterCache: EventEmitter;\r\nfunction getEmitter() {\r\n  if (!emitterCache) {\r\n    emitterCache = new EventEmitter();\r\n  }\r\n  return emitterCache;\r\n}\r\n\r\nfunction listenBrowserEvents() {\r\n  window.addEventListener('scroll', emit);\r\n  window.addEventListener('resize', emit);\r\n}\r\n\r\nfunction unlistenBrowserEvents() {\r\n  window.removeEventListener('scroll', emit);\r\n  window.removeEventListener('resize', emit);\r\n}\r\n\r\nexport function addListener(callback: () => void) {\r\n  const emitter = getEmitter();\r\n  if (emitter.listeners('layout').length === 0) {\r\n    listenBrowserEvents();\r\n  }\r\n  emitter.addListener('layout', callback);\r\n  return {\r\n    remove() {\r\n      emitter.removeListener('layout', callback);\r\n      if (emitter.listeners('layout').length === 0) {\r\n        unlistenBrowserEvents();\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nexport function emit() {\r\n  unstable_batchedUpdates(() => {\r\n    getEmitter().emit('layout');\r\n  });\r\n}\r\n"]}