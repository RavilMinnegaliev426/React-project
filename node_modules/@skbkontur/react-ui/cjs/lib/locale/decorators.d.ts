import React from 'react';
import { LocaleHelper } from './LocaleHelper';
import { LangCodes, LocaleControls } from './types';
export declare function locale<C>(controlName: keyof LocaleControls, localeHelper: LocaleHelper<C>): <T extends new (...args: any[]) => React.Component<{}, {}, any>>(constructor: T) => {
    new (...args: any[]): {
        context: import("./LocaleContext").LocaleContextProps;
        controlName: "Spinner" | "TokenInput" | "ComboBox" | "TopBar" | "Select" | "Paging" | "Logotype" | "DatePicker" | "Fias";
        localeHelper: LocaleHelper<C>;
        locale: C;
        readonly langCode: LangCodes;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<{}>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        render(): React.ReactNode;
        readonly props: Readonly<{}> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<{}>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<{}>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<{}>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<{}>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<{}>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<{}>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextType: React.Context<import("./LocaleContext").LocaleContextProps>;
} & T;
