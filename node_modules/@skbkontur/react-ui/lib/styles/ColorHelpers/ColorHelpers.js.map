{"version":3,"sources":["ColorHelpers.ts"],"names":["clamp","val","max","Math","min","integerFromPercent","n","size","round","parseFloat","floatFromPercent","toFixed","roundToPrecision","precision","extractColorParts","input","solidRegex","alphaRegex","parts","exec","Error","parseRGBParts","r","parseToInteger","g","b","a","parseToFloat","isNaN","parseHSLParts","h","parseInt","s","l","part","endsWith","hue2rgb","hue","t1","t2"],"mappings":"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","sourcesContent":["export function clamp(val: number, max = 1) {\r\n  return Math.min(max, Math.max(0, val));\r\n}\r\n\r\nexport function integerFromPercent(n: string, size: number) {\r\n  return Math.round((parseFloat(n) * size) / 100);\r\n}\r\n\r\nexport function floatFromPercent(n: string) {\r\n  return parseFloat((parseFloat(n) / 100).toFixed(5));\r\n}\r\n\r\nexport function roundToPrecision(n: number, precision = 2) {\r\n  return parseFloat(n.toFixed(precision));\r\n}\r\n\r\nexport function extractColorParts(input: string, solidRegex: RegExp, alphaRegex?: RegExp) {\r\n  let parts = solidRegex.exec(input);\r\n  if (!parts && alphaRegex) {\r\n    parts = alphaRegex.exec(input);\r\n  }\r\n\r\n  if (!parts) {\r\n    throw new Error(`${input} does not match color patterns: [\r\n      ${solidRegex}\r\n      ${alphaRegex}\r\n    ]`);\r\n  }\r\n\r\n  return parts;\r\n}\r\n\r\nexport function parseRGBParts(parts: string[]) {\r\n  const r = parseToInteger(parts[1], 255);\r\n  const g = parseToInteger(parts[2], 255);\r\n  const b = parseToInteger(parts[3], 255);\r\n  const a = parts[4] ? parseToFloat(parts[4]) : 1.0;\r\n\r\n  if (isNaN(r)) {\r\n    throw new Error(`Could not parse red=${parts[1]} to number`);\r\n  }\r\n  if (isNaN(g)) {\r\n    throw new Error(`Could not parse green=${parts[2]} to number`);\r\n  }\r\n  if (isNaN(b)) {\r\n    throw new Error(`Could not parse blue=${parts[3]} to number`);\r\n  }\r\n  if (isNaN(a)) {\r\n    throw new Error(`Could not parse alpha=${parts[4]} to number`);\r\n  }\r\n  return { r, g, b, a };\r\n}\r\n\r\nexport function parseHSLParts(parts: string[]) {\r\n  const h = parseInt(parts[1], 10);\r\n  const s = parseToFloat(parts[2]);\r\n  const l = parseToFloat(parts[3]);\r\n  const a = parts[4] ? parseToFloat(parts[4]) : 1.0;\r\n\r\n  if (isNaN(h)) {\r\n    throw new Error(`Could not parse hue=${parts[1]} to number`);\r\n  } else if (isNaN(s)) {\r\n    throw new Error(`Could not parse saturation=${parts[2]} to number`);\r\n  } else if (isNaN(l)) {\r\n    throw new Error(`Could not parse lightness=${parts[3]} to number`);\r\n  } else if (isNaN(a)) {\r\n    throw new Error(`Could not parse alpha=${parts[4]} to number`);\r\n  }\r\n\r\n  return { h, s, l, a };\r\n}\r\n\r\nexport function parseToInteger(part: string, size: number) {\r\n  return part.endsWith('%') ? integerFromPercent(part, size) : parseInt(part, 10);\r\n}\r\n\r\nexport function parseToFloat(part: string) {\r\n  return part.endsWith('%') ? floatFromPercent(part) : parseFloat(part);\r\n}\r\n\r\nexport function hue2rgb(hue: number, t1: number, t2: number) {\r\n  if (hue < 0) {\r\n    hue += 1;\r\n  }\r\n  if (hue > 1) {\r\n    hue -= 1;\r\n  }\r\n  if (hue < 1 / 6) {\r\n    return t2 + (t1 - t2) * 6 * hue;\r\n  }\r\n  if (hue < 1 / 2) {\r\n    return t1;\r\n  }\r\n  if (hue < 2 / 3) {\r\n    return t2 + (t1 - t2) * (2 / 3 - hue) * 6;\r\n  }\r\n  return t2;\r\n}\r\n"]}