{"version":3,"sources":["decorators.tsx"],"names":["defaultLangCode","LocaleContext","locale","controlName","localeHelper","constructor","LocaleDecorator","context","localeFromContext","Object","assign","get","langCode","l","contextType","defineProperty","value","name"],"mappings":";;AAEA,SAASA,eAAT,QAAgC,aAAhC;AACA,SAASC,aAAT,QAA8B,iBAA9B;;;;AAIA,OAAO,SAASC,MAAT,CAAmBC,WAAnB,EAAsDC,YAAtD,EAAqF;AAC1F,SAAO,UAAoDC,WAApD,EAAuE;AAC5E,QAAMC,eAAe;;AAEZC,QAAAA,OAFY;AAGZJ,QAAAA,WAHY,GAGwBA,WAHxB;AAIZC,QAAAA,YAJY,GAIoBA,YAJpB;;AAMI;AACrB,cAAMI,iBAAiB,2BAAG,KAAKD,OAAL,CAAaL,MAAhB,qBAAG,qBAAsB,KAAKC,WAA3B,CAA1B;AACA,iBAAOM,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKN,YAAL,CAAkBO,GAAlB,CAAsB,KAAKJ,OAAL,CAAaK,QAAnC,CAAlB,EAAgEJ,iBAAhE,CAAP;AACD,SATkB;;AAWDK,QAAAA,CAXC,EAWK;AACtB;AACD,SAbkB;;AAec;AAC/B,0CAAO,KAAKN,OAAL,CAAaK,QAApB,oCAAgCZ,eAAhC;AACD,SAjBkB,8BAAiBK,WAAjB,UACLS,WADK,GACSb,aADT,QAArB;;AAmBAQ,IAAAA,MAAM,CAACM,cAAP,CAAsBT,eAAtB,EAAuC,MAAvC,EAA+C,EAAEU,KAAK,EAAEX,WAAW,CAACY,IAArB,EAA/C;AACA,WAAOX,eAAP;AACD,GAtBD;AAuBD","sourcesContent":["import React from 'react';\r\n\r\nimport { defaultLangCode } from './constants';\r\nimport { LocaleContext } from './LocaleContext';\r\nimport { LocaleHelper } from './LocaleHelper';\r\nimport { LangCodes, LocaleControls } from './types';\r\n\r\nexport function locale<C>(controlName: keyof LocaleControls, localeHelper: LocaleHelper<C>) {\r\n  return <T extends new (...args: any[]) => React.Component>(constructor: T) => {\r\n    const LocaleDecorator = class extends constructor {\r\n      public static contextType = LocaleContext;\r\n      public context!: React.ContextType<typeof LocaleContext>;\r\n      public controlName: keyof LocaleControls = controlName;\r\n      public localeHelper: LocaleHelper<C> = localeHelper;\r\n\r\n      public get locale(): C {\r\n        const localeFromContext = this.context.locale?.[this.controlName];\r\n        return Object.assign({}, this.localeHelper.get(this.context.langCode), localeFromContext);\r\n      }\r\n\r\n      public set locale(l: C) {\r\n        // TODO альтернативная транспиляция декораторов ломает тесты\r\n      }\r\n\r\n      public get langCode(): LangCodes {\r\n        return this.context.langCode ?? defaultLangCode;\r\n      }\r\n    };\r\n    Object.defineProperty(LocaleDecorator, 'name', { value: constructor.name });\r\n    return LocaleDecorator;\r\n  };\r\n}\r\n"]}