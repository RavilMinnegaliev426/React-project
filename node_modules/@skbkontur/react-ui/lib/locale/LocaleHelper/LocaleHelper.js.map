{"version":3,"sources":["LocaleHelper.ts"],"names":["defaultLangCode","LocaleHelper","locales","langCode","get"],"mappings":"AAAA,SAASA,eAAT,QAAgC,aAAhC;;;AAGA,WAAaC,YAAb;;;;AAIE,wBAAmBC,OAAnB,EAAwDC,QAAxD,EAA+F,KAAvCA,QAAuC,cAAvCA,QAAuC,GAAjBH,eAAiB,OAH9EE,OAG8E,eAF9EF,eAE8E;AAC7F,SAAKE,OAAL,GAAeA,OAAf;AACA,SAAKF,eAAL,GAAuBG,QAAvB;AACD,GAPH;;AASSC,EAAAA,GATT,GASE,aAAWD,QAAX,EAA0D,KAA/CA,QAA+C,cAA/CA,QAA+C,GAAzB,KAAKH,eAAoB;AACxD,WAAO,KAAKE,OAAL,CAAaC,QAAb,KAA0B,KAAKD,OAAL,CAAa,KAAKF,eAAlB,CAA1B,IAAiE,EAAxE;AACD,GAXH","sourcesContent":["import { defaultLangCode } from './constants';\r\nimport { LangCodes } from './types';\r\n\r\nexport class LocaleHelper<C> {\r\n  private readonly locales: { [key in LangCodes]?: C };\r\n  private readonly defaultLangCode: LangCodes;\r\n\r\n  public constructor(locales: { [key in LangCodes]?: C }, langCode: LangCodes = defaultLangCode) {\r\n    this.locales = locales;\r\n    this.defaultLangCode = langCode;\r\n  }\r\n\r\n  public get(langCode: LangCodes = this.defaultLangCode): C {\r\n    return this.locales[langCode] || this.locales[this.defaultLangCode] || ({} as C);\r\n  }\r\n}\r\n"]}