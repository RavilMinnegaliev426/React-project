export declare const flush: () => void, hydrate: (ids: string[]) => void, cx: (...classNames: import("create-emotion").ClassNamesArg[]) => string, merge: (className: string) => string, getRegisteredStyles: (registeredStyles: string[], className: string) => string, injectGlobal: {
    (template: TemplateStringsArray, ...args: import("create-emotion").Interpolation<undefined>[]): void;
    (...args: import("create-emotion").Interpolation<undefined>[]): void;
}, keyframes: {
    (template: TemplateStringsArray, ...args: import("create-emotion").Interpolation<undefined>[]): string;
    (...args: import("create-emotion").Interpolation<undefined>[]): string;
}, css: {
    (template: TemplateStringsArray, ...args: import("create-emotion").Interpolation<undefined>[]): string;
    (...args: import("create-emotion").Interpolation<undefined>[]): string;
}, sheet: import("create-emotion").StyleSheet, cache: import("create-emotion").EmotionCache;
export declare const cssName: (className: string) => string;
export declare const memoizeStyle: <S extends {
    [className: string]: (() => string) | ((t: Readonly<typeof import("../../internal/themes/DefaultTheme").DefaultTheme> | Readonly<typeof import("../../internal/themes/FlatTheme").FlatTheme>) => string);
}>(styles: S) => S;
