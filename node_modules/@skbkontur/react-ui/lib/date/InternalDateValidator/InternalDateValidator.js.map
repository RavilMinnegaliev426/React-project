{"version":3,"sources":["InternalDateValidator.ts"],"names":["InternalDateGetter","InternalDateComponentType","InternalDateValidator","checkForNull","type","year","month","date","undefined","Year","Month","All","checkLimits","value","getDefaultMin","getDefaultMax","Date","compareWithNativeDate","nativeDate","UTC","getUTCFullYear","getUTCMonth","getUTCDate","checkRangeFully","startDate","endDate","Infinity","checkRangePiecemeal","startComponents","endComponents","startYear","startMonth","endYear","endMonth","testParseToNumber","Number","isNaN","parseInt","isEqualDateValues","a","b","toInternalString","isEqualDateFormats","getOrder","getSeparator"],"mappings":"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","sourcesContent":["import { InternalDate } from './InternalDate';\r\nimport { InternalDateGetter } from './InternalDateGetter';\r\nimport {\r\n  InternalDateComponentRaw,\r\n  InternalDateComponentsNumber,\r\n  InternalDateComponentsRaw,\r\n  InternalDateComponentType,\r\n} from './types';\r\n\r\nexport class InternalDateValidator {\r\n  public static checkForNull({ year, month, date }: InternalDateComponentsRaw, type?: InternalDateComponentType) {\r\n    if (type !== undefined) {\r\n      if (type === InternalDateComponentType.Year) {\r\n        return year !== null;\r\n      } else if (type === InternalDateComponentType.Month) {\r\n        return month !== null;\r\n      } else if (type === InternalDateComponentType.All) {\r\n        return year !== null && month !== null && date !== null;\r\n      }\r\n      return date !== null;\r\n    }\r\n    return !(year === null || month === null || date === null);\r\n  }\r\n\r\n  public static checkLimits(\r\n    { year, month, date }: InternalDateComponentsNumber,\r\n    type?: InternalDateComponentType,\r\n  ): boolean {\r\n    if (type !== undefined) {\r\n      const value =\r\n        type === InternalDateComponentType.Year ? year : type === InternalDateComponentType.Month ? month : date;\r\n\r\n      return value >= InternalDateGetter.getDefaultMin(type) && value <= InternalDateGetter.getDefaultMax(type);\r\n    }\r\n    return (\r\n      year >= InternalDateGetter.getDefaultMin(InternalDateComponentType.Year) &&\r\n      year <= InternalDateGetter.getDefaultMax(InternalDateComponentType.Year) &&\r\n      month >= InternalDateGetter.getDefaultMin(InternalDateComponentType.Month) &&\r\n      month <= InternalDateGetter.getDefaultMax(InternalDateComponentType.Month) &&\r\n      date >= InternalDateGetter.getDefaultMin(InternalDateComponentType.Date) &&\r\n      date <= InternalDateGetter.getDefaultMax(InternalDateComponentType.Date)\r\n    );\r\n  }\r\n\r\n  public static compareWithNativeDate({ year, month, date }: InternalDateComponentsNumber): boolean {\r\n    const nativeDate: Date = new Date(Date.UTC(year, month - 1, date));\r\n    return (\r\n      nativeDate.getUTCFullYear() === year && nativeDate.getUTCMonth() + 1 === month && nativeDate.getUTCDate() === date\r\n    );\r\n  }\r\n\r\n  public static checkRangeFully(date: number, startDate: number | null, endDate: number | null): boolean {\r\n    if (startDate === null && endDate === null) {\r\n      return true;\r\n    }\r\n    startDate = startDate || -Infinity;\r\n    endDate = endDate || Infinity;\r\n    return date >= startDate && date <= endDate;\r\n  }\r\n\r\n  public static checkRangePiecemeal(\r\n    type: InternalDateComponentType,\r\n    { year, month, date }: InternalDateComponentsNumber,\r\n    startComponents: InternalDateComponentsNumber | null,\r\n    endComponents: InternalDateComponentsNumber | null,\r\n  ): boolean {\r\n    if (startComponents === null && endComponents === null) {\r\n      return true;\r\n    }\r\n    const { year: startYear = -Infinity, month: startMonth = -Infinity, date: startDate = -Infinity } =\r\n      startComponents || {};\r\n    const { year: endYear = Infinity, month: endMonth = Infinity, date: endDate = Infinity } = endComponents || {};\r\n\r\n    if (type === InternalDateComponentType.Year) {\r\n      return !(year < startYear || year > endYear);\r\n    } else if (type === InternalDateComponentType.Month) {\r\n      return !((year === startYear && month < startMonth) || (year === endYear && month > endMonth));\r\n    } else if (type === InternalDateComponentType.Date) {\r\n      return !(\r\n        (year === startYear && month === startMonth && date < startDate) ||\r\n        (year === endYear && month === endMonth && date > endDate)\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public static testParseToNumber(value: InternalDateComponentRaw): boolean {\r\n    return value !== null && (typeof value === 'number' || !Number.isNaN(parseInt(value, 10)));\r\n  }\r\n\r\n  public static isEqualDateValues(a: InternalDate, b: InternalDate): boolean {\r\n    return a.toInternalString() === b.toInternalString();\r\n  }\r\n\r\n  public static isEqualDateFormats(a: InternalDate, b: InternalDate): boolean {\r\n    return a.getOrder() === b.getOrder() && a.getSeparator() === b.getSeparator();\r\n  }\r\n}\r\n"]}