import { InternalDateGetter } from "../InternalDateGetter";
import { InternalDateComponentType } from "../types";
export var InternalDateValidator =
/*#__PURE__*/
function () {
  function InternalDateValidator() {}

  InternalDateValidator.checkForNull = function checkForNull(_ref, type) {
    var year = _ref.year,
        month = _ref.month,
        date = _ref.date;

    if (type !== undefined) {
      if (type === InternalDateComponentType.Year) {
        return year !== null;
      } else if (type === InternalDateComponentType.Month) {
        return month !== null;
      } else if (type === InternalDateComponentType.All) {
        return year !== null && month !== null && date !== null;
      }

      return date !== null;
    }

    return !(year === null || month === null || date === null);
  };

  InternalDateValidator.checkLimits = function checkLimits(_ref2, type) {
    var year = _ref2.year,
        month = _ref2.month,
        date = _ref2.date;

    if (type !== undefined) {
      var value = type === InternalDateComponentType.Year ? year : type === InternalDateComponentType.Month ? month : date;
      return value >= InternalDateGetter.getDefaultMin(type) && value <= InternalDateGetter.getDefaultMax(type);
    }

    return year >= InternalDateGetter.getDefaultMin(InternalDateComponentType.Year) && year <= InternalDateGetter.getDefaultMax(InternalDateComponentType.Year) && month >= InternalDateGetter.getDefaultMin(InternalDateComponentType.Month) && month <= InternalDateGetter.getDefaultMax(InternalDateComponentType.Month) && date >= InternalDateGetter.getDefaultMin(InternalDateComponentType.Date) && date <= InternalDateGetter.getDefaultMax(InternalDateComponentType.Date);
  };

  InternalDateValidator.compareWithNativeDate = function compareWithNativeDate(_ref3) {
    var year = _ref3.year,
        month = _ref3.month,
        date = _ref3.date;
    var nativeDate = new Date(Date.UTC(year, month - 1, date));
    return nativeDate.getUTCFullYear() === year && nativeDate.getUTCMonth() + 1 === month && nativeDate.getUTCDate() === date;
  };

  InternalDateValidator.checkRangeFully = function checkRangeFully(date, startDate, endDate) {
    if (startDate === null && endDate === null) {
      return true;
    }

    startDate = startDate || -Infinity;
    endDate = endDate || Infinity;
    return date >= startDate && date <= endDate;
  };

  InternalDateValidator.checkRangePiecemeal = function checkRangePiecemeal(type, _ref4, startComponents, endComponents) {
    var year = _ref4.year,
        month = _ref4.month,
        date = _ref4.date;

    if (startComponents === null && endComponents === null) {
      return true;
    }

    var _ref5 = startComponents || {},
        _ref5$year = _ref5.year,
        startYear = _ref5$year === void 0 ? -Infinity : _ref5$year,
        _ref5$month = _ref5.month,
        startMonth = _ref5$month === void 0 ? -Infinity : _ref5$month,
        _ref5$date = _ref5.date,
        startDate = _ref5$date === void 0 ? -Infinity : _ref5$date;

    var _ref6 = endComponents || {},
        _ref6$year = _ref6.year,
        endYear = _ref6$year === void 0 ? Infinity : _ref6$year,
        _ref6$month = _ref6.month,
        endMonth = _ref6$month === void 0 ? Infinity : _ref6$month,
        _ref6$date = _ref6.date,
        endDate = _ref6$date === void 0 ? Infinity : _ref6$date;

    if (type === InternalDateComponentType.Year) {
      return !(year < startYear || year > endYear);
    } else if (type === InternalDateComponentType.Month) {
      return !(year === startYear && month < startMonth || year === endYear && month > endMonth);
    } else if (type === InternalDateComponentType.Date) {
      return !(year === startYear && month === startMonth && date < startDate || year === endYear && month === endMonth && date > endDate);
    }

    return true;
  };

  InternalDateValidator.testParseToNumber = function testParseToNumber(value) {
    return value !== null && (typeof value === 'number' || !Number.isNaN(parseInt(value, 10)));
  };

  InternalDateValidator.isEqualDateValues = function isEqualDateValues(a, b) {
    return a.toInternalString() === b.toInternalString();
  };

  InternalDateValidator.isEqualDateFormats = function isEqualDateFormats(a, b) {
    return a.getOrder() === b.getOrder() && a.getSeparator() === b.getSeparator();
  };

  return InternalDateValidator;
}();