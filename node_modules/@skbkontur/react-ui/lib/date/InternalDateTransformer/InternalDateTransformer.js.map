{"version":3,"sources":["InternalDateTransformer.ts"],"names":["CHAR_PAD","defaultDateComponentsOrder","defaultDateComponentsSeparator","emptyDateComponents","LENGTH_DATE","LENGTH_MONTH","LENGTH_SEPARATOR","LENGTH_YEAR","RE_ORDER_DMY","RE_ORDER_MDY","RE_ORDER_YMD","InternalDateValidator","InternalDateComponentType","InternalDateOrder","InternalDateSeparator","InternalDateTransformer","dateToFragments","components","settings","order","separator","withSeparator","withPad","pad","year","type","Year","value","length","month","Month","date","Date","fragments","YMD","push","MDY","DMY","valueWithPad","padYear","padMonth","padDate","isValid","testParseToNumber","separatorFragment","Separator","splice","parseValueToDate","re","test","match","exec","dateComponents","matchFinished","slice","map","item","Number","dateComponentsStringToNumber","componentsRaw","dateToInternalString","filter","join","Dot","padStart","String","padDateComponent"],"mappings":"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","sourcesContent":["import {\r\n  CHAR_PAD,\r\n  defaultDateComponentsOrder,\r\n  defaultDateComponentsSeparator,\r\n  emptyDateComponents,\r\n  LENGTH_DATE,\r\n  LENGTH_MONTH,\r\n  LENGTH_SEPARATOR,\r\n  LENGTH_YEAR,\r\n  RE_ORDER_DMY,\r\n  RE_ORDER_MDY,\r\n  RE_ORDER_YMD,\r\n} from './constants';\r\nimport { InternalDateValidator } from './InternalDateValidator';\r\nimport {\r\n  InternalDateComponentRaw,\r\n  InternalDateComponents,\r\n  InternalDateComponentsNumber,\r\n  InternalDateComponentsRaw,\r\n  InternalDateComponentType,\r\n  InternalDateFragment,\r\n  InternalDateOrder,\r\n  InternalDateSeparator,\r\n  InternalDateToFragmentsSettings,\r\n} from './types';\r\n\r\nexport class InternalDateTransformer {\r\n  public static padStart = (value: InternalDateComponentRaw, length: number, pad: string = CHAR_PAD): string =>\r\n    String(value || '').padStart(length, pad);\r\n\r\n  public static padYear = (year: InternalDateComponentRaw, pad?: string): string =>\r\n    InternalDateTransformer.padStart(year, LENGTH_YEAR, pad);\r\n  public static padMonth = (month: InternalDateComponentRaw, pad?: string): string =>\r\n    InternalDateTransformer.padStart(month, LENGTH_MONTH, pad);\r\n  public static padDate = (date: InternalDateComponentRaw, pad?: string): string =>\r\n    InternalDateTransformer.padStart(date, LENGTH_DATE, pad);\r\n\r\n  public static padDateComponent = (\r\n    type: InternalDateComponentType | null,\r\n    value: InternalDateComponentRaw,\r\n    pad?: string,\r\n  ): string => {\r\n    if (type === InternalDateComponentType.Year) {\r\n      return InternalDateTransformer.padYear(value, pad);\r\n    } else if (type === InternalDateComponentType.Month) {\r\n      return InternalDateTransformer.padMonth(value, pad);\r\n    } else if (type === InternalDateComponentType.Date) {\r\n      return InternalDateTransformer.padDate(value, pad);\r\n    }\r\n    return '';\r\n  };\r\n\r\n  public static dateToFragments(\r\n    components: InternalDateComponentsRaw,\r\n    settings: InternalDateToFragmentsSettings = {},\r\n  ): InternalDateFragment[] {\r\n    const {\r\n      order = defaultDateComponentsOrder,\r\n      separator = defaultDateComponentsSeparator,\r\n      withSeparator = false,\r\n      withPad = false,\r\n      pad,\r\n    } = settings;\r\n    const year: InternalDateFragment = {\r\n      type: InternalDateComponentType.Year,\r\n      value: components.year,\r\n      length: LENGTH_YEAR,\r\n    };\r\n    const month: InternalDateFragment = {\r\n      type: InternalDateComponentType.Month,\r\n      value: components.month,\r\n      length: LENGTH_MONTH,\r\n    };\r\n    const date: InternalDateFragment = {\r\n      type: InternalDateComponentType.Date,\r\n      value: components.date,\r\n      length: LENGTH_DATE,\r\n    };\r\n\r\n    const fragments: InternalDateFragment[] = [];\r\n    if (order === InternalDateOrder.YMD) {\r\n      fragments.push(year, month, date);\r\n    } else if (order === InternalDateOrder.MDY) {\r\n      fragments.push(month, date, year);\r\n    } else if (order === InternalDateOrder.DMY) {\r\n      fragments.push(date, month, year);\r\n    }\r\n\r\n    if (withPad) {\r\n      year.valueWithPad = InternalDateTransformer.padYear(year.value, pad);\r\n      month.valueWithPad = InternalDateTransformer.padMonth(month.value, pad);\r\n      date.valueWithPad = InternalDateTransformer.padDate(date.value, pad);\r\n    }\r\n\r\n    year.isValid = InternalDateValidator.testParseToNumber(year.value);\r\n    month.isValid = InternalDateValidator.testParseToNumber(month.value);\r\n    date.isValid = InternalDateValidator.testParseToNumber(date.value);\r\n\r\n    if (withSeparator) {\r\n      const separatorFragment: InternalDateFragment = {\r\n        type: InternalDateComponentType.Separator,\r\n        value: separator,\r\n        length: LENGTH_SEPARATOR,\r\n      };\r\n      fragments.splice(1, 0, separatorFragment);\r\n      fragments.splice(3, 0, separatorFragment);\r\n    }\r\n\r\n    return fragments;\r\n  }\r\n\r\n  public static parseValueToDate(\r\n    value: string | null,\r\n    order: InternalDateOrder = defaultDateComponentsOrder,\r\n  ): InternalDateComponents | null {\r\n    if (!value) {\r\n      return null;\r\n    }\r\n\r\n    const re =\r\n      order === InternalDateOrder.MDY ? RE_ORDER_MDY : order === InternalDateOrder.DMY ? RE_ORDER_DMY : RE_ORDER_YMD;\r\n    if (!re.test(value)) {\r\n      return null;\r\n    }\r\n    const match = re.exec(value);\r\n    const dateComponents: InternalDateComponents = { ...emptyDateComponents };\r\n\r\n    if (match) {\r\n      const matchFinished = match\r\n        .slice(1)\r\n        .map(item => (InternalDateValidator.testParseToNumber(item) ? Number(item) : null));\r\n      if (order === InternalDateOrder.YMD) {\r\n        ({ 0: dateComponents.year, 1: dateComponents.month, 2: dateComponents.date } = matchFinished);\r\n      } else if (order === InternalDateOrder.MDY) {\r\n        ({ 2: dateComponents.year, 0: dateComponents.month, 1: dateComponents.date } = matchFinished);\r\n      } else if (order === InternalDateOrder.DMY) {\r\n        ({ 2: dateComponents.year, 1: dateComponents.month, 0: dateComponents.date } = matchFinished);\r\n      }\r\n    }\r\n    return dateComponents;\r\n  }\r\n\r\n  public static dateComponentsStringToNumber(\r\n    componentsRaw: InternalDateComponentsRaw | null,\r\n  ): InternalDateComponentsNumber {\r\n    if (componentsRaw === null) {\r\n      return { year: 0, month: 0, date: 0 };\r\n    }\r\n    const { year, month, date } = componentsRaw;\r\n    return { year: Number(year), month: Number(month), date: Number(date) };\r\n  }\r\n\r\n  public static dateToInternalString(components: InternalDateComponentsRaw): string {\r\n    return InternalDateTransformer.dateToFragments(components, {\r\n      withPad: true,\r\n      withSeparator: false,\r\n      order: InternalDateOrder.DMY,\r\n    })\r\n      .filter(({ value }) => value !== null)\r\n      .map(({ valueWithPad }) => valueWithPad)\r\n      .join(InternalDateSeparator.Dot);\r\n  }\r\n}\r\n"]}