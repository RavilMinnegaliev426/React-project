{"version":3,"sources":["listenFocusOutside.ts"],"names":["ReactDOM","debounce","isFirefox","handlers","addHandleEvent","document","body","addEventListener","handleNativeFocus","leading","trailing","readyState","window","event","target","srcElement","forEach","handler","elements","some","containsTargetOrRenderContainer","unstable_batchedUpdates","callback","element","contains","container","findRenderContainer","node","rootNode","currentNode","parentNode","documentElement","Element","newContainerId","getAttribute","nextNode","querySelector","Error","listen","push","remove","index","indexOf","splice"],"mappings":"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","sourcesContent":["import ReactDOM from 'react-dom';\r\nimport debounce from 'lodash.debounce';\r\n\r\nimport { isFirefox } from './utils';\r\n\r\ninterface FocusOutsideEventHandler {\r\n  elements: HTMLElement[] | (() => HTMLElement[]);\r\n  callback: (event: Event) => void;\r\n}\r\n\r\nconst handlers: FocusOutsideEventHandler[] = [];\r\n\r\nfunction addHandleEvent() {\r\n  /**\r\n   * Firefox do not supports 'focusin' event.\r\n   * Focus events bubbles multiple time\r\n   * without possibilty to cancell bubbling.\r\n   * Using debounce to capture only first focus event\r\n   * Mozilla Firefix\r\n   *   ¯\\_(ツ)_/¯\r\n   */\r\n  document.body.addEventListener(\r\n    isFirefox ? 'focus' : ('focusin' as 'focus'),\r\n    isFirefox ? debounce(handleNativeFocus, 0, { leading: true, trailing: false }) : handleNativeFocus,\r\n    isFirefox,\r\n  );\r\n}\r\n\r\nif (typeof(document) !== 'undefined') {\r\n  if (document.readyState === 'complete') {\r\n    addHandleEvent();\r\n  } else {\r\n    window.addEventListener('load', addHandleEvent);\r\n  }\r\n}\r\n\r\nfunction handleNativeFocus(event: UIEvent) {\r\n  // FIXME: not safe casting\r\n  const target: HTMLElement = (event.target || event.srcElement) as HTMLElement;\r\n\r\n  handlers.forEach(handler => {\r\n    let elements = handler.elements;\r\n    if (typeof elements === 'function') {\r\n      elements = elements();\r\n    }\r\n\r\n    if (elements.some(containsTargetOrRenderContainer(target))) {\r\n      return;\r\n    }\r\n    ReactDOM.unstable_batchedUpdates(() => handler.callback(event));\r\n  });\r\n}\r\n\r\nexport function containsTargetOrRenderContainer(target: Element) {\r\n  return (element: Element) => {\r\n    if (!element) {\r\n      return false;\r\n    }\r\n    if (element.contains(target)) {\r\n      return true;\r\n    }\r\n    const container = findRenderContainer(target, element);\r\n    return !!container && element.contains(container);\r\n  };\r\n}\r\n\r\n/**\r\n * Searches RenderContainer placed in \"rootNode\" for \"node\"\r\n */\r\nfunction findRenderContainer(node: Element, rootNode: Element, container?: Element): Element | null {\r\n  const currentNode = node.parentNode;\r\n  if (\r\n    !currentNode ||\r\n    node === rootNode ||\r\n    currentNode === rootNode ||\r\n    currentNode === document.body ||\r\n    currentNode === document.documentElement ||\r\n    !(currentNode instanceof Element)\r\n  ) {\r\n    return container ? container : null;\r\n  }\r\n\r\n  const newContainerId = currentNode.getAttribute('data-rendered-container-id');\r\n  if (newContainerId) {\r\n    const nextNode = document.querySelector(`[data-render-container-id~=\"${newContainerId}\"]`);\r\n\r\n    if (!nextNode) {\r\n      throw Error(`Origin node for container with id ${newContainerId} was not found`);\r\n    }\r\n\r\n    return findRenderContainer(nextNode, rootNode, nextNode);\r\n  }\r\n\r\n  return findRenderContainer(currentNode, rootNode, container);\r\n}\r\n\r\nexport function listen(elements: HTMLElement[] | (() => HTMLElement[]), callback: (event: Event) => void) {\r\n  const handler = {\r\n    elements,\r\n    callback,\r\n  };\r\n  handlers.push(handler);\r\n\r\n  return {\r\n    remove() {\r\n      const index = handlers.indexOf(handler);\r\n      if (index > -1) {\r\n        handlers.splice(index, 1);\r\n      }\r\n    },\r\n  };\r\n}\r\n"]}