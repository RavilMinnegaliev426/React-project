import { ReactComponentLike } from 'prop-types';
export declare type Defaultize<P, D> = P extends any ? string extends keyof P ? P : Pick<P, Exclude<keyof P, keyof D>> & Partial<Pick<P, Extract<keyof P, keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof P>>> : never;
export declare type DefaultizeProps<C, P> = C extends {
    defaultProps: infer D;
} ? Defaultize<P, D> : P;
export declare const isMac: boolean;
export declare const isWindows: boolean;
export declare const isSafari: boolean;
export declare const isFirefox: boolean;
export declare const isOpera: boolean;
export declare const isChrome: boolean;
export declare const isEdge: boolean;
export declare const isIE11: boolean;
export declare const delay: (ms: number) => Promise<unknown>;
export declare const emptyHandler: () => void;
export declare class CancelationError extends Error {
    code: string;
}
export declare function taskWithDelay(task: () => void, ms: number): () => void;
export declare function isFunction<T>(x: T | Function): x is Function;
export declare function isFunctionalComponent(Component: ReactComponentLike): boolean;
export declare function escapeRegExpSpecChars(s: string): string;
export declare const getRandomID: () => string;
export declare const hasSvgAnimationSupport: boolean;
export declare const isExternalLink: (link: string) => boolean;
