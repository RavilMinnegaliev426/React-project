{"version":3,"sources":["ModalStack.ts"],"names":["EventEmitter","ModalStack","add","component","onChange","getStackInfo","emitter","mounted","unshift","changeHandler","addListener","emit","remove","removeListener","index","indexOf","splice","globalWithStack","global","__ReactUIStackInfo"],"mappings":";AACA,OAAOA,YAAP,MAAyB,eAAzB;;;;;;;;;;;;;;;AAeA,WAAaC,UAAb;AACgBC,EAAAA,GADhB,GACE;AACEC,EAAAA,SADF;AAEEC,EAAAA,QAFF;AAG0B;AACKH,IAAAA,UAAU,CAACI,YAAX,EADL,CAChBC,OADgB,yBAChBA,OADgB,CACPC,OADO,yBACPA,OADO;AAExBA,IAAAA,OAAO,CAACC,OAAR,CAAgBL,SAAhB;AACA,QAAMM,aAAa,GAAG,SAAhBA,aAAgB,WAAML,QAAQ,WAAKG,OAAL,EAAd,EAAtB;AACAD,IAAAA,OAAO,CAACI,WAAR,CAAoB,QAApB,EAA8BD,aAA9B;AACAH,IAAAA,OAAO,CAACK,IAAR,CAAa,QAAb;AACA,WAAO;AACLC,MAAAA,MAAM,EAAE,kBAAM;AACZN,QAAAA,OAAO,CAACO,cAAR,CAAuB,QAAvB,EAAiCJ,aAAjC;AACD,OAHI,EAAP;;AAKD,GAfH;;AAiBgBG,EAAAA,MAjBhB,GAiBE,gBAAqBT,SAArB,EAAiD;AAClBF,IAAAA,UAAU,CAACI,YAAX,EADkB,CACvCC,OADuC,0BACvCA,OADuC,CAC9BC,OAD8B,0BAC9BA,OAD8B;AAE/C,QAAMO,KAAK,GAAGP,OAAO,CAACQ,OAAR,CAAgBZ,SAAhB,CAAd;AACA,QAAIW,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBP,MAAAA,OAAO,CAACS,MAAR,CAAeF,KAAf,EAAsB,CAAtB;AACD;AACDR,IAAAA,OAAO,CAACK,IAAR,CAAa,QAAb;AACD,GAxBH;;AA0BiBN,EAAAA,YA1BjB,GA0BE,wBAAyC;AACvC,QAAMY,eAAe,GAAGC,MAAxB;AACA;AACED,MAAAA,eAAe,CAACE,kBAAhB;AACCF,MAAAA,eAAe,CAACE,kBAAhB,GAAqC;AACpCb,QAAAA,OAAO,EAAE,IAAIN,YAAJ,EAD2B;AAEpCO,QAAAA,OAAO,EAAE,EAF2B,EADtC,CADF;;;AAOD,GAnCH","sourcesContent":["import React from 'react';\r\nimport EventEmitter from 'eventemitter3';\r\n\r\ninterface StackInfo {\r\n  emitter: EventEmitter;\r\n  mounted: React.Component[];\r\n}\r\n\r\ninterface GlobalWithStackInfo {\r\n  __ReactUIStackInfo?: StackInfo;\r\n}\r\n\r\nexport interface ModalStackSubscription {\r\n  remove: () => void;\r\n}\r\n\r\nexport class ModalStack {\r\n  public static add(\r\n    component: React.Component,\r\n    onChange: (stack: ReadonlyArray<React.Component>) => void,\r\n  ): ModalStackSubscription {\r\n    const { emitter, mounted } = ModalStack.getStackInfo();\r\n    mounted.unshift(component);\r\n    const changeHandler = () => onChange([...mounted]);\r\n    emitter.addListener('change', changeHandler);\r\n    emitter.emit('change');\r\n    return {\r\n      remove: () => {\r\n        emitter.removeListener('change', changeHandler);\r\n      },\r\n    };\r\n  }\r\n\r\n  public static remove(component: React.Component) {\r\n    const { emitter, mounted } = ModalStack.getStackInfo();\r\n    const index = mounted.indexOf(component);\r\n    if (index !== -1) {\r\n      mounted.splice(index, 1);\r\n    }\r\n    emitter.emit('change');\r\n  }\r\n\r\n  private static getStackInfo(): StackInfo {\r\n    const globalWithStack = global as GlobalWithStackInfo;\r\n    return (\r\n      globalWithStack.__ReactUIStackInfo ||\r\n      (globalWithStack.__ReactUIStackInfo = {\r\n        emitter: new EventEmitter(),\r\n        mounted: [],\r\n      })\r\n    );\r\n  }\r\n}\r\n"]}