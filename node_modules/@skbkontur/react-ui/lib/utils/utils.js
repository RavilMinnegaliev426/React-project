import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import _wrapNativeSuper from "@babel/runtime/helpers/esm/wrapNativeSuper"; // NOTE: Copy-paste from @types/react
// NOTE Some checks are used from https://github.com/arasatasaygin/is.js

var platform = (navigator && navigator.platform || '').toLowerCase();
var userAgent = (navigator && navigator.userAgent || '').toLowerCase();
var vendor = (navigator && navigator.vendor || '').toLowerCase();
export var isMac = platform.includes("mac");
export var isWindows = platform.includes("win");
export var isSafari = /version\/(\d+).+?safari/.test(userAgent);
export var isFirefox = /(?:firefox|fxios)\/(\d+)/.test(userAgent);
export var isOpera = /(?:^opera.+?version|opr)\/(\d+)/.test(userAgent);
export var isChrome = vendor.includes("google inc") && /(?:chrome|crios)\/(\d+)/.test(userAgent) && !isOpera;
export var isEdge = userAgent.includes("edge/");
export var isIE11 = userAgent.includes("trident/");
export var delay = function delay(ms) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, ms);
  });
};
export var emptyHandler = function emptyHandler() {
  /* noop */
};
export var CancelationError =
/*#__PURE__*/
function (_Error) {
  _inheritsLoose(CancelationError, _Error);

  function CancelationError() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Error.call.apply(_Error, [this].concat(args)) || this;
    _this.code = 'CancelationError';
    return _this;
  }

  return CancelationError;
}(_wrapNativeSuper(Error));
export function taskWithDelay(task, ms) {
  var cancelationToken = function cancelationToken() {
    return null;
  };

  new Promise(function (resolve, reject) {
    cancelationToken = reject;
    setTimeout(resolve, ms);
  }).then(task)["catch"](function () {
    return null;
  });
  return cancelationToken;
}
export function isFunction(x) {
  return typeof x === 'function';
}
export function isFunctionalComponent(Component) {
  return typeof Component === 'function' && !(Component.prototype && Component.prototype.isReactComponent);
}
export function escapeRegExpSpecChars(s) {
  return s.replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
}
export var getRandomID = function getRandomID() {
  return Math.random().toString(16).slice(2);
};
export var hasSvgAnimationSupport = function () {
  if (document.createElementNS) {
    var namespaceURI = 'http://www.w3.org/2000/svg';
    var element = document.createElementNS(namespaceURI, 'animate');

    if (element) {
      return element.toString().includes("SVGAnimate");
    }
  }

  return false;
}();
export var isExternalLink = function isExternalLink(link) {
  return new RegExp("^(https?:)?//(?!" + window.location.host + ")\\S+", 'gi').test(link);
};