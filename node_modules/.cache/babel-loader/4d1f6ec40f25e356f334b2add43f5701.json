{"ast":null,"code":"export function fetch(uri, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var method = options.method || 'GET';\n  var xhr = createXHR();\n  var promise = new Promise(function (resolve, reject) {\n    xhr.onerror = reject;\n    xhr.ontimeout = reject;\n\n    xhr.onload = function () {\n      resolve({\n        ok: xhr.status >= 200 && xhr.status < 300,\n        status: xhr.status,\n        statusText: xhr.statusText,\n        text: function text() {\n          return Promise.resolve(xhr.responseText);\n        },\n        json: function json() {\n          return Promise.resolve(JSON.parse(xhr.responseText));\n        }\n      });\n    };\n  });\n  xhr.open(method, uri);\n  xhr.send(options.body);\n  return promise;\n}\n\nfunction createXHR() {\n  // @ts-ignore\n  if (global.XDomainRequest) {\n    // @ts-ignore\n    return new XDomainRequest();\n  }\n\n  return new XMLHttpRequest();\n}","map":{"version":3,"sources":["C:/Users/ravka/Desktop/react-typescript-task/node_modules/@skbkontur/react-ui/lib/net/fetch/fetch.js"],"names":["fetch","uri","options","method","xhr","createXHR","promise","Promise","resolve","reject","onerror","ontimeout","onload","ok","status","statusText","text","responseText","json","JSON","parse","open","send","body","global","XDomainRequest","XMLHttpRequest"],"mappings":"AAAA,OAAO,SAASA,KAAT,CAAeC,GAAf,EAAoBC,OAApB,EAA6B;AAClC,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,MAAIC,MAAM,GAAGD,OAAO,CAACC,MAAR,IAAkB,KAA/B;AACA,MAAIC,GAAG,GAAGC,SAAS,EAAnB;AACA,MAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACnDL,IAAAA,GAAG,CAACM,OAAJ,GAAcD,MAAd;AACAL,IAAAA,GAAG,CAACO,SAAJ,GAAgBF,MAAhB;;AAEAL,IAAAA,GAAG,CAACQ,MAAJ,GAAa,YAAY;AACvBJ,MAAAA,OAAO,CAAC;AACNK,QAAAA,EAAE,EAAET,GAAG,CAACU,MAAJ,IAAc,GAAd,IAAqBV,GAAG,CAACU,MAAJ,GAAa,GADhC;AAENA,QAAAA,MAAM,EAAEV,GAAG,CAACU,MAFN;AAGNC,QAAAA,UAAU,EAAEX,GAAG,CAACW,UAHV;AAINC,QAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpB,iBAAOT,OAAO,CAACC,OAAR,CAAgBJ,GAAG,CAACa,YAApB,CAAP;AACD,SANK;AAONC,QAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpB,iBAAOX,OAAO,CAACC,OAAR,CAAgBW,IAAI,CAACC,KAAL,CAAWhB,GAAG,CAACa,YAAf,CAAhB,CAAP;AACD;AATK,OAAD,CAAP;AAWD,KAZD;AAaD,GAjBa,CAAd;AAkBAb,EAAAA,GAAG,CAACiB,IAAJ,CAASlB,MAAT,EAAiBF,GAAjB;AACAG,EAAAA,GAAG,CAACkB,IAAJ,CAASpB,OAAO,CAACqB,IAAjB;AACA,SAAOjB,OAAP;AACD;;AAED,SAASD,SAAT,GAAqB;AACnB;AACA,MAAImB,MAAM,CAACC,cAAX,EAA2B;AACzB;AACA,WAAO,IAAIA,cAAJ,EAAP;AACD;;AAED,SAAO,IAAIC,cAAJ,EAAP;AACD","sourcesContent":["export function fetch(uri, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var method = options.method || 'GET';\n  var xhr = createXHR();\n  var promise = new Promise(function (resolve, reject) {\n    xhr.onerror = reject;\n    xhr.ontimeout = reject;\n\n    xhr.onload = function () {\n      resolve({\n        ok: xhr.status >= 200 && xhr.status < 300,\n        status: xhr.status,\n        statusText: xhr.statusText,\n        text: function text() {\n          return Promise.resolve(xhr.responseText);\n        },\n        json: function json() {\n          return Promise.resolve(JSON.parse(xhr.responseText));\n        }\n      });\n    };\n  });\n  xhr.open(method, uri);\n  xhr.send(options.body);\n  return promise;\n}\n\nfunction createXHR() {\n  // @ts-ignore\n  if (global.XDomainRequest) {\n    // @ts-ignore\n    return new XDomainRequest();\n  }\n\n  return new XMLHttpRequest();\n}"]},"metadata":{},"sourceType":"module"}