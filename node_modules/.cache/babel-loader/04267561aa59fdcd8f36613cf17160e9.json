{"ast":null,"code":"import { InternalDateGetter } from \"../InternalDateGetter\";\nimport { InternalDateComponentType } from \"../types\";\nexport var InternalDateValidator = /*#__PURE__*/function () {\n  function InternalDateValidator() {}\n\n  InternalDateValidator.checkForNull = function checkForNull(_ref, type) {\n    var year = _ref.year,\n        month = _ref.month,\n        date = _ref.date;\n\n    if (type !== undefined) {\n      if (type === InternalDateComponentType.Year) {\n        return year !== null;\n      } else if (type === InternalDateComponentType.Month) {\n        return month !== null;\n      } else if (type === InternalDateComponentType.All) {\n        return year !== null && month !== null && date !== null;\n      }\n\n      return date !== null;\n    }\n\n    return !(year === null || month === null || date === null);\n  };\n\n  InternalDateValidator.checkLimits = function checkLimits(_ref2, type) {\n    var year = _ref2.year,\n        month = _ref2.month,\n        date = _ref2.date;\n\n    if (type !== undefined) {\n      var value = type === InternalDateComponentType.Year ? year : type === InternalDateComponentType.Month ? month : date;\n      return value >= InternalDateGetter.getDefaultMin(type) && value <= InternalDateGetter.getDefaultMax(type);\n    }\n\n    return year >= InternalDateGetter.getDefaultMin(InternalDateComponentType.Year) && year <= InternalDateGetter.getDefaultMax(InternalDateComponentType.Year) && month >= InternalDateGetter.getDefaultMin(InternalDateComponentType.Month) && month <= InternalDateGetter.getDefaultMax(InternalDateComponentType.Month) && date >= InternalDateGetter.getDefaultMin(InternalDateComponentType.Date) && date <= InternalDateGetter.getDefaultMax(InternalDateComponentType.Date);\n  };\n\n  InternalDateValidator.compareWithNativeDate = function compareWithNativeDate(_ref3) {\n    var year = _ref3.year,\n        month = _ref3.month,\n        date = _ref3.date;\n    var nativeDate = new Date(Date.UTC(year, month - 1, date));\n    return nativeDate.getUTCFullYear() === year && nativeDate.getUTCMonth() + 1 === month && nativeDate.getUTCDate() === date;\n  };\n\n  InternalDateValidator.checkRangeFully = function checkRangeFully(date, startDate, endDate) {\n    if (startDate === null && endDate === null) {\n      return true;\n    }\n\n    startDate = startDate || -Infinity;\n    endDate = endDate || Infinity;\n    return date >= startDate && date <= endDate;\n  };\n\n  InternalDateValidator.checkRangePiecemeal = function checkRangePiecemeal(type, _ref4, startComponents, endComponents) {\n    var year = _ref4.year,\n        month = _ref4.month,\n        date = _ref4.date;\n\n    if (startComponents === null && endComponents === null) {\n      return true;\n    }\n\n    var _ref5 = startComponents || {},\n        _ref5$year = _ref5.year,\n        startYear = _ref5$year === void 0 ? -Infinity : _ref5$year,\n        _ref5$month = _ref5.month,\n        startMonth = _ref5$month === void 0 ? -Infinity : _ref5$month,\n        _ref5$date = _ref5.date,\n        startDate = _ref5$date === void 0 ? -Infinity : _ref5$date;\n\n    var _ref6 = endComponents || {},\n        _ref6$year = _ref6.year,\n        endYear = _ref6$year === void 0 ? Infinity : _ref6$year,\n        _ref6$month = _ref6.month,\n        endMonth = _ref6$month === void 0 ? Infinity : _ref6$month,\n        _ref6$date = _ref6.date,\n        endDate = _ref6$date === void 0 ? Infinity : _ref6$date;\n\n    if (type === InternalDateComponentType.Year) {\n      return !(year < startYear || year > endYear);\n    } else if (type === InternalDateComponentType.Month) {\n      return !(year === startYear && month < startMonth || year === endYear && month > endMonth);\n    } else if (type === InternalDateComponentType.Date) {\n      return !(year === startYear && month === startMonth && date < startDate || year === endYear && month === endMonth && date > endDate);\n    }\n\n    return true;\n  };\n\n  InternalDateValidator.testParseToNumber = function testParseToNumber(value) {\n    return value !== null && (typeof value === 'number' || !Number.isNaN(parseInt(value, 10)));\n  };\n\n  InternalDateValidator.isEqualDateValues = function isEqualDateValues(a, b) {\n    return a.toInternalString() === b.toInternalString();\n  };\n\n  InternalDateValidator.isEqualDateFormats = function isEqualDateFormats(a, b) {\n    return a.getOrder() === b.getOrder() && a.getSeparator() === b.getSeparator();\n  };\n\n  return InternalDateValidator;\n}();","map":{"version":3,"sources":["C:/Users/ravka/Desktop/react-typescript-task/node_modules/@skbkontur/react-ui/lib/date/InternalDateValidator/InternalDateValidator.js"],"names":["InternalDateGetter","InternalDateComponentType","InternalDateValidator","checkForNull","_ref","type","year","month","date","undefined","Year","Month","All","checkLimits","_ref2","value","getDefaultMin","getDefaultMax","Date","compareWithNativeDate","_ref3","nativeDate","UTC","getUTCFullYear","getUTCMonth","getUTCDate","checkRangeFully","startDate","endDate","Infinity","checkRangePiecemeal","_ref4","startComponents","endComponents","_ref5","_ref5$year","startYear","_ref5$month","startMonth","_ref5$date","_ref6","_ref6$year","endYear","_ref6$month","endMonth","_ref6$date","testParseToNumber","Number","isNaN","parseInt","isEqualDateValues","a","b","toInternalString","isEqualDateFormats","getOrder","getSeparator"],"mappings":"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","sourcesContent":["import { InternalDateGetter } from \"../InternalDateGetter\";\nimport { InternalDateComponentType } from \"../types\";\nexport var InternalDateValidator =\n/*#__PURE__*/\nfunction () {\n  function InternalDateValidator() {}\n\n  InternalDateValidator.checkForNull = function checkForNull(_ref, type) {\n    var year = _ref.year,\n        month = _ref.month,\n        date = _ref.date;\n\n    if (type !== undefined) {\n      if (type === InternalDateComponentType.Year) {\n        return year !== null;\n      } else if (type === InternalDateComponentType.Month) {\n        return month !== null;\n      } else if (type === InternalDateComponentType.All) {\n        return year !== null && month !== null && date !== null;\n      }\n\n      return date !== null;\n    }\n\n    return !(year === null || month === null || date === null);\n  };\n\n  InternalDateValidator.checkLimits = function checkLimits(_ref2, type) {\n    var year = _ref2.year,\n        month = _ref2.month,\n        date = _ref2.date;\n\n    if (type !== undefined) {\n      var value = type === InternalDateComponentType.Year ? year : type === InternalDateComponentType.Month ? month : date;\n      return value >= InternalDateGetter.getDefaultMin(type) && value <= InternalDateGetter.getDefaultMax(type);\n    }\n\n    return year >= InternalDateGetter.getDefaultMin(InternalDateComponentType.Year) && year <= InternalDateGetter.getDefaultMax(InternalDateComponentType.Year) && month >= InternalDateGetter.getDefaultMin(InternalDateComponentType.Month) && month <= InternalDateGetter.getDefaultMax(InternalDateComponentType.Month) && date >= InternalDateGetter.getDefaultMin(InternalDateComponentType.Date) && date <= InternalDateGetter.getDefaultMax(InternalDateComponentType.Date);\n  };\n\n  InternalDateValidator.compareWithNativeDate = function compareWithNativeDate(_ref3) {\n    var year = _ref3.year,\n        month = _ref3.month,\n        date = _ref3.date;\n    var nativeDate = new Date(Date.UTC(year, month - 1, date));\n    return nativeDate.getUTCFullYear() === year && nativeDate.getUTCMonth() + 1 === month && nativeDate.getUTCDate() === date;\n  };\n\n  InternalDateValidator.checkRangeFully = function checkRangeFully(date, startDate, endDate) {\n    if (startDate === null && endDate === null) {\n      return true;\n    }\n\n    startDate = startDate || -Infinity;\n    endDate = endDate || Infinity;\n    return date >= startDate && date <= endDate;\n  };\n\n  InternalDateValidator.checkRangePiecemeal = function checkRangePiecemeal(type, _ref4, startComponents, endComponents) {\n    var year = _ref4.year,\n        month = _ref4.month,\n        date = _ref4.date;\n\n    if (startComponents === null && endComponents === null) {\n      return true;\n    }\n\n    var _ref5 = startComponents || {},\n        _ref5$year = _ref5.year,\n        startYear = _ref5$year === void 0 ? -Infinity : _ref5$year,\n        _ref5$month = _ref5.month,\n        startMonth = _ref5$month === void 0 ? -Infinity : _ref5$month,\n        _ref5$date = _ref5.date,\n        startDate = _ref5$date === void 0 ? -Infinity : _ref5$date;\n\n    var _ref6 = endComponents || {},\n        _ref6$year = _ref6.year,\n        endYear = _ref6$year === void 0 ? Infinity : _ref6$year,\n        _ref6$month = _ref6.month,\n        endMonth = _ref6$month === void 0 ? Infinity : _ref6$month,\n        _ref6$date = _ref6.date,\n        endDate = _ref6$date === void 0 ? Infinity : _ref6$date;\n\n    if (type === InternalDateComponentType.Year) {\n      return !(year < startYear || year > endYear);\n    } else if (type === InternalDateComponentType.Month) {\n      return !(year === startYear && month < startMonth || year === endYear && month > endMonth);\n    } else if (type === InternalDateComponentType.Date) {\n      return !(year === startYear && month === startMonth && date < startDate || year === endYear && month === endMonth && date > endDate);\n    }\n\n    return true;\n  };\n\n  InternalDateValidator.testParseToNumber = function testParseToNumber(value) {\n    return value !== null && (typeof value === 'number' || !Number.isNaN(parseInt(value, 10)));\n  };\n\n  InternalDateValidator.isEqualDateValues = function isEqualDateValues(a, b) {\n    return a.toInternalString() === b.toInternalString();\n  };\n\n  InternalDateValidator.isEqualDateFormats = function isEqualDateFormats(a, b) {\n    return a.getOrder() === b.getOrder() && a.getSeparator() === b.getSeparator();\n  };\n\n  return InternalDateValidator;\n}();"]},"metadata":{},"sourceType":"module"}