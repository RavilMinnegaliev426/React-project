{"ast":null,"code":"import { KeyboardEventCodes as Codes } from \"../KeyboardEventCodes\";\nimport { KeyboardMapKeys } from \"../KeyboardMapKeys\";\nexport function extractCode(e) {\n  e = e.nativeEvent || e;\n\n  if (e.code) {\n    return e.code;\n  }\n\n  var keyCode = e.keyCode || e.which;\n  var location = e.location;\n  var mapped = Object.entries(KeyboardMapKeys).find(function (_ref) {\n    var set = _ref[1];\n    return set.some(function (_ref2) {\n      var _keyCode = _ref2[0],\n          _location = _ref2[1];\n      return _keyCode === keyCode && _location === location;\n    });\n  });\n  return mapped ? mapped[0] : Codes.Unidentified;\n}","map":{"version":3,"sources":["C:/Users/ravka/Desktop/react-typescript-task/node_modules/@skbkontur/react-ui/lib/events/keyboard/extractCode/extractCode.js"],"names":["KeyboardEventCodes","Codes","KeyboardMapKeys","extractCode","e","nativeEvent","code","keyCode","which","location","mapped","Object","entries","find","_ref","set","some","_ref2","_keyCode","_location","Unidentified"],"mappings":"AAAA,SAASA,kBAAkB,IAAIC,KAA/B,QAA4C,uBAA5C;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAO,SAASC,WAAT,CAAqBC,CAArB,EAAwB;AAC7BA,EAAAA,CAAC,GAAGA,CAAC,CAACC,WAAF,IAAiBD,CAArB;;AAEA,MAAIA,CAAC,CAACE,IAAN,EAAY;AACV,WAAOF,CAAC,CAACE,IAAT;AACD;;AAED,MAAIC,OAAO,GAAGH,CAAC,CAACG,OAAF,IAAaH,CAAC,CAACI,KAA7B;AACA,MAAIC,QAAQ,GAAGL,CAAC,CAACK,QAAjB;AACA,MAAIC,MAAM,GAAGC,MAAM,CAACC,OAAP,CAAeV,eAAf,EAAgCW,IAAhC,CAAqC,UAAUC,IAAV,EAAgB;AAChE,QAAIC,GAAG,GAAGD,IAAI,CAAC,CAAD,CAAd;AACA,WAAOC,GAAG,CAACC,IAAJ,CAAS,UAAUC,KAAV,EAAiB;AAC/B,UAAIC,QAAQ,GAAGD,KAAK,CAAC,CAAD,CAApB;AAAA,UACIE,SAAS,GAAGF,KAAK,CAAC,CAAD,CADrB;AAEA,aAAOC,QAAQ,KAAKX,OAAb,IAAwBY,SAAS,KAAKV,QAA7C;AACD,KAJM,CAAP;AAKD,GAPY,CAAb;AAQA,SAAOC,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAT,GAAeT,KAAK,CAACmB,YAAlC;AACD","sourcesContent":["import { KeyboardEventCodes as Codes } from \"../KeyboardEventCodes\";\nimport { KeyboardMapKeys } from \"../KeyboardMapKeys\";\nexport function extractCode(e) {\n  e = e.nativeEvent || e;\n\n  if (e.code) {\n    return e.code;\n  }\n\n  var keyCode = e.keyCode || e.which;\n  var location = e.location;\n  var mapped = Object.entries(KeyboardMapKeys).find(function (_ref) {\n    var set = _ref[1];\n    return set.some(function (_ref2) {\n      var _keyCode = _ref2[0],\n          _location = _ref2[1];\n      return _keyCode === keyCode && _location === location;\n    });\n  });\n  return mapped ? mapped[0] : Codes.Unidentified;\n}"]},"metadata":{},"sourceType":"module"}