{"ast":null,"code":"export function getTextAreaHeight(node, minRows, maxRows) {\n  var style = getComputedStyle(node);\n  var lineHeight = style.lineHeight ? parseInt(style.lineHeight, 10) : 0;\n  var paddingTop = style.paddingTop ? parseInt(style.paddingTop, 10) : 0;\n  var paddingBottom = style.paddingBottom ? parseInt(style.paddingBottom, 10) : 0;\n  var minHeight = paddingTop + paddingBottom + lineHeight * minRows;\n  var maxHeight = paddingTop + paddingBottom + lineHeight * maxRows;\n  var expectedHeight = node.scrollHeight + lineHeight;\n  return {\n    height: Math.min(Math.max(expectedHeight, minHeight), maxHeight),\n    exceededMaxHeight: expectedHeight > maxHeight + lineHeight\n  };\n}","map":{"version":3,"sources":["C:/Users/ravka/Desktop/react-typescript-task/node_modules/@skbkontur/react-ui/components/Textarea/TextareaHelpers/TextareaHelpers.js"],"names":["getTextAreaHeight","node","minRows","maxRows","style","getComputedStyle","lineHeight","parseInt","paddingTop","paddingBottom","minHeight","maxHeight","expectedHeight","scrollHeight","height","Math","min","max","exceededMaxHeight"],"mappings":"AAAA,OAAO,SAASA,iBAAT,CAA2BC,IAA3B,EAAiCC,OAAjC,EAA0CC,OAA1C,EAAmD;AACxD,MAAIC,KAAK,GAAGC,gBAAgB,CAACJ,IAAD,CAA5B;AACA,MAAIK,UAAU,GAAGF,KAAK,CAACE,UAAN,GAAmBC,QAAQ,CAACH,KAAK,CAACE,UAAP,EAAmB,EAAnB,CAA3B,GAAoD,CAArE;AACA,MAAIE,UAAU,GAAGJ,KAAK,CAACI,UAAN,GAAmBD,QAAQ,CAACH,KAAK,CAACI,UAAP,EAAmB,EAAnB,CAA3B,GAAoD,CAArE;AACA,MAAIC,aAAa,GAAGL,KAAK,CAACK,aAAN,GAAsBF,QAAQ,CAACH,KAAK,CAACK,aAAP,EAAsB,EAAtB,CAA9B,GAA0D,CAA9E;AACA,MAAIC,SAAS,GAAGF,UAAU,GAAGC,aAAb,GAA6BH,UAAU,GAAGJ,OAA1D;AACA,MAAIS,SAAS,GAAGH,UAAU,GAAGC,aAAb,GAA6BH,UAAU,GAAGH,OAA1D;AACA,MAAIS,cAAc,GAAGX,IAAI,CAACY,YAAL,GAAoBP,UAAzC;AACA,SAAO;AACLQ,IAAAA,MAAM,EAAEC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASL,cAAT,EAAyBF,SAAzB,CAAT,EAA8CC,SAA9C,CADH;AAELO,IAAAA,iBAAiB,EAAEN,cAAc,GAAGD,SAAS,GAAGL;AAF3C,GAAP;AAID","sourcesContent":["export function getTextAreaHeight(node, minRows, maxRows) {\n  var style = getComputedStyle(node);\n  var lineHeight = style.lineHeight ? parseInt(style.lineHeight, 10) : 0;\n  var paddingTop = style.paddingTop ? parseInt(style.paddingTop, 10) : 0;\n  var paddingBottom = style.paddingBottom ? parseInt(style.paddingBottom, 10) : 0;\n  var minHeight = paddingTop + paddingBottom + lineHeight * minRows;\n  var maxHeight = paddingTop + paddingBottom + lineHeight * maxRows;\n  var expectedHeight = node.scrollHeight + lineHeight;\n  return {\n    height: Math.min(Math.max(expectedHeight, minHeight), maxHeight),\n    exceededMaxHeight: expectedHeight > maxHeight + lineHeight\n  };\n}"]},"metadata":{},"sourceType":"module"}