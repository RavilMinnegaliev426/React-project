{"ast":null,"code":"// @ts-ignore noUnusedVar\nimport { SEPARATOR } from \"../../../../lib/date/constants\";\nimport * as Keyboard from \"../../../../lib/events/keyboard/identifiers\";\nimport { KeyboardActionExctracterBuilder } from \"../../../../lib/extractKeyboardAction\";\nvar delimiters = [function (e) {\n  return new RegExp(SEPARATOR).test(e.key);\n}, Keyboard.isKeySpace, Keyboard.isCodeMinus, Keyboard.isCodeComma, Keyboard.isCodePeriod, Keyboard.isCodeSlash, Keyboard.isCodeBackslash, Keyboard.isCodeIntlBackslash, Keyboard.isCodeNumpadDecimal, Keyboard.isCodeNumpadDivide, Keyboard.isCodeNumpadSubtract];\nexport var Actions;\n\n(function (Actions) {\n  Actions[Actions[\"Unknown\"] = 0] = \"Unknown\";\n  Actions[Actions[\"Ignore\"] = 1] = \"Ignore\";\n  Actions[Actions[\"MoveSelectionLeft\"] = 2] = \"MoveSelectionLeft\";\n  Actions[Actions[\"MoveSelectionRight\"] = 3] = \"MoveSelectionRight\";\n  Actions[Actions[\"MoveSelectionFirst\"] = 4] = \"MoveSelectionFirst\";\n  Actions[Actions[\"MoveSelectionLast\"] = 5] = \"MoveSelectionLast\";\n  Actions[Actions[\"Decrement\"] = 6] = \"Decrement\";\n  Actions[Actions[\"Increment\"] = 7] = \"Increment\";\n  Actions[Actions[\"FullSelection\"] = 8] = \"FullSelection\";\n  Actions[Actions[\"ClearSelection\"] = 9] = \"ClearSelection\";\n  Actions[Actions[\"ClearOneChar\"] = 10] = \"ClearOneChar\";\n  Actions[Actions[\"Digit\"] = 11] = \"Digit\";\n  Actions[Actions[\"Separator\"] = 12] = \"Separator\";\n  Actions[Actions[\"WrongInput\"] = 13] = \"WrongInput\";\n  Actions[Actions[\"PasteValue\"] = 14] = \"PasteValue\";\n  Actions[Actions[\"CopyValue\"] = 15] = \"CopyValue\";\n})(Actions || (Actions = {}));\n\nvar extractAction = new KeyboardActionExctracterBuilder().add(Actions.PasteValue, Keyboard.isShortcutPaste).add(Actions.CopyValue, Keyboard.isShortcutCopy).add(Actions.FullSelection, Keyboard.isShortcutSelectAll).add(Actions.Ignore, Keyboard.someKeys(Keyboard.isModified(), Keyboard.isKeyFs, Keyboard.isKeyTab)).add(Actions.MoveSelectionLeft, Keyboard.isKeyArrowLeft).add(Actions.MoveSelectionRight, Keyboard.isKeyArrowRight).add(Actions.MoveSelectionFirst, Keyboard.isKeyHome).add(Actions.MoveSelectionLast, Keyboard.isKeyEnd).add(Actions.Separator, Keyboard.someKeys.apply(Keyboard, delimiters)).add(Actions.Increment, Keyboard.isKeyArrowUp).add(Actions.Decrement, Keyboard.isKeyArrowDown).add(Actions.ClearSelection, function (e) {\n  return Keyboard.isKeyDelete(e);\n}).add(Actions.ClearOneChar, Keyboard.isKeyBackspace).add(Actions.Digit, Keyboard.isKeyNumber).add(Actions.WrongInput, function (e) {\n  return !Keyboard.isKeyNumber(e);\n}).build(Actions.Unknown);\nexport { extractAction };","map":{"version":3,"sources":["C:/Users/ravka/Desktop/react-typescript-task/node_modules/@skbkontur/react-ui/components/DateInput/helpers/DateInputKeyboardActions/DateInputKeyboardActions.js"],"names":["SEPARATOR","Keyboard","KeyboardActionExctracterBuilder","delimiters","e","RegExp","test","key","isKeySpace","isCodeMinus","isCodeComma","isCodePeriod","isCodeSlash","isCodeBackslash","isCodeIntlBackslash","isCodeNumpadDecimal","isCodeNumpadDivide","isCodeNumpadSubtract","Actions","extractAction","add","PasteValue","isShortcutPaste","CopyValue","isShortcutCopy","FullSelection","isShortcutSelectAll","Ignore","someKeys","isModified","isKeyFs","isKeyTab","MoveSelectionLeft","isKeyArrowLeft","MoveSelectionRight","isKeyArrowRight","MoveSelectionFirst","isKeyHome","MoveSelectionLast","isKeyEnd","Separator","apply","Increment","isKeyArrowUp","Decrement","isKeyArrowDown","ClearSelection","isKeyDelete","ClearOneChar","isKeyBackspace","Digit","isKeyNumber","WrongInput","build","Unknown"],"mappings":"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","sourcesContent":["// @ts-ignore noUnusedVar\nimport { SEPARATOR } from \"../../../../lib/date/constants\";\nimport * as Keyboard from \"../../../../lib/events/keyboard/identifiers\";\nimport { KeyboardActionExctracterBuilder } from \"../../../../lib/extractKeyboardAction\";\nvar delimiters = [function (e) {\n  return new RegExp(SEPARATOR).test(e.key);\n}, Keyboard.isKeySpace, Keyboard.isCodeMinus, Keyboard.isCodeComma, Keyboard.isCodePeriod, Keyboard.isCodeSlash, Keyboard.isCodeBackslash, Keyboard.isCodeIntlBackslash, Keyboard.isCodeNumpadDecimal, Keyboard.isCodeNumpadDivide, Keyboard.isCodeNumpadSubtract];\nexport var Actions;\n\n(function (Actions) {\n  Actions[Actions[\"Unknown\"] = 0] = \"Unknown\";\n  Actions[Actions[\"Ignore\"] = 1] = \"Ignore\";\n  Actions[Actions[\"MoveSelectionLeft\"] = 2] = \"MoveSelectionLeft\";\n  Actions[Actions[\"MoveSelectionRight\"] = 3] = \"MoveSelectionRight\";\n  Actions[Actions[\"MoveSelectionFirst\"] = 4] = \"MoveSelectionFirst\";\n  Actions[Actions[\"MoveSelectionLast\"] = 5] = \"MoveSelectionLast\";\n  Actions[Actions[\"Decrement\"] = 6] = \"Decrement\";\n  Actions[Actions[\"Increment\"] = 7] = \"Increment\";\n  Actions[Actions[\"FullSelection\"] = 8] = \"FullSelection\";\n  Actions[Actions[\"ClearSelection\"] = 9] = \"ClearSelection\";\n  Actions[Actions[\"ClearOneChar\"] = 10] = \"ClearOneChar\";\n  Actions[Actions[\"Digit\"] = 11] = \"Digit\";\n  Actions[Actions[\"Separator\"] = 12] = \"Separator\";\n  Actions[Actions[\"WrongInput\"] = 13] = \"WrongInput\";\n  Actions[Actions[\"PasteValue\"] = 14] = \"PasteValue\";\n  Actions[Actions[\"CopyValue\"] = 15] = \"CopyValue\";\n})(Actions || (Actions = {}));\n\nvar extractAction = new KeyboardActionExctracterBuilder().add(Actions.PasteValue, Keyboard.isShortcutPaste).add(Actions.CopyValue, Keyboard.isShortcutCopy).add(Actions.FullSelection, Keyboard.isShortcutSelectAll).add(Actions.Ignore, Keyboard.someKeys(Keyboard.isModified(), Keyboard.isKeyFs, Keyboard.isKeyTab)).add(Actions.MoveSelectionLeft, Keyboard.isKeyArrowLeft).add(Actions.MoveSelectionRight, Keyboard.isKeyArrowRight).add(Actions.MoveSelectionFirst, Keyboard.isKeyHome).add(Actions.MoveSelectionLast, Keyboard.isKeyEnd).add(Actions.Separator, Keyboard.someKeys.apply(Keyboard, delimiters)).add(Actions.Increment, Keyboard.isKeyArrowUp).add(Actions.Decrement, Keyboard.isKeyArrowDown).add(Actions.ClearSelection, function (e) {\n  return Keyboard.isKeyDelete(e);\n}).add(Actions.ClearOneChar, Keyboard.isKeyBackspace).add(Actions.Digit, Keyboard.isKeyNumber).add(Actions.WrongInput, function (e) {\n  return !Keyboard.isKeyNumber(e);\n}).build(Actions.Unknown);\nexport { extractAction };"]},"metadata":{},"sourceType":"module"}